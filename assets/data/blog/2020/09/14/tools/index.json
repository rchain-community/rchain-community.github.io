{"hash":"cd7697788bd7967fde6d4e84589e4ea257415f43","data":{"post":{"title":"RNode explore-deploy bash script using jq","date":"14. September 2020","timeToRead":1,"content":"<p>You can run read only contracts on rchain without paying any fee using the http explore-deploy api call. Every returned value from an explore-deploy is enclosed in a structure having a type and data field. Pulling out just the data as json is often needed to use the complete result in json without enclosing type and data constructs. This example uses the bash json utilityy jq to 'detype' the output. While jq is good for many uses of json in bash using javascript might have been as easy in this case.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">#usage<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>explore<span class=\"token punctuation\">.</span><span class=\"token property-access\">sh</span> <span class=\"token constant\">URI</span>\nuri<span class=\"token operator\">=</span>$<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token string\">\"rho:id:ar17ohqq83kx7a16nbfquwu9gxidduk9hstgbs9gkbj63o8gqyh1ye\"</span><span class=\"token punctuation\">}</span>\ncurl <span class=\"token operator\">-</span>s <span class=\"token operator\">-</span><span class=\"token constant\">X</span> <span class=\"token constant\">POST</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>observer<span class=\"token punctuation\">.</span><span class=\"token property-access\">testnet</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">rchain</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">coop</span><span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>explore<span class=\"token operator\">-</span>deploy <span class=\"token operator\">-</span>d '\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">return</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rho:registry:lookup</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">valueCh</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Fill in registry URI: `rho:id:11fhnau8j3...h4459w9bpus6oi`</span>\n    lookup<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'\"$uri\"'</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>valueCh<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>@value <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> valueCh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token string\">'|tee /tmp/explore.err|jq '</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">expr</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">|</span>\ndef detype<span class=\"token operator\">:</span>\n  <span class=\"token keyword control-flow\">if</span> type <span class=\"token operator\">==</span> <span class=\"token string\">\"object\"</span>\n  then <span class=\"token keyword control-flow\">if</span> <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ExprTuple\"</span><span class=\"token punctuation\">)</span> then <span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ExprTuple</span></span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span> <span class=\"token operator\">|</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>detype<span class=\"token punctuation\">)</span>\n       elif <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ExprList\"</span><span class=\"token punctuation\">)</span> then <span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ExprList</span></span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span> <span class=\"token operator\">|</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>detype<span class=\"token punctuation\">)</span>\n       elif <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ExprMap\"</span><span class=\"token punctuation\">)</span> then <span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ExprMap</span></span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span> <span class=\"token operator\">|</span> detype\n       elif <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ExprString\"</span><span class=\"token punctuation\">)</span> then <span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ExprString</span></span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span>\n       <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">.</span> <span class=\"token property-access\">end</span>\n  <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">.</span> <span class=\"token property-access\">end</span><span class=\"token punctuation\">;</span>\ndef <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> # walk def is needed <span class=\"token keyword control-flow\">for</span> old jq <span class=\"token operator\">&lt;</span><span class=\"token number\">1.5</span>\n  <span class=\"token punctuation\">.</span> <span class=\"token keyword module\">as</span> $<span class=\"token keyword\">in</span>\n  <span class=\"token operator\">|</span> <span class=\"token keyword control-flow\">if</span> type <span class=\"token operator\">==</span> <span class=\"token string\">\"object\"</span> then\n      reduce keys<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword module\">as</span> <span class=\"token function\">$key</span>\n        <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">.</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>$key<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">(</span>$<span class=\"token keyword\">in</span><span class=\"token punctuation\">[</span>$key<span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> f\n  elif type <span class=\"token operator\">==</span> <span class=\"token string\">\"array\"</span> then <span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> f\n  <span class=\"token keyword control-flow\">else</span> f\n  end<span class=\"token punctuation\">;</span>\n<span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>detype<span class=\"token punctuation\">)</span>' <span class=\"token operator\">||</span> cat <span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>explore<span class=\"token punctuation\">.</span><span class=\"token property-access\">err</span>\nexit</code></pre>\n","author":[],"excerpt":"A small demo for a explore-deploy bash script using jq","cover":null}},"context":{}}