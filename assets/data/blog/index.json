{"hash":"e552743fa35bb241955ee2c44b261e8d76fb2cc4","data":{"posts":{"edges":[{"node":{"id":"e18110eb2240d68a434ac4555efb5256","title":"Why block merge matters and how RChain is solving the scalability problem.","path":"/blog/2021/02/13/rchain-merge/","date":"13. February 2021","timeToRead":7,"author":[],"excerpt":"Horizontal scaling with RChain.","content":"<p>This article aims to explain how RChain can reach horizontal scalability, targeting one of the key ingredients of RChain platform - block merge.\nSome preliminary results of implementation analysis are included in the end.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1920' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-593c7661a8db68f261b51a74d107357e'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-593c7661a8db68f261b51a74d107357e)' width='2560' height='1920' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAwCAIAAAAuKetIAAAACXBIWXMAAAsSAAALEgHS3X78AAAGSElEQVRo3u1Z61NTRxTn3/LPqB/qd6d%2bqVjGGsYyo5lSBL5Up1hgEEuBokghEBRKAuVh0PAKBkwCCRJCbgh5kHDzvDeP%2b%2brv3jW3Ea2FTiJxmp2d5ezj7D2/c/ac3RNqREn6rGtNFUAVQBVAFUAVQBXA/wcALwiCKKLNcxxaMnJiCjQI0pJBtau2hCiuxSNlBICSRcnlJKXL8Tw%2bBzCEkKUXRZlWpAGBEV5psYaMcHJPHhQURsJLaHlCEAh76QFgdwj9x9TUzZs379y5M/706fDwMMRNp9OSgiSXzweDwd8GBmSQCkKIBQLjEBLdVDqt2EOWFUoAy1EkYlpcJFNosZbNZKQyHSF8D1u3t7ff1mp/aGoChra2NmDQ1NcbjEadTqfVan8fHga8vv7%2baDQK0Zuamm6jaLUdHR0mkwkrR8fGWltb79%2b//1NbG2Y6OjufDA1hn4aGBmzS/fDhDY1mTK8nGikXgObm5oFHj65du3br1q26ujr/4eGXly5dv34dQk9OTl64cOGrK1ew8sDv/76xEZB6enqampu/uHgRjPUazdXaWt3oKDDMz89fvnwZMLDMOD2NTbq7u6cMhpbWVrDDSmUBMDY2Vltb29LSAm0NDg7iwHxTV6fX6wcGBoAB7cjISFdX15rFkmaY/r6%2bhYUFo9E4otM9evz42xs3YIH%2b/n5ghtBfX736XUNDb1/f0NCQZX39197eH%2b/eBSQYpywAVCdmWRbCKaSEM51MpUDAKck5JieYVyKJVGAhBd5CHAm6wOGpr693ulxkE3mlKHY9eKDRaGw2m1QU3EoJQA6LJMYV4iOvmEUONcr3OIVQQ6dK84XYQkaIgomj8wUWOXypg2eJpDVnUn9JSsE8H95TNV0pAaBkstmXZvO%2b10vHYtaNDYZlETSPaRpHCIESgyAOAwHK58NKLIvF4xjBGsTKRDIZTyRA4PRHj4%2bxGOcNg6lUCr6OKd/BQSAYBJfd4cBJA6FeNSUAICgKC4ZCcEFEiZ/b2xEWbXb79PTM4JMn8E79%2bDg8r7e3Fy6OudnZ2ZXVVcTHX3p6cG88HhxEZEQL3s7OTsSfbacTvguuZxMTjY2N4%2bPjd%2b/dQ2RDUIZvIEa59/ZOfx%2bf1gJQSSaTgV73KQoRE34MLUJ/0CtRPLQbPjoCgRHcUwAMGkqGOkFDwTAaNO3Z3wcBRnD5fD7Iiim0xDjYYfP1a7BLZXlKKEV61yXEd0%2btesrFfzvlH/EQoUxOXPw%2bK6bVSKKGnROz6iutOC6d6BYvO9/ntKjUAmClnrDh55QPSO/FRKmSExr51Xzk4MI2npO9MJfnveHsQSRL7rt8Os1s2VmvRyipEWpKd3IgMh21TYatz6RsBL1YmntuPbDsxNisfPvm/Acu/Ujw%2bZyQzaoslWUBSeSSPgu1YfT79tHb83hXbN6Vzb1AIIiux%2bnc%2bdMYc21LlXmEyH0XiUYi0SjDsBRFZTOZcDhE08e4cRHycZMEgiFcwBUKgIR%2bXFJ4SqRSab/fz8gddHPxRBIXF%2b5BhmGyZ8%2b5PmEU4qHkV2nvcioehZRJOsR4l1LUajqVQPcoGt%2bmktRRpkKdWPFTOmzVH67ppFxUjjtsIGAZpe2TUl4%2bNkcJzmDe3XAnspwoVaYFeJ6T4rvRveV9j1sJ%2bFzUvRT3bZDov%2b1646JigFGZFnjnqkomkzRNyz4dOYYDgMD7D6nc28dO5fqA/BATSIoIDIl4AuknyzIAw7CMknkKp88Vz8kCSoGcEJdOHm96rXZqk2HTJPet%2bLeQUgTFDOgncvEF26zZuZjlM%2bgSAEJFW6BQFFkljs%2bHkoeRVOhv0c8XQPGT/SNVtYMovQ2XguK4p2Q/a1bwKX6V%2bG/sJc6JOZ5HIo98HGmrl6L2UDweJLL4i4zWtbPzZncX%2bS7aUDiMtBhrkEB7vd6NzU2kwnQsZllfRx6MBagOhwODYLc7HG5lB7fb7djaAhdm8QlMSaW1AAo%2b8NxkWlld3dreXnzxwmQyQSZI8Gxiwmw2T8/MzC8szMzMvLbZzEtLWOl0uTCC2VdWK2SaMhiWV1aQs2MEdWl5GSowGI1Y%2bdJsxm7gmpubA73rdq%2burUnneITUn67UXyAFUTxzdl%2bOnxY/6Gr/5H8nuu878cf3rP6PrArg09S/AFGCx%2b0G/N1RAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"2560\" alt=\"merge1\" data-srcset=\"/assets/static/merge-1.82a2fbd.402d6d7ced2106dda812b7a896db5d6c.png 480w, /assets/static/merge-1.cbab2cf.402d6d7ced2106dda812b7a896db5d6c.png 1024w, /assets/static/merge-1.2665e34.402d6d7ced2106dda812b7a896db5d6c.png 1920w, /assets/static/merge-1.42db587.402d6d7ced2106dda812b7a896db5d6c.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/merge-1.42db587.402d6d7ced2106dda812b7a896db5d6c.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-1.42db587.402d6d7ced2106dda812b7a896db5d6c.png\" width=\"2560\" alt=\"merge1\"></noscript></p>\n<p>Blockchain is effectively a computer, replicated across a number of nodes.\nTwo basic offerings are cryptographic proof of state transition + economic incentive for making sure one cheating is going to be punished.</p>\n<p><strong><em><div style=\"font-size:larger; text-align:center\">This article is targeting the first part of the equation - state transition.</div></em></strong></p>\n<p>Early incarnation of blockchain application as cryptocurrencies gave birth to a notion of public ledger. This public ledger contains, in the simplest case, a list of balances. But just a list is not a good model for such a ledger, so usually more sophisticated models are used, like <a href=\"https://en.wikipedia.org/wiki/Unspent_transaction_output\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">UTXO</a> for Bitcoin and some others.</p>\n<p>Ethereum developed a state model (<a href=\"https://ethereum.org/en/developers/docs/evm/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">EVM</a>) that allows storing turing complete state machines, thus enabling executing arbitrary smart contracts.</p>\n<p>Entities that are allowed to introduce changes to the state, changing balances, making transactions, invoking smart contracts - are miners, or validators of the network.\nIn case of PoS networks, once some state change is introduced, it should be verified by other validators, and the Sword of Damocles should punish thee daring cheating (or, in simple words, the cheater will lose its stake).</p>\n<p>This is the basic principle of most chains.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1920' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-5fb61cbb05f3f35a29cbb475bfe7b65c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-5fb61cbb05f3f35a29cbb475bfe7b65c)' width='2560' height='1920' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAwCAIAAAAuKetIAAAACXBIWXMAAAsSAAALEgHS3X78AAALJklEQVRo3uVaaVBTWRamtK3Sf/a0P62eP5Y1Vpc1TleN9lRNtz9s7bFb22Xs6qbd2gXFsukWx6VbERVQ9kWxR3ZGNkFBSJBFdsIiS0gIIawBQlYgKyEEAiSZL%2b%2bFZ3AhL6HL6Zm5devWzc19j3vOPec73znBw2K1/ld3j/9fAcwWCzo5ee23Th//TwpANcv8SB2InKCZF360vLLhpflbEsBM/EXd%2bHh9QwOHyzXNzIwplY7CoM3MzIyOjTmuqNTq6elpamXObJbKZPOHtxomJ/GI9e0IMDs3h78UFx/ve/78latXQ0NDo2NiJiYmKiorp6amdDpdfX19O48XHBysVKn0ExNsNntQJIqKikpOSRkfH4ckTc3NGq2WWVgoVygaGhpweh8fn4zMTFKwtyTA/bi469evh0dEhISEREZFBQQExMXFBQYGBgUF/evBg9y8vAMHDoSGhRUwGPiquKTkKpqf3/UbNxhM5qnTp2/fvo03XLh48Zq//61btzo7OwUCgdUtx3BTAGj9xs2bmZmZx44fx8nO%2bfqy29pOenn948IFqD8rK2v37t04Mw6Xlp7eymb7%2bvo2NTVd/umny5cv//Djj8dPnMDtQQAOh3MzIMB2dNd1vyQf6OruvnPnDqyiu6eng89HDw4JGRKJcPqw8HAIg/W2tjZMUlJT8/PzOe3tEqkUH4uKix%2bkpeXm5jY%2bf97c0iKTy2FR7hmPawJYF2KFdSEQOeKMlZpbLNZX8Mr6yrPWXxlG55vZ3s1zNuVYDNMTRpORMlOszczOouMj5ugwLXKOyZzNICyYAKNs24gRHzFixb5IdHKR3Ey%2bh%2brkissCmImGQ5LHIPUk1Qx3KTu6x/jqiTFsovbQjBVOm2XRr9y9AehgdlatUtfWV3OGW/LKcpm1jD5lF7XB6sxPYN9wCbVGA8gXSyQjo6MAVixiHBkZ6evrE4nFCBcAVozYg3VsHtfrsROTwaEhLFrdvgGcXiwWK5VK0fAQX84teV5c1lo6oOolZVv8BkgBCp8%2bRbioq6%2bPvXcPHv8wOxv%2bGp%2bQAMj/5/37SYmJAKi0tLQHDx5g/T5WkpIAu%2bipqamZWVl4FnBschbgXi8AnhkdHUVUIu9RO6kS6frFukGjadJCmZCLrk/HldFMJhPl/e44MSWAVColw7td2Q6mZR9d4Xx2X5%2bfUONLexzZIfXRZR8gQbC3t3dycpKcz9lQwfzCcpz5wCKubHmdg7rhu06cGK%2bAn8ENSDh6cafU0THSC/ugQ7Djqelp7bitYYI%2bbTJpdbpJox2X4bhYwU6dXo9vXQpqi/mAVqslz603jguVPSK10DQz/cKJ6amfwWBk5%2bQkJSffjY0F9ch78iQjIwPeiQjN5/MrKyt5fD7mKSkp4eHh4CDJycnp6elLFYBUvEwmU6vVUplEoODxAYkyzqCqj34cIDs0Cq4K%2bg01Qyl9/f0goXK5HECJm8E6Ogg5wBQUFfeAUSQSLVUA8hJUalU7t/1ZRSniQJuwlT3Q0j3SQejfQkcAylPJjoiL07Pq6kBOKyoqSp89Ky8vLysvL2AUNDQ2wlztjIgwUUcXd9OEgKHQE%2blQItVAu7SNJ2sb0yustGF06W1JAuD0gNH5%2b5gbN2onpscpB1hcgDniDR0dHYEBAZEREWFhYVd//tnvypW7d2Iy09MTE%2bLDQ0Pv3r3zy73YyPCw0JBg7IgKC4%2b9E/NL7N2EuLiU5KSYyMjnjY10MoQ3otDg4CAyLBJw7KTIYqUJo6QAMBVkBadPn7odHHzu3Dlvb2%2bvU6eu%2b/t7n/HetWvX19987fODz1dfHTh48Fsvr5OYhATfRlYUHR2dkJAQGhzMKCigQ7PfyIXgSfYslhJgYVCzOqMS/UIh0rGHmZktzS0RERE5jx4hd9myZcumTZuio6OARclJiXm5jwsLC8EfMtLT4RJFT4tKn5VWVJQDjlh1LHcEoEwIcYCM6qQJ6SY1hik9TRMiBTAYjSWlpdz2dvgoshw/P7/Nm//8u/fe2/jBB3weDxu4XO6EAbuMgCjj1BTQCTQOyAEgGhgcbGltdceEKAEMBoOMIINYhhN3jnZ0jvBGHZ3Y6Q309%2bc8fgTG9iQ/H8az%2bt13V65atXLlyq1bt8K6SsvKampqIN7zpiZIiJwOOVoLm93G5XaDBfT1Cbq63BeAlEGjUXM53NLykg4ZJ6c4B4QUdNpMA0ZJAaDOsrJyFosVER7h4eGxfPlynB6TQ4cOVVVVZWdnNzc3V1VXMZkMBpNRUlICo4KZPc7NTUxM8L/m19TctCQnBgRJpRKAqUwuRSCraq%2bo66oZUvcvIBSLCgBLUKrVs3Ozf/34Y5x7xYoVy5YtW7du3dq1a6F7EHUjQSWsRKEAgaygoADpcnx8/JEjR8gqiztkjlK/QqHQ6/XzVEI3rBuQ6ETTjlTC2dvniPpFdk42qX6M27dvB%2bE5cvTo6tWrBQJBT29vZlZmVHSU7/nzhw4f/mLXru07dvzpww8PHTxI4oebbJTULhyAdGI7mbO8Quac3cDw8DCb0/a9jw%2bOThpPUFAQeTP%2b/v7v//79Hdtx4B179%2b37/IvPP/vbZwDWbzw993z55d/37Dl9/Fh%2bXp6bMErRafKK3aDTlA/AEcMjImA5uAGYEMTw9PRETPD81nPnzp179%2b47%2bt131/yvxd6LzS8ouHTpUmRkZGBgYHFRUUpSUlVl5ZJQ6AWdNi%2b4AfoJDSkGTHH9%2bvVQ/5o1a6JjYgAvo8oxHr8DRg8aNywW20m12Xzx4sX9%2b/dv%2b3QbkNSxGOymAHAyUNH5lFI9qOkb0giNJqOFNhvFDhNB0U56eUGAVatWwXet874xz9bsNTlwVSTH27Z9unHjRlwd/VLXawpblLWADsmksoEhYae8vYZXXd/NGlD20kEhqs8QZ31aXORBtFu3btmy3pmZWaJm45hYYsx6%2bHDzli1/2LBBSZS73RXAwUeBQj09vWWVz3jStixmRnFjEc2yyvyr7KTozJkzOP0776w4e/YseQMv/8ZBbGPVsj76y0d/3LRJLJHQL/R6vGq1KpUKRAjpEoL5GFHml2hEglGeYISncqWwNW2y1QSQAOD0yLYAlMeOHcODYqkUQAQHUGk0EAa3AWw1GCfLysu2fvIJyBL%2bupW4PTcFEAqFHA6HzWY3NTd3dZGh1wwiRNRULC8isbNkYIrA8uMnTmyAVahUiUnJwMqioiK%2boFMis8kAu0fX6HR6gwEOBx4KB8ANlJaWCvv7yZ9I3InE5C0j0IAOObJRCoLomBDa5NSUSqvFDZRXVCBmVVVVIy1mMJmDQ0NavU39YG%2bKkREIwKqtrSivqK1jeZ/yOnr48JP8JwkJ8cXFxXTK7q8XAI%2b1tLRoNBpHuLA6kG06AoBpSmQyqFY%2bMiIBICgUgM4xlUoql8M%2bG%2bvr61ks3LZMLgeN43C52AYSivgDCfuEQsyt7pkQUm/YT0NDQ3V1tVQqtXGV2RnVxKjWqHZg084hwlbBnq9Ik3BEwg7xwlkyW3qpmYnil600Tbuy8hoBoHixWAyVgS2STgz07FBweTKOQiexul5aJE8G9o/ADB7KZDKRJyDBz83LA04wCwvRc3JyUlJTET2d8hTngYwyGDCqEcWoVCFut8FoZn1nXa9SYCZ%2bB6BfVqFUgxwVSoFhIAFoZbMRg%2bEYouHh2traqurqToGgrq7OQNQCXfql7I35ACWJccrYpehgCWpah5qG1QOu1oXo1BjdqCjSEsBmkYTtTk4bZOPDcp1kZtbkUmVukVqvY6fKR7/mT0wvtQUo5KKZ/ib%2bV8KMeG%2b1WH4bh/6f%2bm%2bVfwOWHja4WN6XHAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"2560\" alt=\"merge2\" data-srcset=\"/assets/static/merge-2.82a2fbd.3c15849e1d7be530227de74541f709e6.png 480w, /assets/static/merge-2.cbab2cf.3c15849e1d7be530227de74541f709e6.png 1024w, /assets/static/merge-2.2665e34.3c15849e1d7be530227de74541f709e6.png 1920w, /assets/static/merge-2.42db587.3c15849e1d7be530227de74541f709e6.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/merge-2.42db587.3c15849e1d7be530227de74541f709e6.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-2.42db587.3c15849e1d7be530227de74541f709e6.png\" width=\"2560\" alt=\"merge2\"></noscript></p>\n<p><strong><em><div style=\"font-size:larger; text-align:center\">But what if some miners of the network make two state transitions at the same time?</div></em></strong></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Proof_of_work\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PoW</a> systems solve this by the longest chain rule - state transitions are stacked upon each other in order at which miners produce proof of work, and in the end the longest chain wins. There can be, and will be orphans, so miners doing useless work is a part of the protocol. <a href=\"https://en.wikipedia.org/wiki/Proof_of_stake\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PoS</a> chains mostly suggest slots for blocks, and the more stake miner has the more blocks it is allowed to create, thus collecting more rewards.</p>\n<p>As it can be seen, this basic principle of a blockchain assumes that all state transitions happen one by one, and verified one by one. This leads to seeking scaling opportunities in running parallel chains or making some computations off chain and committing the result of a batch at once.\nWhy is this, one might ask? Why not have a nice graph, or hypergraph, or hypergraph of hypergraphs? And include all state transitions that have been done by all validators, eliminating orphans at all?</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1920' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b4fa6afcdfcdf16a09e08c13789a556f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b4fa6afcdfcdf16a09e08c13789a556f)' width='2560' height='1920' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAwCAIAAAAuKetIAAAACXBIWXMAAAsSAAALEgHS3X78AAAMA0lEQVRo3u3a93NX1RYFcP8jf2AYGUFBxRFRRFDAhoIiKMFGFWlPpYMgINKRDlIElSYoqFSHGjoIAYSEEt4jQEIx7X1yN7nmhRB4Yxh0xjOZO%2beee8pae6%2b9z7n3m3tKSkv/1n/3/EOg8l9xSYm/Ktv/HgSilCEurxeXt5fcAQ41TKCwqGj3nj3r1q27lJ8P8ZmzZ/MuXFDJPXdu6bJl2Tk5pTXtihojUFRcZvGso0dbtGgxdNiwd955x23btm0HDRoEcceMjEmTJw8YOPDylSs1y6GGCRw8dOj9999X%2beCDD6ZPn/7mm2927tJl2rRpw4YNu3r16vDhw8/m5v6lCRw4ePCll15av2FD586d33333b59%2b2Z06tS7T59evXtv2ry5bt26mbt2lSada5JARXtUss3tmKq4vCdk%2bQUFU6dOZe%2bdmZki4cqVK9nZ2b/88suGjRtHjBy5eMmS83l5pbexyu3DuKdi6rix3Jhbqul8Y4mUWnoHyh8E3BQUFJw/f/5CUv6TlH8nJT%2bfQQtYUeXSpUsXL168lpT8pBQkxZAYm5eXp2LsuXPnzp49a/i5pBjlkdvc3NzTp0/roLPb80nJKy9WcRvtF8tLTKhi9VhLh0B49dq10pSATHctuXfNycmx/ObNm7ds2bJ27dr58%2bf/%2bOOPX3/99cyZMxcsWLB8%2bXL1ffv2meLMmTOm0/no0aOFhYXFxdfzvpVOnjy5e/fuDUnJyso6cODA4cOHf/rpJ1pSR8PY2BYMBN2E27ZtW7NmjRUNhHjHjh1bt2794YcfzHDw4EGNxv78889uMzMzrWuV8HAZAQNMVBZbRUUIJHorDXCYxBRm/Oabb7766quhQ4eOGEHPI8ePHy/PzJ49m%2bgXL16M24oVK1avXr1o0SJpZ%2bXKldbTsnTp0hkzZnzxxRfffvstQHCo6L9p0yY2Wr9%2bvf6ff/654ZYQNgsXLmQp/dkOH8PXJsVAzMMz0PJJFQRcEWASV7h5kC0N2759OyaW1OKWMH777TfrgQgoNMuWLZsyZcrkyZM5CiCUZs2apUUFDoRxWLJkyYABA2RScF0//PDD9957T7b97LPPJkyYMG7cON0GDx48d%2b5ccyLAWJyAAA9z4J49e06dOrV///5du3b9/vvvNyWgk2e//vorq3P6nDlzWJGZx44da40hQ4b07NnTSkBohHjgwIHSpdzfq1evjz76SL13796dOnVq166d6xtvvAFl69atX3jhhT59%2bkycOFFiNQMmH3/8sWTFk3Y6u96rr76qxYQmN/Onn35qCatrIVqVUaNGIQYY20VIVC0hWS8kRKZkjT1L8wDe5LFx48YxY8ZYHlyb1HPPPffWW2916dIFgg4dOtiDX3vttWbNmj300EMvv/wyDnBD9vrrrzdv3vzBBx9s2LDhI4884mmDBg0aNWrUqlUrQ/R0RY9PTGsetJFnFIS5giAtzQPQywRUAGd1HpATBArZkSzdhzSJlU%2bBZnIczEst5MEz/0oK%2b7E9DTAVVvC1b9/%2biSeeUIG7adOmnGN3c7jQjVugBBFQnRlCHzQ6duzIHKNHj87IyLAhcrhRaHAUQxgIg2CAPr%2baILbnSzIqJIT9vHnzaJS7IWMnFuqcFNOxGQQW1giH%2bvPPP2/hZ599lsnVX3zxRWZ%2b8sknmzRpwg8UzwTcBR8OJIcwRbk1G9NYAmjXkBktCQlX2UI47dy5EzCp5fLly/nJYbFqCbmq8wD1izxTMLaIBJfNLNy1a1dwIatVqxbTvvLKK2TTpk0bhgSUzdTZEhRXrFxRevrpp3WrX79%2bw6Tcd999OjtcPPPMM4LEbLh169YN87fffjuUyWr9%2bvXjAYZftWrVd999J5/KK7R9UwlJMhKo8NdbwJEBAwgjTqQWhhdeAsstzZCsZSwGNMPzcuPGjYkEqwceeEALoPXq1Xv88ce5wlQm1F8iNhAxhuANTuBYAWOS/v37u5VGecBs4ps4SYBohQrzoUHeAFcXxLElxQ4lDBjAkqbgYk43EXO6MjyTMxh8WiCIbOMKOmQQk5ZbhkdJpWXLlobojKeelIMt2%2bugM98axfwm5zRrUc6kSZOEBCMKQvEpxbP9LfYBCtMV7h49erA38cloXGlG2rAAdRI0iUspgQP6Fkl57LHHQAGUyZnw4YcfphMiQUBAuxry1FNP6Va7dm00pCZ8cPAUbUkMz0jWyHBy9%2b7dOcTeZyfhHxXp6Bb7AO/Y/%2b0DIljYSTh2JdsNJjiY%2bpNPPjEXgfIJU8knkUbVW5YXxKDhH6CpHwdAwy26IUzxJMFGhGQstgTG1Wa2FcQ2EhscAFakPTCOHDliH4CwuiAOCUn8ElYkIloEl3B52UqyChOyX506daicmcUiS1MCOYVgmJO7cEAPGTYmOddwiKueOpjEVBiGf5AMVwRP9or9ThiQEEhxALvFPmCncLqSeUKRkUlt/gKXZMWxUxBFiTxrgJiqi9nIw/LU1Sgp9957r2yjIvlgqyKmESC2Rx99lFr0NKGpOARV7oXYYUTsuuUNciIbGIAhJ2cWx77qPCAGnEntZQ48aDiKGCOfOvDMTIoZhydFJEisNBB7Z9ukiD9hyoqMDR93MTwPeEQSGUkRP6iqABSJyC3E4MbVPsDnkT3nJgUH5y4ZMk7mdqrqJBRnY9DlfqHD/K7iGNxILKF1YXr//fczKsTMyftszwMdkoIJZIzNM%2bSLABuriApPISYeTIzVkxvJkpA8osDooL1XUiQSWQgGJyLHgmPHj1eXhWIfsOd5DZiQFEcoZMgGB%2bYXT3Y33DwSXoLM7Frc2ihoyXqiEFx5nfmhUW%2belEiR7ZOCmCDWwuRG2cLQ41Xzc7irDcH8TtcOYPxvTkLih71793qzufVhLq66xtZtgPAXIYjZHOyIDkhMwtHcHcQcB4gYbvikLxBj82J%2blTiuaYfV3ge9/kCreEo8lKOzSLPnsAXZCFzm86LjzSHegewD1b0PVCRARSocYozkxcamZg8zSszsIXY5WghKppEK2Z6y7Tt6squjnlABEbc4WutMewjjKTCAxgR5uxXoso2dC8MIBoFuNhKy8cvgVlEXkGwnSm9NIH0v01Vkh/ltDl4pTpw4odvx48cdS7wieqSbdlsMU8WroPzL9a4c5Vjl6g3JNTpQQrS4lVWclg0JecBnclM5MjgKWFE6AUC715pY%2brbeB9TBknqNPHbsGKA7kuJcFC%2bHXgKdl6z95ZdfupIWj9s64hS4Kyny2KFDhzABBQiTy9EI2yjjW0F8JTiexGX6xcHSjBXbUYCJV/v0Nj4sVEHAFk1q1ojlRyWFErwViOPvv/8eFMcpJoTAqgBBA2XZAT0/HyZrsw2bpYvFu5GZ0xY9AUpvXXEDoKS8gJ62BA0TxpC4vSkByzO2qPXiE4zl3eiaokFPTKctUrL%2bpeUfn%2bOrhMhJo0gl3jHS5SWG3PjAWG7j9Ax//WtSQqCiB2ghL/kiVrUHAiVkJEhnQSa6on4h%2bbxsuliDc4ObW33AzUm%2bOafW0pJ%2bNYlJDInPNnFreLgoGAaBiov%2b3wSM35gU2rBYxSCOL1MV0bB3RZ%2bQjSGVPJASiPabEagkoYoeqBQDtyBAoFQRCoYvMyn2MkIHhdZ5htBd48ObipiOFmIQBvHZI4aYWuCmfSwMjacaZSqdTSIvH06KDpZgQQNlC92MElGyze6k6KAzVGB4JCmZp8yIaRb647tnQi4Gn0xK7MoQW6Ds/sQJdUpjMHcRwQjoA2KaWCEOTMqJ8iHq0ccjBIw6WV7ie6P2mNM1vh%2bmMCwXnynNALr%2brn98Wkx/1br%2b29ad%2bRZ7Bz/uVvkTXVESX5X%2bbmyMlkLKE%2bLlf9Eef/GoYkulv0pTFf3v5JVWrHRbYz9w1Igh78IvNPHhX%2bzv278/Oyfn1OnT5/PyysSdnX36zBmHXrtJlh342LF4StM5RJybKxKPZGVpUf/zP9X8WQLCzSvPDG86s2bZrefOm6cya/bs%2bQsXrli5cvKUKf5mz5mzbv167RMnTVKfNn36uPHjXecvWJAmk7v5G5msfP0kUlgYv5SVxL5GtUkIRIpLFVySbIKVpHxXf%2bRLQBTfRNalN1TSUaX//K/EPwT%2bAn//BWWrqERYgq0cAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"2560\" alt=\"merge3\" data-srcset=\"/assets/static/merge-3.82a2fbd.5190b0b2de00bf6d734f055a225e3ec9.png 480w, /assets/static/merge-3.cbab2cf.5190b0b2de00bf6d734f055a225e3ec9.png 1024w, /assets/static/merge-3.2665e34.5190b0b2de00bf6d734f055a225e3ec9.png 1920w, /assets/static/merge-3.42db587.5190b0b2de00bf6d734f055a225e3ec9.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/merge-3.42db587.5190b0b2de00bf6d734f055a225e3ec9.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-3.42db587.5190b0b2de00bf6d734f055a225e3ec9.png\" width=\"2560\" alt=\"merge3\"></noscript></p>\n<p>Here's the problem - when some miner creates a new state transition (new block), it has to use some state as a base to work with, some state that has been already proven by the network to be valid. (e.g. one that says that the author of the article owns all BTCs). And if you have not a chain, but DAG (directed acyclic graph), you have several possible base states to work with. Let us have 4 validators proposed 4 blocks with the following transactions:</p>\n<p><code>tx1: Alice bought a toy train</code><br/>\n<code>tx2: Bob bought a ticket to the cinema</code><br/>\n<code>tx3: Carol bought the same toy train that Alice did</code><br/>\n<code>tx4: Dave moved all his funds to DeFi contract with open exploit</code></p>\n<p>Ok, so miner A sees all these transitions and tries to create a new state transition, willing to have all these 4 changes included into the final state which it will offer to peers for verification.\nHere the question arises - how miner A can be sure that tx1 tx2 tx3 and tx4 do not call a double spend (and here tx1 and tx3 actually call a double spend)? RChain stands on a point that if you don't have a computational model that has an intrinsic concurrency model - you cannot detect that double spend. Of course, one is able to create some extensions over the smart contracting language to track some special cases, e.g. have some very strict model for token transfers and check if token transfers do not interfere. But - this is a not scalable solution and quite fast stack up limitations. Also, it's an error prone because no one guarantees that this will be a secure solution.</p>\n<p><strong><em><div style=\"font-size:larger; text-align:center\">And here is what block merge does in RChain.</div></em></strong> Thanks to <a href=\"https://en.wikipedia.org/wiki/Rho_calculus\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rho-calculus</a> as the foundation for computing language (Rholang) - conflict detection is provided straight out of the box. So miner A easily can detect which state transitions cannot be combined and disqualify such, so mark <code>tx3</code> as conflicting and removed from the state it is about to create. Then Carol can check the on-chain state and see that her transaction has been rejected and she has to resubmit it. Worth mentioning, that this conflict resolution happens not on block level - but on user deploys level. To understand this more deeply, let's take a look how RChain represents the state of a virtual machine.</p>\n<p>All computations in Rholang are expressed as sends and receives on some channel, as it is a process calculi language. So, roughly speaking, all that is stored - is data pieces that are available on a channel, and continuations that are available on a channel (this is basically code that waits to be executed once data comes in). If at some point data and continuation match - comm event happens, which is a basic compute event. All this beauty is stored in a RSpace - a flavour of <a href=\"https://en.wikipedia.org/wiki/Tuple_space\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gelernter’s tuple space</a>, which is a storage unit. As a side note, the outcome of this storage model is that RChain offers <strong><em><span style=\"font-size:larger\">transactional data storage</span></em></strong>.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1920' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-7df55c6bbe1292b317dcb0aacfe99fe9'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-7df55c6bbe1292b317dcb0aacfe99fe9)' width='2560' height='1920' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAwCAIAAAAuKetIAAAACXBIWXMAAAsSAAALEgHS3X78AAAIKklEQVRo3u1a23MT1x32v0IsWTd0Xa3ul9VetHfJulmSAZtroBSmT5S8kSlkmpnizEDcUnsmJhNoIOGFmUDDY8lDmOalIdM8mqsvwXbAsp2aYMvut7tYY0ja2lNJhpn8OCxHZy/nfL/fd77zO7t0rKyuvtal4xcAL5f6ysprDMCwlTUMAPMcj35sBbaOJjoeQ1/44YcbN26MjY2hvrS83MDz7Nmzl7C9cgCW63WM7/DhwydOnBgeHh54773Ln3wyNTNz%2b/bt0dHRo0ePLi8v/%2bPrrx89erTa1FA0OQIfXbhw4u23r1%2b//tvjxwcHBy9dvrxv//4/nD596NChkfPnf33kyPG33vrX4mITMXQ0kf3PlpYw6L9%2b/vnuPXtODwwMDQ2dPHly7969OJ45e/Z3p04BwKl33qnNzb2KAIwI/O3mzd%2b/%2b%2b6Xt27duXv30ytXrl69%2bsHIyM0vvvjs2rV/fvvtxYsX//7VV1tDofZbMwHU6/X5hQWUufl5FK1i1PXG%2bbV6bX7%2byWwNZXZuTqvXarO12uMnaEBlDo1PZmdx1B%2byoJWFBaMCUhllbq0LlA1GqWMjxJh5/LhUKrEMIwiCJEs8nxZEQZRE/OTxR%2bBFzQRZliVZFni0aSbopqiqJInaLbhXkvSjdrF%2bCW7UniHLyvN7BV47imKxVALyjZBtQwAmJycZTkilpViS9ngJTswk6XQklkykOJoTKUaIxql4knG63A7Hdjots6JKaxczOOsjSDIU4UQ1mkj5g%2bEEzRGBUCROcYLK8DJqKVzjDxBk0Ga3o46HEP6g309OTU81D8B334mymi1VRSVHBEil0kMrIiWl5Z6iWi3zuWycZ4RCjgwGMVomLaY4npNUVpCTGC5JBsORZIqjGC4UiXKCEtVGL6MISjYtqWgh/GQ4Gvf6fILSHQiGIrFENBqbnpluGoCpqalgMNDZ%2bUaX2USQASHTzcmqWizTvICKkM35Q0FWUrpLvUxaYnhJyhR4OavVOTFb6vV4vRilnC2wgsLycjgWByZExkf4MVgcbVarw253OBxWq8Vut1ksFpIkZ77/vmkAHk1NRSIRm82GPtAfRpNIsfBuGARg%2bHiS9nqJRJpN5zMhOs5kZblclHoKUY6K8TQjSR6Pl0Jc1By8m2J5xIEMhryE3%2bsj4G54xHgybLtuVqu1%2bQDC4TCei6fb7XarpcvS1QU/wee8nNE4QAZylZ09ffukXCGWTPkDARSQJ1/ZJajdoJOg5nwYbjgCqgCG1QJPw9c2FMP3DWs5AJjT6cQRnQXD0QRF44iZB%2bYgGilWiCVSoAdBkE6nC9SPxJOBYBjhQujAdT8ZQAWDd%2bhP%2bKm1A4AxeofWE8KgRQN07y72Yg6kpUymUIH4iGq%2bUO2XskU0giomU6fDAXdDaWz2F12%2bZQAQCbfHa5AKPo7GkyBPLEFBQ%2bBjSCXUJsUJdBrK6HJs2FoOQO/DAV86XU5OVIxebZpZICYoMJ3eetViwV/Hf3V5WwGgA7fb4/Z4XG4PKA5uNKRjnTnX/nUaR8dmrLUA4NZQNI5pCsaAP7qY2Awzuje0RTeroe76Ka31FYmA3ePDwh%2bEmLhcLo%2bPgDj6ySA4j4DA24gJ4YcF0Aq5dLndUFioFq5ybWwmtBYAPIlFtGfHnkr/AehjobdfyfVAggqVXVhfvQRR7tsPFaIYvlDpU3NlgM0WqwCMhczldGlx%2bF/zoR0qhJUV0wAUikQT4UgMEgTFgfgga4vFKaMlTtGhaEzPayicB1pUcaPH63slZBR1sCVTrmSrVU5R1HJlx5u/KvXvSYlCttrLiFoap%2bbLPTv3ISmC%2b3PlnRSbBt%2b0ZRi6tOUAtJXU6YyzdIxJJTiWEtIxlolzWuEyaoyisCZgGmAxYNMSYoKfWBWSNKtPEhLp3X%2bKQ9sA2MCHYrUfKy4cjOUWLgdJUHp3H0SSzCvdyNuQauw%2b%2bBssz8il5e4i6IQZryVwfrIhXFsFwI5pEI0lIamYCaFwDBWkpZFoMhLBxIg/X5iTKazRqGNKYK4jCcUSDUWCmm3f2lwI8g4aSMUCCiXwarnc%2b%2bbBQl8/JfKZ3mqCYRMUI2bykCnsUYAHWqTkSgENQBCqajZ1dnWZjZx0C7JRIwLIcDD0OMvgmBJFVlEwJTAH%2bGyGkxSKTiMmYDx2DAYGmhWw/AEA9jTgG/aTSGWxTdB0aR2d2pEL2XWDjObLfZJaAHMgONivJJIMuJSgWGNK8Eo2xaYxE8q79mOkgAEMoFPfgSO5nh3dpR3YJWNjre3I2gYAPWEKwnOGFGKHaQET9KRaz9u0C1Axm022tUxO%2b2nq1C7BNVbtGqTf1i4wyISqnmC3hUJrW0qsxCFIDYIOKrucPzF9u/PyGZfrhZNrrY3GFzJBpxMdBQKBZgKYmJwUlay5y2LCxgT2xjZTy8xsNm/bts3tdk/PzDQNwPTM9L4DB0X9jZSkm9gyw8N5ns/n8815sdWAMQur1RrvAFtdmvZqcT2GNpcmv51ertfbXH75zLqZL6rPg74u%2bhviwybZ0mQAWpTXjaDxWfJnP4j8LHjju%2bBq%2byNgdHz7m2%2bOHTs2PDw8ODj40YULZ99///yHH166dOnPQ0Pnzp377Nq1v3z88cDAwAcjI59euQIFa2iiIc137907c%2bbM4B//NDQ0tME1q5kRgC0uLt67f//Bw4eTk5Nj4%2bNf3rqF9e7h2Nj4xMTYxMT4%2bPjo6CguuP/gAepLS0urL97%2b9McfcT3Ojt65s/j06eoWzIGVlf/zg9dmP4e1RIVemsebokG9Gf//4LWX0X8DbrJZMqwv6cEAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"2560\" alt=\"merge4\" data-srcset=\"/assets/static/merge-4.82a2fbd.12c6434f447645739e74a6ec38f6a09b.png 480w, /assets/static/merge-4.cbab2cf.12c6434f447645739e74a6ec38f6a09b.png 1024w, /assets/static/merge-4.2665e34.12c6434f447645739e74a6ec38f6a09b.png 1920w, /assets/static/merge-4.42db587.12c6434f447645739e74a6ec38f6a09b.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/merge-4.42db587.12c6434f447645739e74a6ec38f6a09b.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-4.42db587.12c6434f447645739e74a6ec38f6a09b.png\" width=\"2560\" alt=\"merge4\"></noscript></p>\n<p>There is one basic constraint on a RSpace - if one looks at it, there should not be any possible comm events at any time. When some state transition happens, if any comm occurs - all continuations are invoked till the point when RSpace does not have any more potential comm's left. That's why, if miner A sees <code>tx1</code>, <code>tx2</code>, <code>tx3</code> and <code>tx4</code>, the logic of conflict detection simply boils down to checking if changes produced by these transactions, added to RSpace, lead to potential comm events. If no - changes made by these tx’s can be put into RSpace without any code execution. And, which is important - this conflict resolution is built-in on a computational model level. So it is available for all user code ever going to be written, and - with mathematical proof of correctness.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1920' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-5a34d299e9b8e7ea81df760537fcffc5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-5a34d299e9b8e7ea81df760537fcffc5)' width='2560' height='1920' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAwCAIAAAAuKetIAAAACXBIWXMAAAsSAAALEgHS3X78AAAHJElEQVRo3u1aW1NTVxRO29f%2bhP4h33x0nKlofSkCIlNnLBRQaaU4U3Sc0TJYwk0cropCGiAYkSQQlEC4hNyABHIjIYTcCCHJydn9cjYcUyNpwCTC2D17zuyss29rr9u39omAJeRUV8GXxUCcZVFzuqGjzn80BmhJXiZ5vTTt1Fc88YOf/BLZZCDOTRqLxcbGxuYXFhILvF9rf7337aRX7AevUn7yQ%2bioGMPIZLKNjQ2SsSgyYoCJJ1ior6//va6urKzs3fS0cXl52WjcDYfRRhNvtzwen8/n3trC0%2bvz6Q0Gk9kMeiQW0%2bp0C4uLs2r1htMZCoWmVapoNGowJubQarWqmZm9SESztIQZxGLxz%2bXlxSUl4CRDHgSZKCXm2vZ6CwoKGIaJYDGNpqampvTatd/u3Kmqri4tLUUPxcTEndrakpKS%2bnv3qqurb9y4UVhYuOl2Y5dFRUUlV69WVFRU37xZV1dXdOUKDqLg4sXa2to/6usrq6rKKyrKy8t/LCxcNZmkUineZlkCVNbXyspeSaWNjY23b9/%2bpbLyh8uXL166JJfLq6qq1i0WdDhz5kxxcfH58%2bebW1qwP/RxulxQufv37zc%2bfjw8NISB31%2b4gB3funXrwYMHw8PDQqHwSUfHuXPnrpaW4uwtFktDQ4PNZssyA1QIDoej7u7dzq4ubLe1ra3j6dNBkQhaAS0KBIPogMObm5%2bHnUBQ3d3dIxIJiK7NTfCwqNGYTCZoEdQJ7EF7ZtRqsPfT9etnz56Vvn4tHhoSiUToP6lUBrnZcuiFUs2XGjqbdGapVptqvjAh0d%2bJApNINmWWsDlxo5ADbAuVb8C40caTdohEo7SCwjeisRgaeKI/fdKBdBTPT4LOURJz7q/I5jsSZ1hST%2bRfwolH2JCdjfgznESQxQgqk8tnZmeh8Ta7HVoOpV9bX9fp9VBrNCxWq3l9Ha9IWuajTnVAPxqzTbKxnRTVyyUDOMjBwUFhc3NDYyPM9/XYWEdHR9%2bzZ/Az7U%2bePH/%2bHOoOY33x8iX18R%2bP8fEo45peGu8Nr46x4c28MsAeEpjTrP3BWIAJPC3GmZBZxvqW2bTT5AqN7jvvZDSR1E6LBbH9RE%2bdHgF%2b78AXsclsHPxkc8UADRdw/B6PB8FhSau12mwI4bAKvV4Pr5/Ou3NjA4GA3%2b9LxVp5kgBlYHllBVijv7//r6am3t5ehLaHjx792dAwMDh4WHxNwLh41Bt2211WhrOQhDUzke2wezca4rUyyuxt77rDsV2S04QGBZvAecPtQBoAbZ7tbQTvCI1Whwwxe5Yn9LJFu3p/fyy74taDonHMRWJhjnPG4NKConUugFuSOxvA1H6/XyKR6I1GONbunp434%2bNwpsGdncMkAKJxc2loSqQyTwUjCRVi4ozOuTCkFKkt06FIkIpI41CLlaJ520yYE0uci3SCT98xDcZ8fKWVHIBwWpI7JDf4JCaw5zd5jM6AjR/i3/WuegybAQdP8Ya2QHHvOLOsQulLnM3IG6ZxwWyOjJjuDGgUuQsCMLQF0Re6vrK6CgowKbCneW0NKQ4oGq0W8Rj2gA5wUMhpkO7ATfkDgX33SvZrUhr435QsMIANTUxOTr19297e3tfX9/bdO2h/V3c3wHZvXx%2bQM171v3iBSPxyYADAEybRJBT29PYibKONDIYcPZFnc6pCyA9R41yh%2bJgmmR/Vpc9/L5RsxBTkILsFFkLkUk5NQT7IKpF5ARep5%2bZo2p5qxCeCAX5DaCBTgRDCe3t8DgDKTij0UZf1mRk4amGzrUXHZCB%2b4OzhW%2bBtOjs7gZPlCgX8z7hMBiyNCkWSyWQwVqVSOTIyApOVjI7C8yR%2bSiSKiQnADQyhUeLYuiQ49sHTEGQwGOBJ4EYRbvGEx8Se4CUB4MDYK6kUlgA6PBUYk8vlZrNZrVajD95S5vmp8scATgsn7djYAOABQADIgYoDLMBeA8EgXLvVagUQQlgAFPX5/cBCiAZerxdBA29BxEA8Ue0OByrGImIcTwjHlABOFF5lUaMB9sQOUJBw4YzhdnDekIBOp4OevJEpVDOzKpUK/bFLsVgMyUAmSM0UCgV%2bQpGgbJNTUxAjjJ7kU4WSUTuvVMyB788QESTnPfk24tRLZhqqEncNnG%2bcdserZtlRR6IdjbO0w2H1ZH3giHGn3aAjgnukUEnzlVPyhYYC6LUgWdgmlWoiaCQX5GTJR3Q%2bDpmefAboHdVKgHzXQwSt5Ot28lUb%2bbaDKLgrEoY9Dd/IKA8DVvJ1C/mmnQiE5JGB0yL2NKjQ/iUpp0m/zhPBQ3J5Ioe7z%2bFXSoZlgzG2Zp64wgkXGYuzp4kBmg/wKeWnIIW8eyFur01NTcjIhM3NLW1tAECtra2dXV2AG5%2bYfOVJAvRyzm63m9bWAH4AloAvAC7S3AudOBXK/E731PzVIHff97%2bw/0r8z0D26z9VCZdey/46PAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"2560\" alt=\"merge5\" data-srcset=\"/assets/static/merge-5.82a2fbd.977fab8a8fbd087f23e34d873be0d7bd.png 480w, /assets/static/merge-5.cbab2cf.977fab8a8fbd087f23e34d873be0d7bd.png 1024w, /assets/static/merge-5.2665e34.977fab8a8fbd087f23e34d873be0d7bd.png 1920w, /assets/static/merge-5.42db587.977fab8a8fbd087f23e34d873be0d7bd.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/merge-5.42db587.977fab8a8fbd087f23e34d873be0d7bd.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-5.42db587.977fab8a8fbd087f23e34d873be0d7bd.png\" width=\"2560\" alt=\"merge5\"></noscript></p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1920' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6b9114f64d67861a11b3763f924a441f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6b9114f64d67861a11b3763f924a441f)' width='2560' height='1920' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAwCAIAAAAuKetIAAAACXBIWXMAAAsSAAALEgHS3X78AAAHt0lEQVRo3u1a61NT1xb3z7n/it%2b83xxnWu3tl1JFZG5nLFSoOpXS2yK%2bOiqKT2yroHauBCJvkkCQhCQkISEvHnk/yZvk7PPq7%2bTAIZIiCSS53mnP7Dmzs/faa%2b2113ufHOF4/v%2b6HflrMcByHFpNN1Qp/soYEJ9iMsX0PtAvnZIGd/2USFSTAbaAlKbpycnJRaNRILBDa4veTr9oits1VfJTWiKuohlGoVAEAgG%2bbFGUxQDDCix0dXV939nZ3Nw8Pz9vdzgcdvtmLjev0aCL2WgslkgkItEo3vFEYtlmW1ldxThF0xar1Wgy6fT6QDCYzWY1Wi0hxGYXcFgsFu3CQp6izEtLwDA0NPR1S8uZxkZwUiYPR8pRSuDaiMdPnjzJMAwFYmbz5cuXm86d%2b%2b7Klbb29qamJkCoZmaudHQ0NjZ2Xb3a3t5%2b/vz5hoaGcCSCXZ4%2bfbrx7NnW1tb2b7/t7Ow8/eWXOIiTp051dHT81NV1oa2tpbW1paXli4YG18rK%2bPg4ZqssAVHW55qbx8bH7969e%2bnSpW8uXPjX55%2bf%2buwzpVLZ1ta27nYD4OjRo2fOnDlx4sSDhw%2bxP8AEQyGoXHd3992eHvnwMBZ%2b8umn2PHFixevX78ul8t7e3uf9vUdP378bFMTzt7tdt%2b%2bfdvr9VaZAVEIfr%2b/84cffv3tN2z30ePHfc%2bevRkchFZAi1LpNABweIbFRdgJBPX8%2bfO3IyMYDIXD4MFkNq%2bsrECLoE5gD9qzoNeDvX9/9dWxY8fGJyaGhocHBwcBP6tWpwvYauiFSs1XNHSu6MxKrbbUfGFCgzLhgUkUmzLHczVxo5ADbAtN6sC40cdbsnWxcQV/InZEAAkSTZwSZyV%2bBISFEQFyiyL3sUdi6SDeEw5DcRkfR6X%2bVOB8SaD4WFIJ6SEhQ9I6SjwzPJPldqveR88AB/0Kay2KgYxrKh0VwkhB9bi6MiDquvgWDUaygQ8zgGQCb49Dl12dtmuGDAZ9Pp8vje41Z6Acxf2zhu0LDFiXhQDvWl1DxET0jEajTCEqc1tOaotITRgQwwU8PaIBYjBSA6fTiU2gj7QC2/oQD4W1qVQKmYhgCYTEojF0crl8KBRCAlIPCYgMIKu52t0tGxpCIEMARuYz8PLljZs3F3S6veJrIY0j8VzUG/TAKxWOmY/EwqGUn2LzWBGLxTZiG3mS29iM5OjN/40KMQV3udeStQ3n7LLC6NPn6KyoMK6ofWZZYfbp87Qgukw2Y/LoZ%2b1KS8BIWMLX1IilYy43I%2bA4R8Qqn5NpVubSeUGFGJaxBk1D6kH9uiZLpQojtNlvwIjRq8sRgUm2EOmO1M4tIkn2eL0UIfw%2bxYYAns4nXTFbIOmVJJbMxV1RG7RIGtnIRp0xWzgTrHkcEI1hbX39%2bo0b6UymnNSy1DrLGamAAdGRFzcp8yn%2bKfXF9AZCkNYWv4UmPsWouK03u%2b0vWcG3csWy2jVSWT3wYR9fzsOVMVL9mhhPdnMT2pxIJpH9%2b3w%2bOHgUjT6/3%2b3xoKFOED29PxDAT7vTCZh4PB6JxTCChU6XC9EAU1iFnxjEWhQD0DGvz4cOplbX1oAE%2bDGLBop8VRgQtRklUs%2b9eyhcXr561dPTA7%2bOsvjxk63nRX9//8DA7Tt3nr94cb%2b39979%2b0%2bfPFGqVCh9Hj561PvgAd6jY2OA0RsMz375BahQ0/znxx9Ri00rFAC4du3arVu3MIVwgdDR19e3ZLEUPA9bzZKyiiqUy%2bVE7yS6fLEPi9gZrHpBs8uCK2qlDkAsvYozvK3BYpiaXy1W74puqxzdL2OtTUVWhpruj%2bEQZ3FwBthslqVpXpJGpZxINbyILZ1i3Kv1YqBAmF5xUKpJ2mIE7Z20Z9/jLGJVMFxCMatOopml5qYZn7vu1%2buE0GsuopkhWjW9vsox2wLhSwTy/r7RZ/weYtAQ9TRtt7DJRJ1U6L3EYfviRFCAVJKymjZVU9TiAhOL0hwHVogAzwGI5oS%2bMAJHGQrSZgOlmqCMOjoSYgsWzIpergghV7%2bLraJzFfKUmI83zfM6Jb9u4dlc0SVWjHcZeb2Ct2jYoI9jWf7QSUTFcQDYEfMHZbLJycnxiQm8R0dHVSpVKBzGlC3OXLXw/1Tx/5Dx3y/keqbdP/%2bqnnqjMIyp%2b/uVN18v3lH6b5rIa5%2bAx%2b5wYK3D4VCr1chBkEGgEH31%2bvXIyEj5ScRBGDCbzaCBOC9/%2b/a/b94MDw%2bj6gV5TAWzzHiA/8nGN2i54TXyzuRRjGltv8t8crn2lVypXp7zbKo2eFNawBPw%2b2UymXV5eXJqyuF0IilC%2bgScAwMDtWJgTxXiilQIeh5x80vveK2Cd5n5bHK7miR8aJ3XzfCGWd7j5Chqr8sSvg5GLN5sEppGo1nhKkdI66MhmG9WrcyajZvhMOE4WC3hhI86jAAm1LBoVCqVt5rJnALAVCjAFC5MmEK5jBqSbF8z1suN4vATG3Ap2BBt0jPhIPzITnDdFRDEke2FTCREL2rJOyVtW2Kzmfp%2bZhW/yWXSIE8MWrhzjlC7gut%2bAXjb%2bVJ5GlFsfobo3tHe9YMlFAeUAGiDhwr2vXcqIWBLxIllUYzoFX0cOHQ2evhM7tBIPpov9QdNSP9ifzX4m4G/GShpfwD9UrOSKdo9bAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"2560\" alt=\"merge6\" data-srcset=\"/assets/static/merge-6.82a2fbd.c1fccd0e33d0f28035316703fea6ae20.png 480w, /assets/static/merge-6.cbab2cf.c1fccd0e33d0f28035316703fea6ae20.png 1024w, /assets/static/merge-6.2665e34.c1fccd0e33d0f28035316703fea6ae20.png 1920w, /assets/static/merge-6.42db587.c1fccd0e33d0f28035316703fea6ae20.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/merge-6.42db587.c1fccd0e33d0f28035316703fea6ae20.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-6.42db587.c1fccd0e33d0f28035316703fea6ae20.png\" width=\"2560\" alt=\"merge6\"></noscript></p>\n<p><strong><em><div style=\"font-size:larger; text-align:center\">Now, having this knowledge, let's talk about how this brings scalability.</div></em></strong>\nGeneral understanding in blockchain space is that if you add more nodes to the network - you inevitably lower down the throughput, decentralization is not free.\nThis sounds reasonable, overhead on routing and data replication increases. But, if miners are allowed to change state in parallel, and there is a way to validate and compose these changes in an efficient way - we might reconsider this statement. So, we have two pieces that have to be enabled to make this happen: efficient validation, and efficient merging of state changes. The latter includes conflict detection and actual technical merging of changes.</p>\n<p>The great thing about RChain - validation for all state transitions can happen concurrently. RSpace is an immutable structure, it is never changed, data is only added. So, when miner A receives several blocks from miners B, C, D - all these state transitions can be validated in parallel (even if they are conflicting). In extreme cases - time spent on validation of 100 blocks should be the same as for a single block. But this is a matter of optimization, proper engineering and resources available. At the moment of writing the article this is still work in progress.</p>\n<p>Conflict detection can be done with several degrees of efficiency, trading number of conflicts for performance. The most performant way is to not analyze the content of the channel but just detect if the same channel used with different polarities in two state transitions - on one data is being put into channel, in another continuation is being put into the same channel. In general case, this should not be a common thing, because of how channels are constructed using unforgeable names (which btw enables other awesome things like <a href=\"https://en.wikipedia.org/wiki/Object-capability_model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">object capability security discipline</a>. So it is sufficient for many (if not the most) use cases. In this case conflict detection boils down to the operation of finding the intersection of two sets. This is quite a simplistic explanation, but for one's wanting to get a more in-depth picture, feel free to join Discord and ask questions.</p>\n<p>And, the last part is the merging of state changes. This operation requires data that is inside quite a narrow scope till the last finalized block, which allows aggressive caching. But even without it, it's just reading from and writing to the database.</p>\n<p>To sum up everything being said, this article briefly explained what is <code>block merge</code> and how it is related to scalability.\nAs said in the beginning of the article, some preliminary results can be found in this <a href=\"https://gist.github.com/nzpr/2465db5210c817324ab7ab4f01e23f38\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gist</a>.\nThe DAG below is being built, with synchrony constraint set to upper bound, so validator have to wait for all others before creating block.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1920' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6547a94f690dad080f9d6fd1d6d632e2'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6547a94f690dad080f9d6fd1d6d632e2)' width='2560' height='1920' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAwCAIAAAAuKetIAAAACXBIWXMAAAsSAAALEgHS3X78AAAKy0lEQVRo3u3a6VNWVxIGcP9Hv2nVmMloPjjRGj%2b4ZKJmYmmYuGspsazRMpY77vsuaHAHRcBxQQUVkEVAUDZZ5vfeHm69edncMlZqcoq6de65557up/vpPn3uy4SBwcHf9d%2bE/3cA/QMDOZ3fE4BoOWBGRJI%2bGt75bAC0nt7es%2bfOVT161N7R0fH69WCiUAZSqDUwkCIc/DXg/3ayJ/%2bPAbzt6yN7/oIFc%2bbOXZ%2bfv2z58nXr1jU2NfX29hYWFdXW1b18%2bbK1ra2lNdMaGhsvFBbqP6muLikt9W5FZeXDqiqdmzdvmjD4Ea74QAB9/f2kHjp8eOHChQUFBStWroRkwYIFS5cuhWTRokWLFy9e8sMPM2fOXL169fz58zds2HD69Ol/bdr0l6lT169fP3ny5J82bFi3fv1fv/76H99/P/gRUTThg2OX1I0bNx4/cWLq1KlTvviiuLh48ZIlf/7yy1%2bKi/Py8latXj1x4sRJkyYtW7bsu%2b%2b%2bu3zlyvYdO%2bZ98820adP%2b/u23y1esmPbVV3%2baMmXuvHn//PHH8OdnAIAPxJ8%2bc%2bZOeXl1Tc2tsjLxsGLFiitXrrS2tJw/f/7atWtPnz7FFtNulpTsP3Bgy88/w7x3374jR45g1ObNm8srKgYTl362LJQTmoOjzxkc6ZXPl0YHBpit9%2b1bBNDpT25jJG7TcRf9zIS%2bvhjsi%2bvQ5E8JIASn2sTf2yF58SieRmdE4o5o7BT2wBi3Ywy%2buwcinvqTPDMaSdKYC/pGP7zhz/7Q3dOT/n2kjccBMJgIfj20DXV3d0vbNU%2bfPn/%2bvK6urrKy8s6dO6WlpefOnbtYVHTjxo1fknb16tWTJ08aFKb60vndu3ev37hRUVHx7Nmz2trauvp6CV4Ev2pvt36AfdPZ2dLSkm0OO%2bCrV68Gs3a9jqyRGGxvb3/z5k06x1bzOrkNq2UA9PT0eK2tra2srOz27dt/S5r091N%2bviyxe/duGWNvQYFEfuvWrXv37tHP5OrqartVtk%2bam5rgzx5pbGwMT6aq1NfXZ2QnTQeepqamsUdIIS6zSHJLRCDMAtDba2n%2bNw%2bSx48fHzx4cP/%2b/Qx85syZEydOFBYWHjhw4PDhw5K9/sWLFy9dunT8%2bPHLly/DzEUPHz589OhRSUkJk1uE7S3Iq5bq7OzsSxpBRpqbm7PrCKrETpza20h4KR2J1dJXAIjbXwHI8Rob0MMVelJd/z3UKFpeXq6DPBcuXMAfvHLlnLNnz546dQpswEA1CCS0HiEhnF4xjpb379%2bHGdl0cI9LyQpF8bampqYzaW6p25g0zNF3zYx3dIwMIExlvKGhAe0wu6ioiI2ZhOWseydpxi394sWLqqoq2mMdjc1BKk4I/9CeNzw6lbRjx47R3lLg4SRgQkgsmamzY8cOrj506JBbUI0cPXrUCpwfJrOmyWGFsOn4HqBfT9Ko7pbVKysqmYrlmJDZwtKi1pUApqVoBPTVpDG8OSBFaDE28W6lB1AjkBjlyZMnpLNIV1cXGjN2xMkYFHo1nELhLFb08s6dOxmJGTBE%2bDIe22zdulUYIElknshLzP/gwQNEr00akJTL1KGtrRzNh/Tj9FS2AKNfDuPHjQG348dAhBe1mFa1OGvWLOXkmjVrlGvbt2/nXz5l5nAoLelBdUp3J43lIl3w2BhZiJTIMOkI7SOVpTnHSMwZGNqL0izUP5SFxg9i4cWzoFMR0ZkWPcBQpTE8BivUOERHUsJO465AIjG2oApqueIVtBaxILV04A8NXCkEoXgb2wORG98pC6VmsKhJVEHf%2bmRLIp5sI1RBDDIgBOxGsnlhtuyhA2TkHw214JF8XQ2a42ozwUkjMFvN1aC3rGOCFawZFBVskZc1alQ9rNKpraulasdoQZwCYBhKh/kpygBimorAuLW0jkcgoZyoJZK6ZBN8KWlGPIr4Fjn0vn79urDmKN4TXfRGyLLbZUYiHXvX4mLdzNhbTMAfegNGXIQ%2by3aMlkY1bPb4SdJYnb1tvSyBHixHEi5RiFQ7nZHioWZExJMtR0FCJA3YlXhoBRgm6IsccSLhROQYzyHMB1IogpiFuHXOnDkzZswQxKtWrcrPz9%2b2bRtFKcfdUOFPXXLkpV/sL2%2bHSh2SPiCIYyTdrdOR/qTqftcgNkQVGLzPSIgblQJjI2jsPgbxIVPVXbyINlwRNEi3VUyFkLyWpFnTLaVThAyZE7I0G27vyEvvl0ZzshDLRQrSgUoAINLtpOkgaPDbPu2K7lE78JIRndiM0Qna60njvahqTbYCzOInYkyLvdLV1kGixIVjHUmjD02YlX09pX2UGGOVEjxFY5ZjZqrgdNRFYgi5GZv2aU40wvBmmsO6OoKBxqC6FQM2QSPhNBSVdvfu3RulBDwxYcuWLW4FOpxGPFVEmA8/tBgRmya5bt%2b1lDAvQEMPD6oETyJGLRSpRny7EuxKFR7Q8YjGOugHCVWIj5wr20SqiZRiHemLRcPMOg1JY0ei3erEuA63UMl15BgQf1bhwX379kXhwCQsEcmH2cRAUdJYMczDtICxEFfIMLBFKRG1tCsteVwMRPwND%2bJPFgOxNAtRYunSpUqJvLy8tWvXykJKCeR2QmBUlmMwWQhfcRfazDk9qSNCUnYWsr410%2b%2bHo2WhOCFklxLpSGQhy753KRFFIv3YlZfZm/l5I3YlTtDZs2cPssYOEJzhKzMryjNFBKgQIgyfBCFpZlmDA8nBNc5uw%2b094j4QpH%2bPUoLqJsVpCw3QjhhUCZKgjQkQmpCeVEyzecVJQFKCSszFmSZ2YjPNN8GeaDMWNlYTQggpgnWAF2aQRyhztRXI5XDvkh5b0Fg7cXYaNSKYvEZRNhDHBmNjJsNTAnSAEaYAeBQAQnsd4nWEStQOUQvF%2bcagCTSma5QeNI7qiDn0QQXPssEFS8HGe25f2ZhHy0KRSUW6eVSHnr29STMmjJNAnKE0sY4zEdaxFcQxihJx5iTVZCR8kbTAz1GcLLIxgQKxA3yaUoK6UcPMnj17%2bvTpS5YsWbly5aZNm5xvcEAcA8AqgPEjQkcQQ5tWAcPPA5Qbt5QYHrI5xUVaSsTtqKUE2bEBsxx1Kc3jAldfSo1cZDA9yMcuGzkUnaJmdLVI2Iy6biNHBYx3PJF9mlJCCcnvbUmLrxJIzOp0DXpk8xhUkGxbchFUcTLGJUxLme1dzDYNYFwSYDSzGhPA8CZpjBh8y/FSCnIcAGkpQXv2I4%2b9iU9Licg5kGR%2bd2loYHL6AWPELRWj7BEPruZ7lw/5zRUqCwoYnIxiMSbrGDmdtPj0IMp5O75KRNUUOz0pZI11oMkuJVBTX7RFGpZ8RDbP0NKigoGWzBlJgwfoyiexLcRHisihnpYmLWYGMKtZJ3JaZAtWJ5QgHSUGOxKNcr1vezOcbG1j1nFKCWSN1Mk8DiuHkob9BQUFroy0a9eu%2bB4qLcYJmKJlSZOpJDsWipN0xkgdHTSAmU6kRgyQ8gFfJcb/Mtfd00MM2oSPAKCcylEISjhB1vgGQRU0TT8WZH9zzXwbbW7OyULWjNSRngeC39lfQiMLZaubMxIWGfW7UPwmwAmdXV2u8dtRfDHPVqU3%2bR0j%2b2N/zE9/9PXnmJjzJZ270x8QYpGupILI/qG2O8E8xojb3iSVpb8vZt9OGP6rRP8Q9JwfDQZ%2bm5Gxfzz/438l/gDwW//9B//g/6uoj0SAAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"2560\" alt=\"merge7\" data-srcset=\"/assets/static/merge-7.82a2fbd.2d6aeb2ef29ae068d6ee00a5f8f56b25.png 480w, /assets/static/merge-7.cbab2cf.2d6aeb2ef29ae068d6ee00a5f8f56b25.png 1024w, /assets/static/merge-7.2665e34.2d6aeb2ef29ae068d6ee00a5f8f56b25.png 1920w, /assets/static/merge-7.42db587.2d6aeb2ef29ae068d6ee00a5f8f56b25.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/merge-7.42db587.2d6aeb2ef29ae068d6ee00a5f8f56b25.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/merge-7.42db587.2d6aeb2ef29ae068d6ee00a5f8f56b25.png\" width=\"2560\" alt=\"merge7\"></noscript></p>\n<p>The expected result which should demonstrate linear scalability is that merging time is a linear function of number of nodes and number of blocks created by the network grows linearly with increasing number of nodes.</p>\n<p>As it can be seen, merging of state changes for 20 blocks takes about twice as for 10 blocks. Which gives some high hopes for achieving almost linear scalability for state merging.\n<strong><em><div style=\"font-size:larger; text-align:center\">Please stay tuned for next articles with more data and tests. Thank you for reading this! Come join and ask questions <a href=\"http://discord.gg/NWkQnfH\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://discord.gg/NWkQnfH</a></div> </em></strong></p>\n"}},{"node":{"id":"8f533b37695283efb97cc9e1c21e3796","title":"Greg Meredith joins talks at perm winter school","path":"/blog/2021/02/11/rchain/","date":"11. February 2021","timeToRead":1,"author":[],"excerpt":"Greg Meredith from Rchain is talking on decentralized governance at perm winter school.","content":"<p>Greg Meredith from Rchain will speak about decentralized governance at perm winter school on 25.2.21 from 20:00 - 20:00. Join them if you like <a href=\"https://permwinterschool.ru/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">website</a>.</p>\n<p>Perm Winter School is a community of bright students, forward-looking academicians, and innovative industry practitioners in the area of financial markets and latest financial technologies. Every winter the school's comprehensive program covers the latest empirical researches, theoretical models, and industry best practices. In 2021 Perm Winter Scool will be held online.</p>\n"}},{"node":{"id":"fe8db5d09b310cab8771732caa269492","title":"Rholang is available on Codesandbox.io 💥","path":"/blog/2021/02/10/rholang-codesandbox/","date":"10. February 2021","timeToRead":1,"author":[],"excerpt":"Write your own dapps is now easier than ever. Use Codesandbox.io with the rholang template to evaluate your code in real-time and see the result on the real network.","content":"<h1 id=\"getting-started\"><a href=\"#getting-started\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Getting started</h1>\n<p>To see the dapp tutorial visit <a href=\"https://rchain-community.github.io/dapps/intro-dapps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dapp tutorial</a>.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 845 626' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-fab09b19e6677f845e4f5f8b62de238d'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-fab09b19e6677f845e4f5f8b62de238d)' width='845' height='626' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAvCAYAAABTy8xRAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAH9UlEQVRo3u1aWW8U2RWel0hILAIs9l0iQoJH3nhD8IQQPyX/ZDTS5CFSlMwoi5xRCFEsswiQ5yHyhAloYEC43e3eqqpr6X3f2%2b0z33e6CxrLEGO7uluRSzq6t6qr6t773XO%2bs1R/IZs41tbWtC2VSvL48WOVR48eyZMnT1SePn36rj9u4VwWFhak0%2bl8MNfNHl9s5qbV1VVtFxcX5eTJk3Lr1i25fv26HDlyRPbt2yeHDx%2bWc%2bfOyaFDh2Tv3r2yf//%2bD%2bTAgQOBCcc7evSo5PN5nWO/3w8OgOfPn8vMzIycPXtWzpw5IydOnFDh%2bYULF%2bT8%2bfNy8eJFBYPC65TTp0/vmJw6dUqFfc6B/UuXLkmxWAwegGfPnsmePXve7ezBgwdVLl%2b%2bLHfu3JEbN27I7du35ebNmyq8dvXqVTl27NgHk9%2bq8B3Hjx9XUAn0lStXdPHXrl2TarUanAn4Ly0UCjI3Nyf379%2bX%2bfl5bWn/5IOHDx%2b%2bax88eKDic4Uv/vXtCseljPbb7XZwAHzqxSnLkk63t6H61ep1Gdfha2mgGsCWA/V6Pe3XajX5w%2b9/J3fv3pO5f83Jt9/%2bSb6b/Zvcu/cPWfh%2bQf7817/g/Dv55ps/yuzsrJTKVTzXlx4A4zu2IhzfF54TdKp/t9sNVgM2qxE8fELi0W61pL6DmjA6rt9vNBoKxtgA8AdpdXqysJSWYrkolUpVGvWGVLAbdUgRbqlWq0oTk6tUKoghCtCAEn6vSLk4uL9WrUmlVJYyfq%2bolLWlZnFX67U63lnXPq%2b1mq3hBAZzmDgAjXZXZv8dkXgiISnbEcuy0doSi0QkurIitmVIKmVLNBqTRDyKNiqJZEJWwssSi0X1uXh0RaKx2OA53Jc0DInjfAXPu44rhpGUZDKJ%2b2NiGpZUAYTPNRMHgIN6VkISWIjlOGK7EDsllmmKnXJ00cmEgWu2FBFFliHFYklyuYyUoTWZTBZ9Sk7aiORyuTx%2bL4iDd7meJ/lCXrL4vQQtyaQ9XMtIOpOZHgBIROVyRXL5nDieq4uhCpMDcuksFmJjFx1Je2npf%2bbENjOHiQAwOjB3IpvNao5Al1culzVWoN1v9Fx/%2bCyf81tfRs/9MT4lU6EBnOxyaBn2GhETts42AvvPQ6V3aoenDoDRwQkAB2Ymxkis3WlLD2bBfrPZUPfXHLrBKkyj1e5Ip91SbWnhOr0EPUcd0sZvtXpN2X7qTUDtH4uvwT2lQHiWmRLDTEoYGpA0TFkBs1uIEONgfRNtMhGXyFJI3HQaxOfBG6zo/QbIM7wcAsPHwfQmPERcPUOjAffXbCpIFC6QbRPX6hssdmIa0Go1xbHp%2blIQS0nPgikksKA0GN6Cy4ssLasXcFIWfktJGkSZ8egt4NIQGeayOXHhQpMAxANZ5vIF9QoW7k/DE3ggV9My8b40XKqlbrJarU0JB6z2sdMpcdLw1/DVdG8WJuthp234cNclGDFJ49zB4qnq/xdeYOAC%2bxqlJaDeFnaYQY8BMAyoseMAFNdDomRqFLc2wv4ax4%2bwvx/X99dd6087CXKitMkk1JwApExDucDGTmcQrDCCo%2bpnoMYxcoEJE4B9U1McXKOKm7ifZhGJxjVCjMYGLQMrhsef8gZTAQDZPgWbJAcwtCXxua6rvMAIzsJvDqJDL%2b0pN9CeSZBmasAXBqJEMwngUuYADNuF6dj6HgPaQyL8GAhTAQAHtnRHXewedg5SQBKUwDVqQZI5AsxCtQTegloSjUYkDBAYMicZMmOxsXhCuYSgMe5n/hCPw5QA3FS7QUZ8XAiJjuxMm6fqx%2bHSPM/GrhpKhnRzcchKlAkN3B8WHo0M8oQsGN8Aj%2bjzMAcDYMQJKjSHQNjKK4ZqURagEtDupN3gqBZw8hbsu8siR7erZtHpdDGhrhYp2sMgqdUaSBfnDJyY2jL44T2d4bXOu3tbI%2beDWID38Vn2%2b/0JmcB622Nizgn6g0/qCByA0YX7Sc3qsK%2blqXW76Ivu2lDWn%2b%2bE8J0%2bFwVaElsbvFnWv3oVqDMT7HTf5wJd9LtDVebEfPFDWuYFo9e3I8wbmH7THQdbE9TdHkDRb9XlZ9OTu0spHZQJTaVc0fCUqTErQyxoZNCnWvKe3hCoz/1osVn1D1wDekPS%2bfqFITP/dOVX97Iy83cwfb6otb9wKKxJzKtXP8vzFy/l5auXEg6H1e8z4PEQG4RCITC7qzWDKuuHjabu3HaEC2ekGbgGrA4BeBRNy1evMzIfduSHZEY1IpvJaamL6lgsFQc7ggl1YAKsC9C3M2vMQSMyAEsn33jP5Ns5yAHUrOBNgC5vgxfTH7MCFFTR43/lAgSAGhU4AO%2bDnzU1B7b9YVHUB2Cri1jbQq1w7AB8LA7YCIBxHBMDYKOy%2bC4AuwDsArALwC4AuwBsL6iZ%2bkBoMwBM4hhrKPyxQEjTYf/T2FD8LzpBCsfh7jMd5vhjLYisDWsDHJT5vf9/Hb9QMS4zYHrNJMz/rhB8LoC2N/J%2bfgjNZTOyvPRWXr1%2brQVOfgsYJxmOBYAPs8GetKslSaTzrIrqX1a0BNbtDL7y9FY/rTk7SIJjA8CvBzyIZuTO9578et6TU3eT4uaLUsrn5M2b1/Ljj/%2bV0FJIlkJvZXHxB3nzdknLY1vN%2bDZrkiyIBA6AXxH67Yuk3Hzqym/%2b48iXP9nSX%2b1pAaRQyOuHEP41hqTIfh7eYat/XvwcAEiG/r9KtjLWL1pktiGc1rdLAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"845\" alt=\"view\" data-srcset=\"/assets/static/rho-view.82a2fbd.3b1cea23ca8ebf56d4e5956683c6b6ab.png 480w, /assets/static/rho-view.3fb7b9b.3b1cea23ca8ebf56d4e5956683c6b6ab.png 845w\" data-sizes=\"(max-width: 845px) 100vw, 845px\" data-src=\"/assets/static/rho-view.3fb7b9b.3b1cea23ca8ebf56d4e5956683c6b6ab.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/rho-view.3fb7b9b.3b1cea23ca8ebf56d4e5956683c6b6ab.png\" width=\"845\" alt=\"view\"></noscript></p>\n"}},{"node":{"id":"e2136195ef2eb1fa4cdbc0fd48d40c4a","title":"RNode Web API: OpenAPI / Swagger","path":"/blog/2020/09/21/rnode-web-api/","date":"21. September 2020","timeToRead":1,"author":[],"excerpt":"The core team is working on web api documentation · Issue #2974. So I drafted rnode-openapi.json. Put that in the Swagger UI and you can explore the API in detail:  You can even run rholang examples","content":"<p>The core team is working on <a href=\"https://github.com/rchain/rchain/issues/2974\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">web api documentation · Issue #2974</a>. So I drafted <a href=\"https://raw.githubusercontent.com/dckc/rchain/rnode-openapi/docs/rnode-api/rnode-openapi.json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rnode-openapi.json</a>. Put that in the <a href=\"https://petstore.swagger.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Swagger UI</a> and you can explore the API in detail:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1145 737' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-2a73dc46e4dbbfd6ef3d1b69d37ccadb'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-2a73dc46e4dbbfd6ef3d1b69d37ccadb)' width='1145' height='737' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAApCAYAAACFki9MAAAACXBIWXMAAAsSAAALEgHS3X78AAAJhElEQVRo3t1ah1YbWRL1/3/I7pnZncHGZJSz1Mo5CwmBgiWETTLBU3tvdbcSwl5YxNrDOXXe6%2b7qp1fpVtVr3g2uJtIYdiXbqEpzeCK87l%2beyYCE%2bemXkRSO6lJsN5Wn3j/G/XN99qtTF7K9G1xOpDXuQcCGtMd9Gd1%2bkd71ufRuzqV/81kVkG/VJNeqqwKqpx3pXZyBxkp9nf9qNBbKrQqgtduTvtQgWLnbltJRQ/qwcr97ZBKYzu6vZHJ/qXR2dyGfoJxPUA7ftRXxqxE9vHsBBQzhCtVeW3xxQzyGIYliTgafTmXY78pwcAIFjOEBdfWCAsIg16xJ6bilIXHyebQW1%2bxb4fcmITBEPNf6HYlkUpKuV2UA9x/QuqCBZWViQK5ZhQIaUuw0JYNQKHVausjw2tzwaxK9y1bEumgBAzoIgXyjIsWjmsbIwGayXLzeO0bst6UBr6hhJFYQM1K18tQLXnNjleOmdM%2bHMMZk/QogiJ1cjmZCzwljz5uDrmJEAyFR73WkPepL9aStoaDxpHyv4/pD4EuuUcZv9OBd52sJh/58CJgKGD%2bKv/mxfNyAsHWTOkyJNal0mwDNhs4LR9VXJfs38q%2b8rk35VgUKPpVTyL2ggP5KLzgXbywg//64IRt7W/LH9nslzj86dsWfCIOikqzkgCEFydSLkq7Nxh9SnVRc5K/mV/JmlO%2bJNeZ4nnrXnnOvTdQ%2bKxWw7Al08WyjJOGMIXtep7gjftn3OmTX4xB/MjpdkD%2bQwhgvZfSaY6KclSQoBYE48j7nKUtAPreJ/MqnPNZGyzl9L4GR17pmaXFNex3zOqfP7XWSc/en71bM3249VwEZy0ozC3OTs3sZ8ATgDQc%2blxz4XbKPcQ%2bKcoW8EoCinCGfeI0QFOiTw4BH56RD8DqCHrzjVk9ygt8TDYg/Hla%2bw4BLr0lUPsfDgFvJEfRKMBUVt/XciWve8xlBcVm85uiXUNqQSDahiniRAqbWobWn7lhccDHbuvFiZmpVztO1vBjFtM65CVIsn1KeSDYuRiEtsUJKn8fySYnmEjryHfO9NDwwbnpLyVxDefCewfdKGV0vine4jn0vbvFyXcpgE/f4LAXkmmUx8AMfnA4JBH2Sq5pxOx9bXJjWo9UdGPd9Th25gTCI3mJvgOvZXpVtlhY29xTxHVvpy88yjVX3TLLXXzbUsz1AhVRXL5qgVVsEL46hdEx2XPuysfNBPhxsAyw3NRxCwI/UHCCZnlKwaIYJ66T5EH6xAqaL2cIvhUIO6UV58QOKEQwHApVezzzFKCSBCyG4dUTjle6bt99dk/DzSnixApZT3CocYFweIkxc0ZAcBHwSTxnqhjZPtkGeHPqOFMArJb5EHH1ISDyxoGaaZcAl/wxoiwvPnuKbzhvFR3v9nxXwFNnPCTyeWAiCRYHAQTEAXssxGEfD5YsngREUPgYKIyOEFegItAkrZSastKZjOWelTHNOIWb3CLgYmfo0BSP9VfLT9PiqHvAjJZC31GEVVzHdull6BJZEakfYCwUhbYVQV/h94oyEgCFxVdqeH%2blP73tky%2bXQuTMcQOG1j2fmO954FM%2b98DKP7Hpdsu1GOgWPF8rf8brVANtup66Za5bWr4CZcGYIJJD7c0uWnw8BfyINq6cRBqwHguoFzNssWhbDajHUMv%2bFIZ7yzrUrgKnKl4jIP/78U3ah/R1YJQlLZBqLGBDKZGXPl0A5bcDCXlSVB7Ll3NeMwTVyTTv1lazrsjUvPb/Ufm0Q/JGWWWraccgiJrW0Wa4VzaUAghFYPoq4T6Cai%2bE6jNGAJ0QkCLeNZJNQVBxzQytJ3uP1cwR/UwXMu/hCwfIoBEpaHB0gTOj2/mQM4RCRXZ9H49yBkpnKoTK8GO17/qShpbLdJ7xE8DcJAW78w8EegIj9gEdiEGIxCxTgGQUIn0M9n4GQhmKAF2mQZXHlpIlWuKogypGAWiS12cpW9Dc4FiyQtesHc17W0a4an9rzWkNAKzur4zIrvEU%2bxnEUhY8LqO8DktMD3DEzDTIU9qA0IjjRm%2bHArMCukzwaEuChVzjDQdwLKYgSeJl6GUbuaBAhE9MU%2beYeYI92C5qszJGVs/ksAkE8MdPNA4z7RFSFZMdGgXkvnE2qIAwD4oA/EZNILqmY4YICWGhRQSQqgO/pOggnvm%2b36G%2bigHmA4yZ3PS6Ewb7sYNxFTt7xODWfb%2bwjNNwOicdh3WQeressBNjqMgR4yqQnN1YY0K3p0hztpmgWAuUVIVBeXwh875RlXhk2UK1CbM0CsNhBwKuFC63MMKDFXZGAujTdnW5OZb4E9dcCgnb8Zq0WM72iH%2bDC2aXWdL5VnZXCLJfDKjxTYlR7%2bfQ0BYbg5nRnA3zfs%2bRL6UUK4PESQYhWiWKDGR502G2xtUF/wsDzHCijhxMk81AkrR0fAVF5oRTbVRd6/tas4DGfvb7wL1IAN8YTmt82N%2bVfWx/ld4wxoHAem0zP5X9PLCUfnXH5Y9sr7/e25MP%2btp4PbDl2UR574DnlV3Pjt1UAT4Rg8d%2b3tuSfGxtQwpa8B8g5nA7J6mmw2YI6wwnZPIzJpiMCL0joAYl5Fhd/VOOvW8hXDwHzVDar8atnfix3GaNz4Mb%2bf9Ph0GZn%2br0AaK61fKv8qK63seUthX%2bxBzw%2biyvODi/skx7EeiAVVaw4sFrZLZdTYlAUczfT4qbj0ER5tLREf/YObyn8sxXAkcBnn83bZ3jLZJ/b60ku0hwrNiI6ix16jlnFGUpcj/0AeZNzVeNb0PTDyOAZCqA7k/jJ6rt03NDPaCTW9Px8RuInNXtuf1Irc%2bQntx%2btuQaiLJ1xT%2bVeVMDVig%2bRl%2bYn8L/Dv8Ss/P%2bAVd8G/%2b7Usz79TxVwukIBP42lLic/NA4/o/OfKp5DI1D3yyd5N7n%2bIpd3N3L7cC/3fz3IHenbvXy9v/1J6E5u7r7q/ri3W%2bzNpq8Pd3Iv3%2bTs87mc9HvSGw7ldDCQ0%2bFAR16f9Pv6bEqDvnR7PRlNzmRycyHvLm6vZTAaSTaPfJxDfi6UpdZoycNf3%2bTh28P/le4fHoR/Z5OJFMtVKVXq0jzqSLvTlWKpKs1WW2r1lrTaxxKLxsXlDkoohOYqEJVAAH1FMCbd7qlMziYyHo3lbAxvgVKOjtrSwTtfbq/k3Rk84AoecHlzJZ%2bvLuTi%2bkoubq7lBtr/aQgecIH9cW%2bXX6%2bVuEd7TmtWm02pt1rS7LSl2W5L4%2bhIqd3tSufkBDQbW52ODMcj9YD/AJcm6GQMtUVRAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1145\" alt=\"rnode DeployRequest in swagger UI\" data-srcset=\"/assets/static/rnode-swagger.82a2fbd.e23fd5819fdac9fa8d1aee4d3d998a66.png 480w, /assets/static/rnode-swagger.63de2cb.e23fd5819fdac9fa8d1aee4d3d998a66.png 1145w\" data-sizes=\"(max-width: 1145px) 100vw, 1145px\" data-src=\"/assets/static/rnode-swagger.63de2cb.e23fd5819fdac9fa8d1aee4d3d998a66.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/rnode-swagger.63de2cb.e23fd5819fdac9fa8d1aee4d3d998a66.png\" width=\"1145\" alt=\"rnode DeployRequest in swagger UI\"></noscript></p>\n<p>You can even run rholang examples using exploratory deploy:</p>\n<p><img src=\"https://user-images.githubusercontent.com/150986/93841495-654c2780-fc59-11ea-9ba7-d0c546ddbc60.png\" alt=\"exploratory deploy form\"></p>\n<p>And get the results:</p>\n<p><img src=\"https://user-images.githubusercontent.com/150986/93841539-86ad1380-fc59-11ea-9f79-81cfc25f5350.png\" alt=\"exploratory deploy results\"></p>\n"}},{"node":{"id":"cdd9af788a897670866388d654da48f7","title":"RNode explore-deploy bash script using jq","path":"/blog/2020/09/14/tools/","date":"14. September 2020","timeToRead":1,"author":[],"excerpt":"A small demo for a explore-deploy bash script using jq","content":"<p>You can run read only contracts on rchain without paying any fee using the http explore-deploy api call. Every returned value from an explore-deploy is enclosed in a structure having a type and data field. Pulling out just the data as json is often needed to use the complete result in json without enclosing type and data constructs. This example uses the bash json utilityy jq to 'detype' the output. While jq is good for many uses of json in bash using javascript might have been as easy in this case.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">#usage<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>explore<span class=\"token punctuation\">.</span><span class=\"token property-access\">sh</span> <span class=\"token constant\">URI</span>\nuri<span class=\"token operator\">=</span>$<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token string\">\"rho:id:ar17ohqq83kx7a16nbfquwu9gxidduk9hstgbs9gkbj63o8gqyh1ye\"</span><span class=\"token punctuation\">}</span>\ncurl <span class=\"token operator\">-</span>s <span class=\"token operator\">-</span><span class=\"token constant\">X</span> <span class=\"token constant\">POST</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>observer<span class=\"token punctuation\">.</span><span class=\"token property-access\">testnet</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">rchain</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">coop</span><span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>explore<span class=\"token operator\">-</span>deploy <span class=\"token operator\">-</span>d '\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">return</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rho:registry:lookup</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">valueCh</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Fill in registry URI: `rho:id:11fhnau8j3...h4459w9bpus6oi`</span>\n    lookup<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>\n<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'\"$uri\"'</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>valueCh<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n    <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span>@value <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> valueCh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token string\">'|tee /tmp/explore.err|jq '</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">expr</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">|</span>\ndef detype<span class=\"token operator\">:</span>\n  <span class=\"token keyword control-flow\">if</span> type <span class=\"token operator\">==</span> <span class=\"token string\">\"object\"</span>\n  then <span class=\"token keyword control-flow\">if</span> <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ExprTuple\"</span><span class=\"token punctuation\">)</span> then <span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ExprTuple</span></span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span> <span class=\"token operator\">|</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>detype<span class=\"token punctuation\">)</span>\n       elif <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ExprList\"</span><span class=\"token punctuation\">)</span> then <span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ExprList</span></span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span> <span class=\"token operator\">|</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>detype<span class=\"token punctuation\">)</span>\n       elif <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ExprMap\"</span><span class=\"token punctuation\">)</span> then <span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ExprMap</span></span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span> <span class=\"token operator\">|</span> detype\n       elif <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ExprString\"</span><span class=\"token punctuation\">)</span> then <span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">ExprString</span></span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span>\n       <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">.</span> <span class=\"token property-access\">end</span>\n  <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">.</span> <span class=\"token property-access\">end</span><span class=\"token punctuation\">;</span>\ndef <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> # walk def is needed <span class=\"token keyword control-flow\">for</span> old jq <span class=\"token operator\">&lt;</span><span class=\"token number\">1.5</span>\n  <span class=\"token punctuation\">.</span> <span class=\"token keyword module\">as</span> $<span class=\"token keyword\">in</span>\n  <span class=\"token operator\">|</span> <span class=\"token keyword control-flow\">if</span> type <span class=\"token operator\">==</span> <span class=\"token string\">\"object\"</span> then\n      reduce keys<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword module\">as</span> <span class=\"token function\">$key</span>\n        <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">.</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>$key<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>  <span class=\"token punctuation\">(</span>$<span class=\"token keyword\">in</span><span class=\"token punctuation\">[</span>$key<span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> f\n  elif type <span class=\"token operator\">==</span> <span class=\"token string\">\"array\"</span> then <span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> f\n  <span class=\"token keyword control-flow\">else</span> f\n  end<span class=\"token punctuation\">;</span>\n<span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>detype<span class=\"token punctuation\">)</span>' <span class=\"token operator\">||</span> cat <span class=\"token operator\">/</span>tmp<span class=\"token operator\">/</span>explore<span class=\"token punctuation\">.</span><span class=\"token property-access\">err</span>\nexit</code></pre>\n"}},{"node":{"id":"9ba6b4fec0ed50618681dc78f3d42492","title":"The role of types in refactoring the internet and Structural type theory of higher-order languages","path":"/blog/2020/08/06/seminar/","date":"6. August 2020","timeToRead":0,"author":[],"excerpt":"A joint talk with Greg Meredith of RChain and Christian Williams from UC Riverside","content":"<div class=\"youtube-embed\">\n    <div style=\"width: 100%; margin: 0 auto;\">\n        <div style=\"position: relative; padding-bottom: 56.25%; padding-top: 25px; height: 0;\">\n            <iframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"\n                src=\"https://www.youtube-nocookie.com/embed/hug_wJmm29Y\"\n                allow=\"autoplay; encrypted-media\" allowfullscreen>\n            </iframe>\n        </div>\n    </div>\n</div>\n"}},{"node":{"id":"4c18fbb0a601da7400e97907fe3c1e15","title":"Structural types for algebraic theories","path":"/blog/2020/07/21/seminar/","date":"21. July 2020","timeToRead":1,"author":[],"excerpt":"MIT Category Theory Seminar with Christian Williams","content":"<div class=\"youtube-embed\">\n    <div style=\"width: 100%; margin: 0 auto;\">\n        <div style=\"position: relative; padding-bottom: 56.25%; padding-top: 25px; height: 0;\">\n            <iframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"\n                src=\"https://www.youtube-nocookie.com/embed/aJyxtUopJ74\"\n                allow=\"autoplay; encrypted-media\" allowfullscreen>\n            </iframe>\n        </div>\n    </div>\n</div>\n<h3 id=\"abstract\"><a href=\"#abstract\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Abstract</h3>\n<p>RChain is a distributed computing system based on a concurrent language with reflection. The ρ calculus, or reflective higher-order π calculus, is a concurrent language with operations that control the distinction between data and code. This gives networks intrinsic structure, which can offer deep knowledge and utility. This can be used to think globally about the web.</p>\n<p>To reason about this structure, Namespace Logic [Meredith, Radestock 2005] augments the ρ calculus with first order logic, to create a predicate calculus for denoting subclasses of terms. For example, the predicate for a process to be single-threaded is \"not[null] and not[par(not[null],not[null])]\" -- like an integer being prime. These predicates provide types for the ρ calculus, which condition programs and enable high-level reasoning in concurrent networks.</p>\n<p>We present a categorical formulation of the algorithm (-) + first order logic. A language can be presented as an algebraic theory with binding; we then form its topos of presheaves, and therein construct a polymorphic type system with subtyping. The algorithm extends the idea of namespace logic to a broad class of formal languages, and it is especially powerful in concurrent languages with reflection.</p>\n<p>A draft paper can be found <a href=\"https://github.com/cbw124/stat/blob/master/stat.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></p>\n"}},{"node":{"id":"6774578744b7304e62ac9893553a71ca","title":"RChain Community Debrief 169: Metamask interop demo","path":"/blog/2020/03/11/debrief-169/","date":"11. March 2020","timeToRead":1,"author":[],"excerpt":"Debrief 169 features a Metamask interop demo","content":"<div class=\"youtube-embed\">\n    <div style=\"width: 100%; margin: 0 auto;\">\n        <div style=\"position: relative; padding-bottom: 56.25%; padding-top: 25px; height: 0;\">\n            <iframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"\n                src=\"https://www.youtube-nocookie.com/embed/tZCp7vJ_V28\"\n                allow=\"autoplay; encrypted-media\" allowfullscreen>\n            </iframe>\n        </div>\n    </div>\n</div>\n<ul>\n<li>\n<p>Demo: RNode to Metamask connection; checking balances, etc.</p>\n<ul>\n<li>demo page / app: <a href=\"https://tgrospic.github.io/rnode-client-js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://tgrospic.github.io/rnode-client-js/</a></li>\n<li>\"we're just using Metamask to sign our deploys\"</li>\n<li>works with hardware wallets via Metamask</li>\n</ul>\n</li>\n<li>relating REV and Phlo</li>\n<li>LGM: next validator bonding epoch is ~50 days away; the parameter was chosen under the expectation of 100 bonded validators at genesis, an expectation that didn't go as planned. So we're reconsidering that.</li>\n<li>LGM: re jusidiction... can't say too much before a meeting 2pm today with a connection @DarrylN: came up with.</li>\n<li>Q ( @jimscarver: ): accepting board applications? Should the governance committee be recruiting?</li>\n<li>A (LGM): the board is open to them; has a process for appointing between annual meetings.</li>\n</ul>\n<p>see also: <a href=\"https://blog.rchain.coop/blog/category/community/debriefs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Community Debriefs</a> category in the Coop blog</p>\n"}},{"node":{"id":"93424cd9209a5c04e79faac3754c13b9","title":"RCHAIN MAINNET ANNOUNCEMENT","path":"/blog/2020/02/25/rchain-announcement/","date":"25. February 2020","timeToRead":1,"author":[],"excerpt":"RChain Mainnet is live 🌟🎉","content":"<h2 id=\"rchain-mainnet-announcement\"><a href=\"#rchain-mainnet-announcement\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RCHAIN MAINNET ANNOUNCEMENT</h2>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1707' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3082421ec691448da5c3d4afe182b5f6'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3082421ec691448da5c3d4afe182b5f6)' width='2560' height='1707' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAArAEADASIAAhEBAxEB/8QAGgAAAwADAQAAAAAAAAAAAAAABAUGAgMHAf/EAC0QAAIBAgUCBQMFAQAAAAAAAAECAwQRAAUSITETQQYiUWFxFIGRI0KhsfCi/8QAGAEBAQEBAQAAAAAAAAAAAAAAAwIEAQX/xAAgEQACAQQCAwEAAAAAAAAAAAABAgADERIhBDETIkFR/9oADAMBAAIRAxEAPwDhSQxyPdg0StxbzAYbJlcME7UtUryEslqimcFACAeCN/Tkb3xT%2bHcled2VqVJUUGOSHUUUlQLFTvZjz98UPi3Lsvpcoiqsio4VE2mGoidPOt9wL9rkEE99sE3IUkKJqXjMFLESOOQdShnhljhp8wj0J0wlxKl7a1bcXBtcg8YFGXVr5KsMsEMkdPOWePqKsnlsrAnm24/k4bZc8dPWSUElLNLrcdM9T9SJSQWAA2P%2b9cUHiiioMmWiKVMtcyNqkBUgwpqQgMF2GoC3YnEGoQwX9jLSVlLjqc2y%2bgeWGZR0VUAvI7HzCMC7C3pxxvfjvgOQQQirhjdpka3SfdRcHclfi%2bLuvy6hkjWseGGOKWQpTRrCyo4DAlubqRew342xH5guptESQrFIwZQgubi6/IJ5t7jDq4eZ3pmmItkjC9KN5VMduodN9r2uN%2b/8YyihlqKmdcvSSQHUA3B0e%2b9uO2DJqBGVDTpMfLdzJZRe3b7359sK2J0EBrKDe3FzixvqAwx7l14YzWWkqo0WVhGXvIQrMdxuT8W%2becV3iameuiFXDpd9K3VFOlrW3K%2bu%2b5xG5fSsmWCV6kzREiWSCOWxUA2DFfk2ufxhrNmj0UHQopKmAuza4dRDjyjkC1gR77%2bmM1al7Bk7npcauPG1Op18hFJB9BQPU1A6tbG4hpolbeNTdi1hsw3IsT%2beMDvnktTmELVM8sfSjRZEAGqTTtbixPNrj74OpM8pY8taDTCJVdbltTaB3fy7WGwwrzERdHqxqsrySySCUoQxUKLEL6Xub4hFLE5iK2KKDTa8bzTVdXWwM9FS0cbnqxKIralt%2b0EEcWxO50Wh1S0UsNUourTl7vrBDFwpsw5te3bD6nzOQ%2bHmWaJxDA5VpCumMqRta4O4YKTbsTtidrquJ62GSlhFKkLfUlpAWc8W89vMp7DbviqSkE6h8hwwBBi%2bqzZanK1pGjVW1X18avn%2b8IJoSsBlZH0l9CuLaSRyPncfnDjO5R9VNBSzH6aeRZWU2VWaxsf%2bj%2bcJJ0MZ06lYEBvK1x8H3xppqALj7PPruxazbtqOoEZ40akjn6sSlpnBuAL2BHoNwDh1RSwwmMxPNE7hoS4XaS4ANm%2b5BFuPnCONQKZ3Fw2oLse1uMN8wleKoo4IzohMUEmhRYarDzex9T374thl6w6TYHObcuT6eo1IwKxArMl95QTYgixstrbkc%2b%2bC8zrjmk60VPohhjI%2bmijN0XyXNjvyQdr8k4UU1XO7VsskmuSVSzs4DFjvvv8AJxsy2eRZKaBWtEZOpYAA6hcXvzwTjgQZXPyL5NYjV4XLmtUuXzF2MkkkqNrMu4ZQGVyltxpvv8X4xO1NVM4P6shDqAwLXuLnb2Htg/MyU6KoSoMRU22uAzAD8bYVySO12Z2LFQpJPbi3xsMUEAOhCd2OiYPMqhEs12Iubdvb/euPamVXqA6QxQIyBdKjUo2sT84xfG9II2yWqnZbypNGqtc7Ag3/AKx06hi5n//Z' /%3e%3c/svg%3e\" width=\"2560\" alt=\"mainnet\" data-srcset=\"/assets/static/concert.82a2fbd.8ca5b093d1a869a7928d5a12aae2dda4.jpg 480w, /assets/static/concert.cbab2cf.8ca5b093d1a869a7928d5a12aae2dda4.jpg 1024w, /assets/static/concert.2665e34.8ca5b093d1a869a7928d5a12aae2dda4.jpg 1920w, /assets/static/concert.42db587.8ca5b093d1a869a7928d5a12aae2dda4.jpg 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/concert.42db587.8ca5b093d1a869a7928d5a12aae2dda4.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/concert.42db587.8ca5b093d1a869a7928d5a12aae2dda4.jpg\" width=\"2560\" alt=\"mainnet\"></noscript></p>\n<p><em>originally posted <a href=\"https://blog.rchain.coop/blog/2020/01/23/rchain-mainnet-announcement-the-block-height/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">in the coop blog</a></em></p>\n<p>RChain Mainnet is live. Initially, the Cooperative will run all the nodes in the root shard but expects that to change in the upcoming months. The Cooperative took a snapshot of the Ethereum chain at block height <code>9371743</code>, which occur on the morning of January 28, 2020 and published the balances going into the genesis block. The community reviewed the genesis block balances.</p>\n<p>RChain uses a pure proof-of-stake version of the correct-by-construction (CBC) Casper consensus framework.</p>\n<p>Parameters for RChain Root Shard Nodes</p>\n<ul>\n<li>The root shard is limited to 100 validator nodes and unlimited read-only nodes.</li>\n<li>After the root shard, 100 validator slots are filled, bonding requests will be queued in a waiting list. Validators are randomly selected from the waiting list for bonding.</li>\n<li>Approved bonding requests get up to two weeks to provision hardware before they are placed in rotation.</li>\n<li>Unbonded validators may re-apply for validation. Their bonding will be treated just like any other bonding request and may be subject to queuing on the waiting list.</li>\n<li>The minimum bonding period for all validator nodes is four months.</li>\n<li>The deposit will be bounded for the entire time they are resident in the validator set unless the validator’s deposit is subject to slashing.</li>\n<li>When a validator requests to unbond to leave the validator set, the validator must wait a minimum of two weeks for their bond to be returned.</li>\n<li>Bonding minimum is 10,000 REV and maximum is 5,000,000 REV.</li>\n<li>Validator returns are comprised of two parts:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">  \t  a 7% segniorage fee\n  \t  a transaction fee</code></pre>\n"}},{"node":{"id":"048888d1a417da3c73e81de0438db01a","title":"RCAST 44 - FAIRNESS, LIVENESS & RCHAIN","path":"/blog/2019/10/09/rcast44/","date":"9. October 2019","timeToRead":17,"author":[],"excerpt":"Greg Meredith is joined by Isaac DeFrain and Christian Williams to discuss the final stages before Mainnet launch.","content":"<h2 id=\"rcast-44-fairness-liveness--rchain\"><a href=\"#rcast-44-fairness-liveness--rchain\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RCAST 44: FAIRNESS, LIVENESS &#x26; RCHAIN</h2>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 800 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-b45f01095a504ed5de246974f05132cc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-b45f01095a504ed5de246974f05132cc)' width='800' height='400' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAgAEADASIAAhEBAxEB/8QAGwAAAQUBAQAAAAAAAAAAAAAABQECBAYHAwD/xAAsEAACAQMDAwMDBAMAAAAAAAABAgMEBREAEiEGEzFBYYEHIkIUUXGRMlLw/8QAGQEAAgMBAAAAAAAAAAAAAAAAAwYCBAcF/8QAIhEAAgICAQMFAAAAAAAAAAAAAQIAEQMhMRJBcQQFExSB/9oADAMBAAIRAxEAPwDRq/qmyW%2brkpa25Qw1EZAdG3ZHGfQe%2bp1sudFdIDNbqqKpjBwTG2cH3/bWUXmstlD9TbtLe6U1VJt29sR7/u2Jg4/vXX6e1aSdc3Cps9urEtEmISsagrEWwV3c8DgnjOAdKD%2b3IMPWLuge1eI8ZMCJj6ySNDx4mvaR/wDBv4OqvJ1zaVt89WgqJEiqhSYChdzEEqwLEAIQDhiQDjUui6ijrrrJbkoK%2bORYRO0kiJsCMDtOQx84I%2bNc/wCtlXZXiUPlQ6BlTKkU3dMkYH%2bu77vIHj51Aqa5IVLM2ABoVX3VI1yTzqDaLdW9TVjJumpaVY2kMrwEqwX0zwOdaaTUSuZJgWu6indLeoamhwZ5O6FKqTq9U1LS2akmt9pkaWjlwzNKSzbvXBOP2GlpEgoKSOmt8SwL2VjmKIqGUjyTj39zpDjjQybhAtQnD08tN1bV3tBNLJUIUMZKhACAP5/HQyj6Jp6K7VdVSm4xwT5ZqSKo7UZPOOVOTjJxnxnV517Wcj1mUd%2b1fgjszM4pjKmvSNqjieKktk9HG8axOKap7W9VzjcAeTyRzonb7ZTW%2bRnpKFqfFKlKD3AQsce7aMZ9zz76NDHrn41WKB7u16YVImWAs5kVhujCYIUKfT8cfOdERsmdWthoXsncCMajgTKenunJrvNDVXQQtbnVmXZPtY4BxwPfWhUlNFTUkFNAu2KFdqgsWOMk8k%2bfOnRCONY0RERFGAFUKB8DTztx51oRNxQAqEEWpdVIipiABywXkcY8/wDedcKpJAF7scKc4zHjz8aZ%2booVBHbkJ%2b3BLe3P9nXCoqKTbmFZFbPlmB1GTn//2Q==' /%3e%3c/svg%3e\" width=\"800\" alt=\"ladl\" data-srcset=\"/assets/static/rcast44.82a2fbd.0311220fc46768b9ef73091d5dddeda6.jpg 480w, /assets/static/rcast44.775f9c8.0311220fc46768b9ef73091d5dddeda6.jpg 800w\" data-sizes=\"(max-width: 800px) 100vw, 800px\" data-src=\"/assets/static/rcast44.775f9c8.0311220fc46768b9ef73091d5dddeda6.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/rcast44.775f9c8.0311220fc46768b9ef73091d5dddeda6.jpg\" width=\"800\" alt=\"ladl\"></noscript></p>\n<div class=\"soundcloud-embed\">\n    <iframe \n    width=\"100%\" \n    height=\"\" \n    scrolling=\"no\" \n    frameborder=\"no\" \n    allow=\"autoplay\"\n    src=\"https://w.soundcloud.com/player/?width&#x3D;100%25&amp;color&#x3D;%23ff5500&amp;auto_play&#x3D;false&amp;hide_related&#x3D;false&amp;show_comments&#x3D;true&amp;show_user&#x3D;true&amp;show_reposts&#x3D;false&amp;show_teaser&#x3D;true&amp;visual&#x3D;true&amp;single_active&#x3D;true&amp;url&#x3D;https%3A%2F%2Fsoundcloud.com%2Frchain-cooperative%2Frcast-44-fairness-liveness-rchain\"></iframe>\n</div>\n<p>Greg Meredith is joined by Isaac DeFrain and Christian Williams to discuss the final stages before Mainnet launch.</p>\n<p>Here are the papers discussed in this RCast:</p>\n<ul>\n<li><a href=\"http://homes.sice.indiana.edu/ccshan/logicprog/LogicT-icfp2005.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Backtracking, Interleaving, and Terminating Monad Transformers</a></li>\n<li><a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.16.3952&#x26;rep=rep1&#x26;type=pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Categorical Models for Concurrency: Independence, Fairness and Dataflow</a></li>\n<li><a href=\"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.2.8951&#x26;rep=rep1&#x26;type=pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fair Bisimulation</a></li>\n</ul>\n<h3 id=\"transcript\"><a href=\"#transcript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TRANSCRIPT</h3>\n<p>Greg: Christian, you were just mentioning the connection between species and linear type theories, which is very interesting because Mike and I have been working on this proof theory side of the LADL stuff. I realized yesterday, as we were writing it out, that essentially what’s going on with this use of an enabling catalyst is to factor the linear part. It turns out that you can compose this resource constraint for execution together with any rewrite system. As a result, you’re forcing a kind of linearity into this situation.</p>\n<p>It’s a kind of composition. Looked at from the other way, you’re factoring the linear stuff into its own sub-component. That’s how we end up getting a linear aspect of the type theories that we’re generating. It hadn’t occurred to me until just yesterday that you can think of it that way. That ends up being a nice way to factor out the argumentation about how and why this stuff works.</p>\n<p>I wanted to talk a little bit today, not about the proof theory side, but about fairness as opposed to liveness. If you actually go and do a literature review about fairness, especially over the last 15 years—this is how I spent my last weekend—there has been some development, but fairness is an interesting consideration and is usually treated somewhat differently than the liveness constraints that one can consider.</p>\n<p>In particular, I have long been sensitive to fairness constraints, having built a bunch of actor systems. Carl Hewitt used to joke a lot that actors were strictly more powerful than Turing machines because the demand was that the communication layer be fair. Fairness demands like that are strictly more powerful than you can actually compute inside of a Turing system. He used to make those kinds of comments just to poke people in the ribs to wake them up. It was a humorous comment because it would raise a lot of eyebrows.</p>\n<p>But in the case of actor systems, fairness is easy to describe. The fairness in an actor system comes down to the following kind of consideration. Where actors compute by sending messages to each other and they’re buffered from each other by a mailbox. The mailbox effectively represents a message queue. In front of this message queue is what’s called a primitive serializer that serializing the non-deterministic order of the messages into some kind of schedule. There are constraints on that schedule that it be fair.</p>\n<p>The characterization can be described in terms of a trio of actors. Let’s say you have one actor that’s in the server role and is serving two other clients. They’re sending messages to the server. One client is very verbose and the other client is terse. You can’t have an infinite prefix in the mailbox of the verbose client’s messages. There have to be some of the terse ones sprinkled in some finite sample. Does that make sense?</p>\n<p>Isaac: With the verbose and terse clients, you’re saying they have longer or shorter messages or they’re sending more or less messages?</p>\n<p>Greg: More. It’s about the volume of the messages compared to the size of the messages.</p>\n<p>Christian: How would it be a prefix if you’re constructing them by binary one to another?</p>\n<p>Greg: Because the primitive serializer could just always be unfair—always favor the verbose client over the terse client. Whenever it gets a choice of ordering them, it always puts the other one, because they keep coming in: “Oh, here’s another one from the verbose guy. Put that in front of the other. Oh, here’s another one from the verbose guy. Let’s put that one in front.” That’s how it ends up being unfair.</p>\n<p>Isaac: You’re saying that regardless of the order that the messages are received?</p>\n<p>Greg: In the sense that as long as they keep coming in. Primitive serializer is giving an ordered view to the server actor.</p>\n<p>Isaac: That makes sense. Fairness, you’re saying, is just some well-defined notion of alternation between all of the possible clients’ messages that are coming in.</p>\n<p>Greg: That’s how actors view it. If you survey the literature, one of the things that’s really interesting is that a lot of the literature wants to see it as a whole system property, which makes it much harder to verify, much harder to enforce in terms of local code. If you look at bisimulations, Thomas Hildebrandt, who did some work on bigraphs, characterizes history-preserving bisimulation, which is decidable for finite-state systems, and hereditary history-preserving bisimulation, both of which give you enough information to make some decisions about fairness or to describe fairness properties. Hereditary history-preserving bisimulation is not decidable even for finite-state systems.</p>\n<p>When you start to take this whole-systems view, as opposed to looking at things in a more local fashion, you can quickly lose the ability to make these things decidable. That’s really important.</p>\n<p>There’s one other piece of the puzzle. Shri Rajamani took a look at fairness in the context of CTL and CTL<em>. The perspective is whole systems. What they were looking at was to whack down the total set of models to just the fair ones and then show that whatever was true in CTL or CTL</em> was true in the fair subset. You could continue to do your reasoning and factor fairness to the side, which is again, that the more evidence of the kind of perspective that I wanted to submit for consideration, which is that the fairness is typically considered separately from other liveness constraints.</p>\n<p>In particular, if we just look at deadlock as a sort of typical liveness consideration, you can have unfair systems that avoid deadlock. There’s always some Uber controller that’s parceling out the work and they guarantee. In fact, the reason they’re put in this position of being the Uber controllers because they guarantee no deadlock. It’s live, but it’s not fair.</p>\n<p>Isaac: It’s like a veto player in game theory.</p>\n<p>Greg: That’s exactly right. On the flip side, you can have things that are fair but not live. Everybody gets a fair shake, but they get stuck. That’s a way to see that fairness is a little different than some of these other liveness considerations.</p>\n<p>Christian: I’m still not quite sure I understand fairness. It has something to do with alternation or proportionality of ability to send. But then you said you could formulate it in terms of bisimulation?</p>\n<p>Greg: That’s right. Bisimulation can be seen as governing who sees what messages. You can talk about adding fairness constraints in that kind of setting. Does that make sense?</p>\n<p>Isaac: You’re saying just making sure enough people are seeing the messages, or I guess I’m not really sure how to connect those two…</p>\n<p>Greg: You can always look at the total aggregate system of all of the agents that are computing. Then you can look at all the transitions of that system. Then you can compare that to a system in which the actors are fair. The way you would do that comparison is bisimulation. Every transition in one is matched by a transition in the other. That’s how the two are related.</p>\n<p>The thing that we noticed, which is what we do with Pi calculus and Rho calculus, if you acknowledge or respect the distinction between producer and consumer, then you can characterize the kind of liveness constraints that we were looking at before in a different way than you characterize the fairness constraints. In particular, the synchronization constraints that we’ve implemented are on the production side. A validator only can produce messages if it meets certain considerations with respect to having listened to the other actors in the system—the other validators—that will absolutely force a kind of liveness characteristic on the network. In fact, there’s a whole plethora of different liveness characteristics that you can get by imposing weighted grammars on the specification trees of the blocks that are being proposed.</p>\n<p>But you can also do it on the consumption side. Not just on the message production side but on the consumption side. There’s an interesting line of research that has long held my attention that was done by Oleg Kiselyov. He and a couple of his longtime collaborators provided a monad transformer, which they call LogicT. Essentially, it gives fair combinations of streams. Think of a stream as effectively a monad. When you want to aggregate streams together, one possibility, like with a list, is you do an append. But the if in the case of a stream where you have an infinite list, if you do an append and you do it in the wrong order—for example, if you append all the odds to the list one, two, three—there’s your infinite prefix gadget.</p>\n<p>Christian: So you zipper?</p>\n<p>Greg: You can zipper or you can do other kinds of things. What he did was to provide a general-purpose gadget which he calls LogicT, which implements backtracking. If you think about it, you now want to aggregate across a bunch of streams, not just two. Then you want to aggregate according to certain constraints.</p>\n<p>Another application of this kind of machinery is the for comprehension in the Rho calculus, where each port that you’re listening to can be viewed as a stream, but you have pattern-matching constraints. You only want to pull an event off if it matches the pattern. Otherwise, you want to skip it, which is akin to peak. If you do this across a bunch of streams, you potentially want to look at all the combinations until you find the one that matches all the pattern constraints. That becomes obviously a backtracking problem in the general case. LogicT provides that.</p>\n<p>I’ve suggested to the dev team, that’s the abstract API. You create a view of each of the validators as if they were providing a stream of messages. You can look at the blocks coming in and you can sort them by producer’s signature. That provides a logical cue. Then you aggregate the logical cues using this fare aggregation method.</p>\n<p>The lowest-end version of this is, as you said, Christian, zipper, which is round-robin. That’s the cheapest way to do that, but you can get fancier. Oleg provides a fair disjunction in a fair conjunction. Now you have a little language that allows you to do policies: disjoin these streams and conjoin these streams and then disjoin these streams and so on. You can aggregate up a whole tree of these streams using this little language. Does that make sense?</p>\n<p>Isaac: This is all an effort so that nobody’s messages take priority over anybody else’s. Basically, enforcement of decentralization.</p>\n<p>Greg: Yes, but it’s not that nobody’s messages take priority over anybody else’s. It’s that you have a priority policy language. That’s really what the LogicT monad transformer is providing.</p>\n<p>Christian: What’s the difference between disjunction and conjunction?</p>\n<p>Greg: We’re talking about a fair disjunction, so it’s a fair union because the streams are like sets. Disjunction is like a fair union. Conjunction is like a fair intersection.</p>\n<p>Christian: What does that mean for streams?</p>\n<p>Greg: The simplest answer is you can do an interleaving; you can do a round-robin; but you can do more complicated things. The union is an interleaving.</p>\n<p>Isaac: The fairness aspect is just coming in because there’s an implicit order there.</p>\n<p>Greg: Because there’s an order and because some of them may diverge. Let’s say you have a list that has an Easter egg in it somewhere. If the computation doesn’t have to touch the Easter egg, it won’t blow up. Depending on how you do the interleaving or how you merge these two lists together, whether you’re providing both things or you’re providing something from both thing, that matches a criteria—that’s the intersection part—how you do that from each stream will matter if one of the streams might contain an Easter egg.</p>\n<p>Christian: What do you mean by an Easter egg?</p>\n<p>Greg: You touch the thing and it goes into a divergent computation. That’s the other aspect of this. It’s not just that the streams may be infinite, but they may contain Easter eggs. They may contain divergent computations. The typical way to deal with not touching diversion computations is you are as lazy as possible. The thing about LogicT is it allows you to give this mix of laziness and eagerness. That’s the thing that’s cool about this.</p>\n<p>Isaac: You’re saying the validator would basically be able to play by their own rules and, to some extent, within the framework of this fairness constraint?</p>\n<p>Greg: That’s the idea. As with everything, that’s precisely the point. You elucidated this. What I’ve been arguing is the whole thing with the synchronization constraints was to provide a language in which to express constraints so we weren’t pinned down.</p>\n<p>I’m suggesting the same on the fairness side. Don’t pin this down to a one-size-fits-all solution. Provide a language—that’s where LogicT fits in. The nice thing is that LogicT has a very crisp, clear characterization in terms of category-theoretic semantics. The interesting thing about LogicT, though, is it’s a monad transformer and not a distributive law.</p>\n<p>Isaac: What do you mean by monad transformer? I think I understand heuristically, but I’m not sure what the actual definition is.</p>\n<p>Greg: Without going into a lot of the details, the monad transformer is another way to combine monads and ensure that the result is a monad. In general, when you combine monads, the result is not necessarily a monad. If you have a distributive law it is a monad. That’s easy to prove. The monad transformer is yet another way.</p>\n<p>What I’ve argued in the past is that the distributive law is far superior in a lot of cases. I’ve tried to use LADL as an example of a place where you really need it because of its equational characterization that makes reasoning a lot easier. In fact, the equations are precisely what get you out of the stickiness of doing the sum of two theories. In the LADL case, you’re trying to get to this semantics, which is the collection of the terms. You have these terms of collection combos in the combination of the theories. You can’t get out unless you have a distributive law.</p>\n<p>Christian: Why can’t we use the same language for the synchronization constraints as for this problem?</p>\n<p>Greg: This is what I was trying to do at the top of the conversation: observe how the literature factors fairness. Fairness is typically considered separate. The argument is that we can have systems that are live but not fair. We gave some sketches of what those look like. We have systems that are fair but not live. We gave some examples of those.</p>\n<p>Christian: Why does that mean that they can’t have the same language?</p>\n<p>Greg: The next piece was to talk about that in terms of the implementation view of the system. The liveness constraints are about the production of messages and the fairness constraints are about the consumption of messages. The production side doesn’t have to worry about Easter eggs, typically, or interleaving things, whereas the consumption side has to worry about exactly those things. The language has to have different primitives, essentially. But they are closely related.</p>\n<p>This is the whole RChain approach. It’s basically a language-based approach. At the end of the day, I’m a language geek. I fundamentally believe that most interesting computer science problems boil down to constructing a little mini-language in which to express a variety of solutions.</p>\n<p>Isaac: Is it possible that the fairness and the liveness languages that we’re talking about are dual in some respect?</p>\n<p>Greg: They are dual, at least in the way that we’ve decomposed the system. If you look at the literature, that duality is not explicit. That’s because they get characterized as these whole system properties.</p>\n<p>Isaac: You’re saying from the perspective of the actor, they’re dual languages.</p>\n<p>Greg: In fact, not just actors, but agents in the Pi calculous, agents in the Rho calculus, all of those computational models that respect the duality between input and output, actually represented explicitly.</p>\n<p>Isaac: Right. I guess you need that on the ground level first before you can even talk about duality.</p>\n<p>Greg: Exactly. There are other kinds of duality, like the Morgan duals and things like that. The bisimulation stuff is usually over whole synchronization trees rather than looking at it in terms of the input and output.</p>\n<p>As far as I can tell, this is a unique perspective. I have yet to find a paper and or anything in the literature that looks at things like this. Yet it’s readily graspable. I don’t think there’s anything here that’s rocket science. We’ve been able to cover most of the concepts in a short period of time.</p>\n<p>The thing that’s really beautiful is that there are these ready-made gadgets that we can pull off the shelf. That’s one of the things that I’ve been trying to follow as much as possible. In the case of the Rho calculus, let’s start with the best models, look at where there are gaps, fix those gaps, and then derive a model of computation that we can reduce and practice from there.</p>\n<p>The same with LADL. I’m much more interested in semantics that are built out of stuff we know and try to be super conservative. Mike and I spent a long time, for example, rather than doing everything we could to try to avoid dragging in all of TOPOSIS. Can we build the comprehension language that just uses the monadic machinery? But ultimately you discover that there are certain no-go theorems with respect to distributive laws and so you’re forced to have more and more set-like gadgets. That’s what justifies the use of TOPOSIS. The design methodology, the work ethic, is let’s not invent anything if we don’t have to.</p>\n<p>Christian: What did we mean by languages being dual?</p>\n<p>Greg: What I was talking about is the duality between production and consumption.</p>\n<p>Christian: Do you think this could be some kind of actual mathematical duality?</p>\n<p>Greg: Effectively, it’s covariant versus contravariant. It’s just iterated covariant because you’re talking about streams, or iterated contravariant.</p>\n<p>Isaac: This is something that will be combined with the liveness constraint that’s already there.</p>\n<p>Greg: That’s exactly right. We’re actually ticketing work right now to add the simplest version of this gadget. If it were me, I’d put in the LogicT as the API, and then underneath it, rather than do full-on backtracking, I’d do something simple that meets the equational constraints. Given the time constraints, we may incur a little bit of technical debt and just do the simpler thing and then add the API post-facto, after maintenance. It’s a resource constraint problem as opposed to architecturally what’s going on. We know architecturally and theoretically what’s going on and now we’re putting the best implementation that’ll get the job done. With luck we can provide a better factorization after the fact. Again, math wins.</p>\n<p>Isaac: Doesn’t it always? The liveness constraint was initially put into place because of the long proposal times, right?</p>\n<p>Greg: Just to be clear, Casper’s not live unless you add some kind of synchronization constraint. We knew we were going to have to do that.</p>\n<p>Isaac: This is just the manifestation of that.</p>\n<p>Greg: Long proposal times show up as a manifestation. If you crank the synchronization constraint all the way up to 11, the proposal times stay stable. We have the data on that.</p>\n<p>Isaac: By that you mean 0.99 synchronous constraint.</p>\n<p>Greg: Exactly. Synchrony constraint is just one of a whole host of them. There’s a whole language of synchronization constraints. We just pick the one we can implement as a dial and as fast to check. When you crank it all the way up, then that limits the throughput of the network.</p>\n<p>Isaac: It essentially forces a round-robin, or something close to a round-robin.</p>\n<p>Greg: It’s kind of round-robin-ish.</p>\n<p>Christian: What does that mean?</p>\n<p>Greg: It’s not necessarily that you go from validator one to validate or two to validate three. That’s round-robin. You could have validator one going again. You could have some stutter in this as long as they have enough stake in their justifications. They’re permutations on the order that’s supported. You just have to visit all of them.</p>\n<p>Basically, what you’ll get is any permutation of all N and then another permutation of all N and then another permutation of all N, like that. So it’s not round-robin. Round-robin will be one, two, three, four five, up to N, then again, one, two, three, four, five up to N. You won’t ever see a permutation.</p>\n<p>Christian: That seems the most fair for it to be a sequence of permutations: efficiently random.</p>\n<p>Greg: This actually goes to cake-cutting algorithms. It’s most fair in the abstract. When you start to cut a cake, someone says, “I don’t like so much icing. Can you give me the corner piece?” Those kinds of practical considerations, they map over into things like, “Well, this guy has more memory. This guy has more bandwidth. This gal has more compute power.” Exactly the same slot is not actually fair if you take in everything. It’s fair in the abstract, but you can do better. In particular, you want to be able to have some wiggle room in the system.</p>\n<p>Derek: We had a brief system crash here. Picking up with Greg again…</p>\n<p>Greg: Christian was asking about papers and resources. I’ll send you some links, Derek, to add to the notes. The only thing I was saying, for the benefit of listeners, is that post-Oleg’s paper there were a bunch of people implemented in N Queens and others sort of classical backtracking problems this way, then said, “Hey, it doesn’t perform as well as some optimized backtracking solution.”</p>\n<p>When I read the paper, my mind immediately went to, “Oh, this is a great way to aggregate streams,” not “this is a great way to implement backtracking.” This shouldn’t be viewed as a way to structure backtracking, or at least I wouldn’t. I was doing it as a way to fairly composed streams. Having provenance and resources are really important for the research side of this.</p>\n"}},{"node":{"id":"520de1d80ae3c0b9af35acaeb260a2f4","title":"RCAST 39 - KNOTS AS PROCESSES","path":"/blog/2019/08/21/rcast39/","date":"21. August 2019","timeToRead":20,"author":[],"excerpt":"David Snyder, who co-wrote “Knots as processes: a new kind of invariant,” with Greg Meredith, joins the call along with Isaac DeFrain and Christian Williams.","content":"<h2 id=\"rcast-39-knots-as-processes\"><a href=\"#rcast-39-knots-as-processes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RCAST 39: KNOTS AS PROCESSES</h2>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 800 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-dc5cddd39193f94236083fbb681f9068'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-dc5cddd39193f94236083fbb681f9068)' width='800' height='400' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAgAEADASIAAhEBAxEB/8QAGwAAAgIDAQAAAAAAAAAAAAAABgcEBQABAwL/xAAsEAABAwMDAQcFAQEAAAAAAAABAgMEAAURBhIhcQcTIjFBYYEUFUKR4SNR/8QAGgEBAAIDAQAAAAAAAAAAAAAABgIDAQQFB//EACMRAAICAgECBwAAAAAAAAAAAAECABEDIRJBcQQFExQxUYH/2gAMAwEAAhEDEQA/AGNP1TZLfLcizbkwzIbIC0K3ZHGfQe9TrZc4V0YL1ulNSWwcEtqzg%2b//AClReZlsg9pt2dvcUyom0J7sN7/FsRg4/ddez2YhzXFwk2e3TEWhzDJS2kFLRVgp3c8DgnjOAaHv5cow8xd0D0rtG%2bTAiY%2bZJGh2s9I3qw%2bVCzmubSm3vy0CQ4hqUImAkJKlEEhQKiAEEA4USAcVNt%2bom5t4Vb0wJzS0NJfU44lAQEKB2nIUfPBHxXP9tlXZX4mj6qHQMsjBkJkn6KGzIY2AkhwBQVzkY6Yx81Jjxp6Uthy2gFS8L2r4Snjn3/lcTL0xIbkSkXZlvnLq2JYT8YBoLZ7SNNSHFmN9/VFSsp75UlLaVKGcgBRyQMjy9q9D5mEOAjWZhNN5wnFC/aDq%2bxaNgFdzfSZKgS3GRy458enU0uNUdtcuVP8AtulVxIrL4Q0idNGO6UeCrOSFdcY61z03aNBW%2b8yJWp9Rx9QagRhx16U5/ihXptzwo9SegqBf7kwkMmdPJjatl3tAedckIKC2SkIAwB1/GqyHomPCu0uXFNxbYfypURqT3TZPOOUnJxk4z5Zo5rKBDxmUavpX4IxZmcUxgmnSNqbaW1Etj8NtbaWliNJ7velOcbgDyeSOas7dbI0B4riQFMYjIiglwEBtvdtTjPueferobfXPxQvDcu5uzn1IeQzlwuJUNzYSAdu0%2bn4kfOatQ5M6tbDQvZO5SMajYEg2q6w3Lc33UGA24pAytxoYzj0AHP7oVuujbddIrjG9MZx1YWHW0hITzkhKPIZ/tLKRqZ2LIKGnFNJ2gjbkjkVtnWchHgWtY9A4kny9xTkCESTcZkfSlhi6siJXb23IjLKWwXfEFEDjOeCaPpTVlbWoot0IeHaQGUjA/VIK2auUmYVS3EPM4I8PCjxwMda9ytbOqWoZ3ozwHFHIFQZLmVYif//Z' /%3e%3c/svg%3e\" width=\"800\" alt=\"ladl\" data-srcset=\"/assets/static/rcast39.82a2fbd.46fc6b1e6ae28ec07ee146d45d2a190d.jpg 480w, /assets/static/rcast39.775f9c8.46fc6b1e6ae28ec07ee146d45d2a190d.jpg 800w\" data-sizes=\"(max-width: 800px) 100vw, 800px\" data-src=\"/assets/static/rcast39.775f9c8.46fc6b1e6ae28ec07ee146d45d2a190d.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/rcast39.775f9c8.46fc6b1e6ae28ec07ee146d45d2a190d.jpg\" width=\"800\" alt=\"ladl\"></noscript></p>\n<div class=\"soundcloud-embed\">\n    <iframe \n    width=\"100%\" \n    height=\"\" \n    scrolling=\"no\" \n    frameborder=\"no\" \n    allow=\"autoplay\"\n    src=\"https://w.soundcloud.com/player/?width&#x3D;100%25&amp;color&#x3D;%23ff5500&amp;auto_play&#x3D;false&amp;hide_related&#x3D;false&amp;show_comments&#x3D;true&amp;show_user&#x3D;true&amp;show_reposts&#x3D;false&amp;show_teaser&#x3D;true&amp;visual&#x3D;true&amp;single_active&#x3D;true&amp;url&#x3D;https%3A%2F%2Fsoundcloud.com%2Frchain-cooperative%2Frcast-39-knots-as-processes\"></iframe>\n</div>\n<p>David Snyder, who co-wrote “<a href=\"https://arxiv.org/abs/1009.2107\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Knots as processes: a new kind of invariant,</a>” with Greg Meredith, joins the call along with Isaac DeFrain and Christian Williams.</p>\n<h3 id=\"transcript\"><a href=\"#transcript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TRANSCRIPT</h3>\n<p>Greg: Thanks again, Derek, for hosting, and thanks to Christian and Isaac for joining. Today we have a special guest, David Snyder. Thank you, David, for taking time out of your schedule to talk with us.</p>\n<p>David: No problem.</p>\n<p>Greg: Isaac had a request at the end of the last podcast that we talk about “Knots as Processes.” I’ll sketch out the overall result that we were aiming for, and then we can talk about some of the subtleties, like how we work out the approach and what that did in terms of how we work on the proof. That sounds like a game plan for everyone?</p>\n<p>David: Sounds good to me.</p>\n<p>Greg: As I mentioned last time, the motivations that I was interested in was bringing bisimulation to mainstream mathematics. Bisimulation is a key proof technique. This was inspired by folks like Hurley and folks like that who are bringing algebraic topology techniques over into concurrency theory to try to use some of those proof techniques. I thought, “Concurrency theory has bisimulation—you guys need that.”</p>\n<p>David: Right.</p>\n<p>Greg: That was the idea. So I thought, “Let’s do something simple first. Something that is already known,” cause it was known in the sixties that ambient isotropy is decidable. It shouldn’t be too surprising that you could get a result with bisimulation. The thought is: Do you give encodings of knots as processes?</p>\n<p>Then the theorem is: two knots are ambient isotopic, which is the notion of equivalents and knots, if their encodings are processes. That’s the result that we were aiming for. The trick how to do this: It turns out that that ambient isotopy is equivalent to being able to transform a knot diagram of a knot into the knot.</p>\n<p>Let’s say we have knots K1 and K2. If I take a knot diagram of K1, and if I can use the Reide-meister moves (which you could think of them as graph transforms), which transformed that knot diagram in very specific ways. If you can construct a sequence of Reide-meister moves from a diagram of K1 and a diagram of K2, then the knots are ambient isotopic. Does that make sense?</p>\n<p>David: It makes sense to me.</p>\n<p>Isaac: One question that I have: Did they prove the decidability of the ambient isotopy to—did they prove that using the Reide-meister moves…</p>\n<p>Greg: Yes, decidability was done via the Reide-meister moves. Basically, Reide-meister moves are the name of the game, at least as related to computability.</p>\n<p>David: Originally, it was this guy named Hopkin back in 1957; it was right before I was born. He used three-dimensional topology, but there’s actually a lot of other proofs now too. There are some other proofs that don’t use it.</p>\n<p>Christian: Do the Reide-meister moves correspond to certain concurrences in the calculus?</p>\n<p>Greg: Not exactly. They’re not at the congruence level for the calculus, but they end up being transformed on processes that are property-preserving in a particular way.</p>\n<p>The other piece of the puzzle that is necessary: all we want to do is to encode a knot diagram into a process. That’s a lot easier than encoding a knot into a process because a knot diagram is essentially a quadrivalent graph.</p>\n<p>David: You can have lots of knot diagrams, but quadrivalent is the one that everybody’s expecting.</p>\n<p>Christian: What is a quadrivalent graph?</p>\n<p>David: Every node has four edges. Basically, you project a knot onto a plane. There are lots of ways to do that. But for most of them, what they call general position, you’re going to have nodes that have just four edges kind of coming into.</p>\n<p>Isaac: Four is important cause that represents a crossing of two pieces of the knot.</p>\n<p>Greg: That’s exactly right.</p>\n<p>David: Typically, from opposite sides, so to speak, they usually separate each other so that one will be broken. So you can see which one goes over.</p>\n<p>Isaac: One goes under, one goes over.</p>\n<p>Greg: Yeah, exactly. It’s really interesting. If you look at these in the light of proof nets, they’re suspiciously similar to proof nets in the sense that you’re visiting these things in both polarities. So Gerard’s long trip condition on proof nets. There’s a version of that that holds for knot diagrams, which also shouldn’t be too surprising given the decidability. That’s a digression.</p>\n<p>In general, there’s a way to convert every graph, not just the quadrivalent graphs. There’s a way to convert every graph into a process. There are lots of different ways to do that as well. Cardelli, Ghelli, and Gardner gave one encoding. Our encoding is a little bit different. You can use these different encodings to go after this problem.</p>\n<p>I was interested in a circuit-like encoding that had some other intuitions behind it. If you look at the diagram of a crossing, you can think of this as like a circuit. Picture in your mind’s eye, you’ve got four terminal points on this circuit. You have a rectangle, and there are four terminal points on the rectangle where we might attach signal.</p>\n<p>Let’s say for fun, we’ll label the rows X1 and X2. The top left is X1 and the top right is X2. The bottom left is Y1 and the bottom right is Y2. You can imagine that these might turn into channels and processes. We want a model signal flow from these terminals from one terminal to another.</p>\n<p>Economically we might connect the X2 terminal to the Y1 terminal; then we can connect the X1 terminal to the Y2 terminal. Does that make sense?</p>\n<p>Isaac: Yeah, so we get one of these crossings.</p>\n<p>Greg: To make it a crossing, what we want to do is say that the signal going over one of those, diagonals is always free to flow and the other one has to wait. so that if there is signal going through that wire, then it must be synchronized and wait for the signal to flow. It’s like a traffic light. Does that make sense?</p>\n<p>Isaac: Yeah. So this is to distinguish between the over-crossing and the under-crossing.</p>\n<p>Greg: Exactly right. The over-crossing always gets to just go. If you have some signal arriving X2, then there’s no additional synchronization to get over to Y1. And it works bi-directionally. If you have signal arriving at Y1, there is no additional synchronization required in order to get the signal coming out at X2.</p>\n<p>Christian: Are the nodes the processes and the wires the channels?</p>\n<p>Greg: You’re going to think about it slightly differently. You’re going to think about a process that represents the circuit that we just drew. You can decompose a knot diagram into a bunch of these circuits that have all been wired together. Does that make sense?</p>\n<p>Isaac: Yeah, definitely.</p>\n<p>Greg: Without peeking at the paper, I would encourage people to write down a Pi calculus or Rho calculus process that does that—that models that circuit that we just described. You know that you really grasp Pi or Rho if you can write that circuit down. I used Dowker-Thistlethwaite codes to provide an algorithmic representation to wire up all the crossings correctly. If I just give you their end crossing, that’s not enough. You need to know how the crossings are wired up because there are lots and lots of nine crossing knots.</p>\n<p>For people who are interested, there’s a beautiful site called KnotPlot, which provides a little zoology of all the crossings. The trick is you have to figure out how to wire up the crossings. Ss I said, there are lots of knots for a given number of crossings. As the number of crossings goes up, there are more and more knots that have those crossings.</p>\n<p>There are different encodings for knots. I use the Dowker-Thistlethwaite codes to give me a spec that I could just walk over and then calculate the wirings. That’s another piece of the puzzle that you need. I strongly encourage people to look at this issue of writing down one of these circuits as a process and then writing down some encoding of how to wire up the crossings together.</p>\n<p>Once I had that, the proof looked relatively simple. Then David said, but what about…and then he mentioned this phenomenon that I had never encountered before. David, you want to talk about the Perko pairs?</p>\n<p>David: Sure. These things are interesting to look at. Originally, you see the whole storyline. You go back to a P.G. Tate; he was inspired by Lord Kelvin to look at knots. Kelvin thought knots were at the core of chemical units. I don’t think they had the atomic theory quite yet. Anyway, Tate made this big table of knots. He went through by hand and made all these four vein graphs and played around with changing crossings, making them over-crossings or under-crossings, looking at all the possible things.</p>\n<p>Then a student of his called Little proves Little’s Theorem, which turns out to be false, but he said that if you have a knot, where something called the ride, you travel along the diagram in a certain direction, and whenever you come to a right-hand crossing, like when you go over an over-crossing, and inter-crossings going to your left, that’s positive. Then if the end of crossing is going to your right, then that’s negative. Then every time you go over an over-crossing count all the positive crossings as pluses and negative crossings as negatives and total that up, you get what’s called the ride of the knot. Little claims that he had proved that in 1899 this is a knot variant. The minimal ride you can get out of any of the diagrams for knots, and that will be unique. That’s what ends up being funneled.</p>\n<p>Anyway, there’s this thing called the Perko pair. It wasn’t discovered until the early 1970s by Kenneth Perko, who was an undergraduate at Princeton. Vincent has a really strong tradition in geometric topology and knot theory. He had done some work with Milner, but somebody told him to go through this table and understand how Conway had calculated these invariants for knots. So he went through and found knots that have 10 crossings in a minimal presentation that there was actually a duplicate pair that had escaped notice for basically a hundred years. So it’s called the Perko pairs.</p>\n<p>There was a guy at Princeton before Alexander, in the twenties and thirties, he was a giant of geometric topology. He calculated these things called Alexander polynomials. It was a brilliant idea. You calculate your polynomials and if the polynomials are different than you know you have two different knots.</p>\n<p>But it is possible for two different knots to have the same polynomial. It’s not a total invariant. It doesn’t identify them. It goes one way, but not the other. Basically, Conway, when he was a high school student, went through Tate’s table with the 11 crossing knots and he calculated the Alexander polynomial and found duplicates. And he got rid of those duplicates.</p>\n<p>Apparently, he didn’t look at the 10 crossing knots. Then Conway’s table made it into this textbook by this guy named Dale Rolfsen. It was a bible of knot theory for a long time. I actually have an original copy from 1976 and that pair made it into this table. By the time Perko had discovered this, it had made it into this book. So it was kind of a big deal that they had found yet another pair. That just shows how hard knots are, to come that long to even notice. Plus they were having to do all this stuff by hand, so it wasn’t so exciting. At least hopefully with this, you can automate it. They have programs now as well. I don’t know if I’ve actually counted all the 18 crossings yet. I know for sure they’ve been up to 17. It’s huge and it gets really complicated very quickly. I think there’s an exponential algorithm for numbering these things.</p>\n<p>Christian: Do we still not have a systematic method of classification?</p>\n<p>David: Not really.</p>\n<p>Greg: It’s a really interesting point that you raise, Christian, because one of the things that I wanted to provide was a shift in a perspective on variants. Whether you’re talking about the Alexander polynomial or the Jones polynomial, there’s something interesting about polynomials. Polynomials have a notion of dynamics baked into them. But that’s not the way in which the polynomial is being used as odds and bearings. I was really interested in invariants that are about behavior. The behavior of the algebraic gadget is the thing that is the invariant of the knot. In some sense, it’s shifting from this view of the knot as a static thing, just hanging out there in space, to something that is dynamic, so there’s signal flowing around wires. It’s a very different way of viewing the knots. The invariant becomes a different kind of invariant.</p>\n<p>Isaac: It’s funny cause that seems more consistent with how to view a knot anyways because everything I’m looking at is like: start at some point on the knot and start traversing it in a particular direction. That’s a signal.</p>\n<p>Greg: That’s exactly right. As a result of this shift in the way we think about the invariant, this other thing comes along for free: the application of the spatial logics and the Hennessy-Milner logics. Because they classify processes.</p>\n<p>Isaac: Right.</p>\n<p>Greg: So in fact, you have these lovely theorems that processes are bisimilar if and only if they satisfy all the same formulae, and if you also have a theorem that says two knots are ambient isotopic, if and only if they’re bisimilar, then we get the Hennessy-Milner logics classifying the knots. It’s a systematic classification system.</p>\n<p>David: There is some type of classification; basically, every knot is determined by its compliment in three-dimensional space as well, but it just changes it to another kind of hard problem.</p>\n<p>Greg: Push the bubble to a different part of the carpet.</p>\n<p>Christian: Each polynomial would determine a certain class of processes?</p>\n<p>Greg: That’s one direction. But again, as I said, I’m less interested in that direction through the application of the invariants from Algebraic topology, or knot theory in particular, over to process theory. I’m more interested in processes and Hennessy-Milner formulae applied to knot theory.</p>\n<p>Christian: I was just wondering what you meant by the polynomials having to do with dynamics.</p>\n<p>Greg: I’m just saying that inherently, there’s a notion of dynamics that comes from a polynomial. We can calculate: I plug in a value for the variable and I get a number out. It is a program, but that programmatic aspect of the invariant is left by the wayside. We just look at the structure of the polynomial.</p>\n<p>Ever since Lambda, something has been staring us in the face and we’re not seeing how important it is. And that is the structure-function relationship. If you shift sciences for a minute, when you move to a place where telos and purpose is the name of the game, then the structure-function relationship leaps out in stark contrast.</p>\n<p>If you’re trying to understand an organism, something as simple as a virus or a bacteria, the structure-function relationship is essential. Understanding how a structure gives rise to a behavior is part and parcel of biology. You don’t have a good biological account until you have some kind of handle on those kinds of questions.</p>\n<p>In a mathematical context, a lot of that gets lost. The structure-function relationship of the polynomial is not giving us the same kind of information about the knot. Whereas the kind of knot invariant that we’re calculating with the process, first of all with Lambda and Pi and all of the computational calculi, the structure-functional relationship is right there.</p>\n<p>There is no way to get around it. What you see is what you get. That’s one of the things that’s really interesting about this approach to computation. There’s no hidden extra state that you have to keep around in your mind in order to understand how the thing behaves. It’s all instruction. That’s sort of the essence of bisimulation.</p>\n<p>Bisimulation is capturing the content of the structure-function relationship, not just in the Pi calculus, but in all of these computational calculi that have these properties. Now what we’re saying is, that structure-function relationship can yield interesting information about structures like knots outside of physical structures, or at least physically realizable.</p>\n<p>That was the other thing that was really important about this work was to try to say that Pi calculus isn’t just for computation anymore. We can use it to reason about the physical world and physical dynamics, which was another underlying point of doing the work that I did with David. It isn’t just about computation. Put a different way, if you want it to go after Wheeler’s bit-for-bit program, here’s a tiny baby step in that direction. How do I get from computation to a manifest physical world? Here’s a baby step that will do that.</p>\n<p>Isaac: I agree that this structure-function relationship is an important thing. This bisimulation is capturing that in a really essential way. I see the importance of trying to bring that notion over to different areas of mathematics.</p>\n<p>Greg: Yeah. In particular, if the physicists really are serious about trying to get a physical universe rising out of computation, then ultimately they’re going to have to deal with exactly that. Bisimulation says something really essential about that. Exercising these kinds of ideas in these nicely constrained toy problems like ambient isotopy, which is not so much of a toy—David’s history just shows us how subtle it can really be. But it’s so much simpler than trying to model what it’s like to chase a dog through a park.</p>\n<p>David: Right. It’s amazing how difficult it gets so quickly.</p>\n<p>Greg: That is precisely right. Anyone who’s had two or three dogs meet in a park, and they’re all on leashes, they know precisely how tangled things can get.</p>\n<p>David: For sure. Especially Australian shepherds. They’ve got a lot of energy.</p>\n<p>Greg: They certainly do.</p>\n<p>David: I’ve been thinking along similar ideas from a slightly different angle. I don’t know if I have it as well-formed as you do, because you obviously thought about these things much more deeply for much longer, but just how some mathematicians think of function as rules versus the graph of a function. One is more dynamic than the other. There’s a tendency in modern mathematics to focus more on that function of a graph, and you lose something by doing that. Obviously, there’s a lot of power in that too.</p>\n<p>Greg: Yeah, I agree.</p>\n<p>David: I think you’re on to something here. We’ve got to keep pushing on this one.</p>\n<p>Greg: I agree. I want to revisit the encoding, but really use Rho calculus as opposed to the Pi calculus and see if something changes. Because the square root calculation absolutely did change.</p>\n<p>Christian: In the context of bisimulation, what is structure and what is function?</p>\n<p>Greg: The structure is the structure of the term and function is the evolution of the term. It’s very hard to get mathematicians who are outside of the computational realm to understand the payoff. You can use the Hennessy-Milner logics to go and do classification. What’s true for the mathematicians to grok is, there’s this whole other line of work that has to be done to go and do a bunch of classifications, like classify various families of knots with these formulae, which is a whole extra line of work.</p>\n<p>It’s already interesting just to have this cool theorem, and then point out that when you put the two theorems together, the one about bisimulation corresponding to logical characterization and bisimulation corresponding to calculus. When you put those two together, then you get this classification scheme. But in order to be received by the mainstream mathematical audience, you have to take this additional step, which is to go and classify different families of knots using the Hennessy-Milner formula. I just never had the time to get right. It’s a lot of work.</p>\n<p>David: It is. It’s the same here. I’ve got these other projects that I’ve been working on, but I’m excited to come back to it. We’ve been meaning to do it. It’s always been there. I’m excited about the Rho calculus too. I looked at the paper that you had written a long time ago.</p>\n<p>Greg: 2005.</p>\n<p>David: I had a lot of background information that I needed to assimilate to really understand what was going on in there. I re-read it last week after that route processes posting you had. I’m very excited now.</p>\n<p>Greg: Oh, that’s awesome. That’s good to hear. We’d like more mainstream mathematicians to have that response to the Rho calculus paper.</p>\n<p>David: Right. Well, someone will be like, how’s it going to benefit me? There’s always that aspect of it too. They’re so invested in their own research programs. Anything that’s going to either take them away from that or threaten them, they might not react well. But hey, you can’t stop the truth from coming out.</p>\n<p>Greg: That’s exactly right. Science and math proceed at a particular pace. Hopefully, that pace is mostly governed by the process of pursuing the truth, which in the case of science is the scientific method, and in the case of mathematics is publishing and reviewing proofs. It is slowed down quite a bit because people have tastes. People want to look at proofs that are in areas that they’re interested in or are popular. The process doesn’t proceed exactly ideally.</p>\n<p>But as Christian and Isaac and I talked about, it is a different kind of governance model. When a community is interested in the truth, the kind of governance that you get is very different. It has that going for it.</p>\n<p>David: There probably will be a shift coming up, like in the Homotopy Type Theory. I see more of computer science and mathematics getting closer together like they were more so at the beginning of computer science.</p>\n<p>Greg: I think you’re right. I’m delighted that the Homotopy Type Theory is getting the kind of attention and engagement that it is. To be honest, the LADL program proposes a completely different notion of type. At some point, I really want to compare and contrast notions of type from Homotopy Type Theory.</p>\n<p>David: That would be interesting.</p>\n<p>Greg: I think Homotopy Type Theory is still beholden to or captured by a notion of function.</p>\n<p>David: I agree with that.</p>\n<p>Greg: Function is just not the only game in town. In fact, if you look carefully at most computational phenomenon, it’s very far from what goes on. We have lots and lots of intuitions about functions, but nature has other ideas about how to scale.</p>\n<p>David: Exactly.</p>\n<p>Christian: You say you want to expand this knot idea to the Rho calculus. Does reflection add a whole other aspect or dimension to that interpretation?</p>\n<p>Greg: One of the things that I was always really interested in was a kind of recursive knot idea—the tower of knots—where inside the crossing you have a tangle. One of the ports coming in, you could fray that wire into a bunch of different wires. Those wires could all be intertwined or tangled. Then at any one of the crossings of those wires inside this crossing, you could do the same again.</p>\n<p>David: Have you ever seen the picture of the Alexander polynomial?</p>\n<p>Greg: That’s exactly right. It becomes a recursive or fractal-like construction. In the same way that in the spring we talked about this tower of computations, you can apply the same idea to knots. Instead of stopping at a crossing, you can virtualize what the crossing is.</p>\n<p>Christian: Could you elaborate on that just a little bit?</p>\n<p>Greg: There’s a way in which every knot corresponds to a braid. The braid has N points at the top and N points at the bottom. You could think of every crossing in a knot as like a braid. In fact, you can generalize it from a braid to a tangle where when the signal comes in, it doesn’t remain a single wire, it gets framed. Inside a particular crossing, you could have arbitrary complexity of a tangle. Does that make sense? Can you visualize that?</p>\n<p>Christian: Yeah.</p>\n<p>Greg: And then inside that tangle, you have a bunch of crossings. Those could also be tangles.</p>\n<p>David: If you Google Conway tangles, there’ll be some pretty decent explanations of it. Some good pictures. A picture is worth a thousand words.</p>\n<p>Greg: With the Rho calculus, because you have reflection, you can model that. Whatever channels you’re using for the signals coming in, they could turn out to either be or transport tangles at the crossing level. The reflection of the Rho calculus gives you an edge or an angle for you to express recursive knots. Those beasties are more satisfying because I don’t have to have any atoms. In some sense, the crossing is like an atom. Then I will boil away the atoms if I can.</p>\n<p>David: Right.</p>\n<p>Greg: The intuition goes back to Greg Chaney, who was certainly a mathematician after my own heart. He points out that wherever you have atoms in a theory, whether it’s axioms or elements in a set theory, wherever you have an unexplained set of gadgets that you start off with as your ground, that represents the risk of your theory. So I’m always trying to minimize the risk of the theory. That’s really all the Rho program does. The reflective program is just about minimizing that risk so you can know exactly where the ground is. Like in the case of Rho, the ground is zero. That’s your only risk. The idea of zero is not too much of a risk. It’s a little bit of a risk, but it’s not as much of a risk as an infinite set of names that has essentially unrealizable properties.</p>\n"}},{"node":{"id":"f5a0030050ed84790f7758e934de3c6f","title":"RCAST 38 - RADICAL FAULT TOLERANCE","path":"/blog/2019/08/14/rcast38/","date":"14. August 2019","timeToRead":25,"author":[],"excerpt":"Greg Meredith discusses calculating the square root with Isaac DeFrain and Christian Williams.","content":"<p>RCAST 38: RADICAL FAULT TOLERANCE</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 800 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-2b6db4b0dab30836a2c41e2e654ad200'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-2b6db4b0dab30836a2c41e2e654ad200)' width='800' height='400' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAgAEADASIAAhEBAxEB/8QAGwABAAIDAQEAAAAAAAAAAAAABQQGAwcIAAL/xAAyEAACAQMDAwEFBgcAAAAAAAABAgMEBREAEiETMWEGQUJygbEHFSIjUZEkM2JxksHh/8QAGgEAAQUBAAAAAAAAAAAAAAAABgACAwQHBf/EACQRAAEEAQMDBQAAAAAAAAAAAAEAAgMRIRIxQQRhcQUTFDKB/9oADAMBAAIRAxEAPwDY1f6qslvq5KWtuUENRGQHRt2Rxn2DzqdbLnRXSAzW6qiqYwcExtnB8/prVF5rLZQ/abdpb3Smqpdu3piPf%2bLYmDj99Zfs9q0k9cXCps9urEtEmISsagrEWwV3c8DgnjOAdB7/AE5oh1i7oHivCN5IGMj1kkYHizwtva%2bJv5Mnwn6arMnrm0rb56tBUSJFVCkwFC7mIJDAsQAhAOGJAONSqX1FHW3Ka3JQV8ciwCdpJETYEYHachj3wR8tc/48rcluyoe6w4BXOtKzuF2Uta2R2EmAdKg1giBFnqG8t1Gz9Bov05eVVXpZQSahkVWUKpXntkkd%2b2cjT8lczJEiJd0jRyv4JGywz4YZ%2bLtjsPbrRngnZCjKH2Rs1VXsfy6aGmP9VKc/7OoNVLWycTS0TAe80Lj66b%2b%2bKh%2bss8VyeBpHkjAk5AOwDJP6AH/LQt%2bvc83QSn2QtCvTfqFdzEY5PPfg/wDdNrsnE910HD6eWm9W1d7QTSyzoUMZKhAMAf393RdH6Jp6K7VdXSm4xwT5ZqSKp6UZPOOVOTjJxntnxq869rPh1koxfFfgRe5zninFVNfSNqjieKktk9HG8axOKap6e9Vzjdg8nkjnSVDbKagZ3pKF6fFKtKD1AQscYbaMZ8nnzpsbfbn5aq1K93a6yioEyQnqmRWG6MLghdp9nukfPOpWGSdrrcMC8k5UIjaNguVo6iVWRoGcMpDAgdiO2lfvq/zxsgmqHRu4EY889vJ/fREZmIG0SfIY1Mo5JIJ45WEx2HO1n4Pg%2bNHpJQoKUmS73tZAzySArt2gwqAu05GBjAxjRcyTTzPLKGLuSzHHcnU6f%2bJnllVyhdi2wHhc%2bweNYHgkxyxI%2bLStJf/Z' /%3e%3c/svg%3e\" width=\"800\" alt=\"ladl\" data-srcset=\"/assets/static/rcast38.82a2fbd.c959f7674bc7f2971a5dca7ee425b45d.jpg 480w, /assets/static/rcast38.775f9c8.c959f7674bc7f2971a5dca7ee425b45d.jpg 800w\" data-sizes=\"(max-width: 800px) 100vw, 800px\" data-src=\"/assets/static/rcast38.775f9c8.c959f7674bc7f2971a5dca7ee425b45d.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/rcast38.775f9c8.c959f7674bc7f2971a5dca7ee425b45d.jpg\" width=\"800\" alt=\"ladl\"></noscript></p>\n<div class=\"soundcloud-embed\">\n    <iframe \n    width=\"100%\" \n    height=\"\" \n    scrolling=\"no\" \n    frameborder=\"no\" \n    allow=\"autoplay\"\n    src=\"https://w.soundcloud.com/player/?width&#x3D;100%25&amp;color&#x3D;%23ff5500&amp;auto_play&#x3D;false&amp;hide_related&#x3D;false&amp;show_comments&#x3D;true&amp;show_user&#x3D;true&amp;show_reposts&#x3D;false&amp;show_teaser&#x3D;true&amp;visual&#x3D;true&amp;single_active&#x3D;true&amp;url&#x3D;https%3A%2F%2Fsoundcloud.com%2Frchain-cooperative%2Frcast-38-radical-fault-tolerance\"></iframe>\n</div>\n<p>Greg Meredith discusses calculating the square root with Isaac DeFrain and Christian Williams.</p>\n<h3 id=\"slides\"><a href=\"#slides\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SLIDES</h3>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 763' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-8d0a6953efa12d357cf32c746afe8f4b'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-8d0a6953efa12d357cf32c746afe8f4b)' width='1024' height='763' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAwCAYAAAChS3wfAAAACXBIWXMAAAsSAAALEgHS3X78AAAHaElEQVRo3u2aeU8VQQzA32f1A/i3CUgMqBFFwAOVQwXl9AYUuUHBC1C5FVBBEQG5PPAWa35NasZ1eW%2bXdyDGSSa7OzvTaTudTttpRGKUHz9%2baHXfvd9B//m9e8d64UQbn4gSCcIA9xkGYT%2bmROuztrbm%2bx5v9c4digHuYJBaXl7%2b7R9tVr5//641CKxoSAXFJxocF69oTIiE2QJFRUVSVlamdXV19RczPn/%2bLPX19XLjxg358OGDLCwsaNvbt28Vkfb2dpmdnZWlpSU5dOiQrKysyLt37xQuDPv27Ztcu3ZNYTAG2E1NTToWWMzT1tamc71//16f9Hvz5s2v7/n5eYX35csXmZub%2b9UnFrNDMSA7O1suXrwoeXl50tXVJRkZGVJRUSHnzp2TXbt2SWVlpf4vKSmR7u5uqampkQMHDsjx48fl9evX8uDBA9m9e7cSl5mZqf0fP34szc3NcuLECdm%2bfbtMTU3JzMyM7NixQ65cuSInT56UM2fOSFVVlRw7dkz27dun8zMvbcBjftqAR9v58%2beltrZW0tLSFB%2bTiLglAGJu3rwp%2bfn5cvbsWV3Nbdu2yd27d6W6ulqR2Llzp4yMjEhnZ6cSBdNgFAxglehXXl4u%2b/fvl/T0dGXG0aNHpbS0VBnHan/8%2bFH7FBQUyOjoqOzZs0cOHz6sBNGH5/DwsI6B8TDl6dOn2q%2bwsFDnAg/whSnRlGcoJdjf36/vY2Njcv36dbl06ZISzzuEQfj4%2bLhO2tPTo%2b2INeL76dMnFXsIYsVZ3du3b%2btqwSzG8f3s2TOdA0YPDg7qSkMskgFMGAYMiLx69arU1dWpNPINXrdu3VKYL1%2b%2blMuXLytj4pIA7/5xlctWKdGUbSQs8XZEeSvKzK/dqnu8JapftG%2b3xrUF/vXynwGp2n/xWnfxGE6bLgF%2blltQQhNhOf4VEoC1x5GEpRakIC0cnckkPqUMwAbASMF2oHLOY7WZAdTa2ip37txR6xHrjbMcQwp7wdXkW5YBX79%2blXv37qnhhPGCf9DS0iIdHR1y//59NXowgXmHOX19fVphCtLzz%2bmARBozW%2boUMHEOYty47Vt6C8SK/AQ9ArfsFvinDaF4VzeRIa%2bNSEgkEaLt7u3NKF49EYYRkUQQb4VQ1uLiYkqrayzF8vwSygB3whcvXmgIqqGhQc92Ah6pqMxFUISgC8zwMiEpDPASjwFz4cKFP6LFqSwEXIlCETUKy4RIPOJPjI%2bApPsvViDDgifeAIpfQCVWkMXd%2b/SFCcQTw2yDDW0Bi/0T88N8ddtiaeuNMjwaTDOViRUSjQ4TuotLAojlmxKKRqT7j7sBgpggyjsr9urVKw2cPnz4UL%2bBSSCUIGkY2OgBFiVaEDShOgClxwVIECQpEAfhRG4hjgsSCMUBwjl69OiRPH/%2bXCPDOEHcI4RlbmNjY/IZYOKOBjbtG%2bQcpp3VtfEcm1RE2HulZmK9njLzO4onJyeVke6WTIoOsAmfPHmiTHAZE6uaonQVnNvmKkhjTKxqhRgCV2lJVYJeruPPE8zYzAKjsEOIHyT9GPRqZgoTE8XhhgcFR0AjFZW5EHnsEPRHSgwhPx/fIj7sQeJ%2bqawozZSbwl4O/w3XZRshPm532OuOBrECk1HjcYn/B0T%2bM2CdqE5YkQqaEbYRHRMrsywoDX7vkfWsraDX0H573z0d3DvBjVyNexkRq68f49z5vc/fJACDgqSjZMXg4zF0wuDE9VsoU9iAY5dza4NVhWdGsANPjdQYKgGH6elpveHp7e3VikPDbQ/pMfTHMMEpGRoa0nQW3GX%2b4TMAE8cHWBguuK84RtYOofQbGBjQPqS8AIurNOZmxXCeSKzCEMIAwhIldQZcwB/8iBSZVwgeGGpkjNGH4AkmPBlt4B3x7g0m4Ad3dgQ7%2bC4uLpbTp09r4hL29pEjRzT4wD0exg%2b5OPQlcQrmYaDwD48OQsjzASbZXiBNPhFP7v1IvaOd%2bWAghs2pU6e0khU2MTGhBBJ2Iy2O/lidMBfGMJY7R7xAcGEeGIQnCUMgFNh4mGScgRd3kvTHBf9DCZoj4uoC2nAyzH/H6nM9Np604ekZLHOTEUf%2bkcRkeXt8A5N/9KcvcEGYAhy%2byfezOfxE2nWY/IrlEDKP9WVuizn8dgx69xgEW8YWyY/c7lpBzMwT458hbZOyUrRbeMquxEGAdxgJcYw3d9pCbIgnsKiIq81D1hf4wCRggA9w6Gf48Q8ms%2b0g1DJbjRG0IyVRj0HjJiKWm5urYrZ3714VLYIZJD2yFXiSL4gos8cRayJEXGkjsryzNdjH9EdMyStE7LOyslR0ye9jD7OfEU/Em3xA9jB6ICcnR9tpoy/9EGnyCpkTmGy9gwcPKh6MBw9EnjxEaGALkr/I/mcseLn0RtYzbRFZ9h0EoERQdqwaAHk3JUY/FBQRHvYeCo3/7GVWlxXlH%2bNQSKwiyPCfPc8qstKWC8ictt3IHWQMFV3ASqOUGcfK0o6%2bYU7gssLAYBz6B3zZXvxHgpAEqhs4jaTyKvpvKkbjT13OFXX3xd1nAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCast38-RFT1.82a2fbd.aba63c76a1e78b4fe52a2e24e465bf7a.png 480w, /assets/static/RCast38-RFT1.cbab2cf.aba63c76a1e78b4fe52a2e24e465bf7a.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCast38-RFT1.cbab2cf.aba63c76a1e78b4fe52a2e24e465bf7a.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCast38-RFT1.cbab2cf.aba63c76a1e78b4fe52a2e24e465bf7a.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 570' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-41fe7f4bf1bead6042aff4abffe825e8'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-41fe7f4bf1bead6042aff4abffe825e8)' width='1024' height='570' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsSAAALEgHS3X78AAAFZUlEQVRo3u2ZB08kPQyG9/eDOAECHb13RO9H770cHe7o7ei9F396LHk1DLMgYMt96CJFM8kksePYHr%2bOT8JQnp6e/E/q4%2bOj/z1Qdc4LZfFJmIrXZgJt0CmELyEA28zu7q4cHh7K6uqqbG9va9/19bXc3t7Kw8OD7O/vy8XFRViFEBYBoPKUgYEBKSsrk%2b/fv0t%2bfr7Mzc1pOycnR9vZ2dmSkZEhi4uLz%2bZ9CQ2gXl5eysHBgSwvL6s2HB0dyZ8/f2R6elpmZmZUMyYnJ2Vvb%2b/r%2bYBg%2bIz/vQ8I9Beg7axf8i/wt5Z/AgimWvMrC1d1mtFnzMUXjM1HsnzWZ/g%2bunnnP3pjY0OGh4elp6dHent7Q16hMz4%2broGT16GETADuzV9dXUlVVZU0NzfL/Py8rKys6D%2beZ6iqrT81NSU1NTXS2tr6qRD63QJwCqG4uFjW19cjagIjIyPS0NDw7GDeI4R3mwAOiNLd3a2nQLm7u/Pbovt/buPddhsozGW8cwOB1uV5f3%2bvY1paWuTXr18fCp99H3V%2bdXV1CmKcmuHlHAlrie1R3ZOTE7m5ufGvhwltbm7K2tqaLC0t%2bb8hBGfbfaJuU9za2pK2trYXTjFkAjg7O5OmpqZnBJ1EnW3ie%2by0vLxcNQYMgMawSRBhR0eHOrXCwkLdCL6EMQAkwwRep%2bqkcXx87PcF7/UDHxIAzNfX1/tV0K0BzrGAHwAPTNK3s7OjGwUI4cURAt9o22men58rbH4tj%2bCkx5omgJBrgNk0KmewFUF4xfPukzO7NebRBC/Y7PYVgaodQFdXl6LJkPsA54mQyEBtOb1IloWFBamsrAyoiSGNA1DTkpISTXTg5Pglhqv%2b/v1btbC6utqvlRGLBHFuFqGFq0KPP0VYI0GvYCjSJexYwC0Er4RGOKohws%2bCsqDmA97K9Qez/kuIBFsA7jDWbVdv9Xu9ByPP4EX/NdpvfXfz5nsry/MaGPHqey3Z6VXdAY%2bXur8212vzbn7cc5zC8H32NxLK9PdbvPAdQPWeVLp7zAsBgPBqa2s1tgbIEJuD4mZnZzXw4MkFB6AFJEcA9PPnT2WEcHR0dFTjf%2bJ8Kt8JWghenMiPfgM7ZJRIcjCGCJPLkb6%2bPn%2bczzzWhqexsTEdy5rQgV57e7vGBRS%2bwTdXbNABuLEHMlYWN7zQALcKDQ4OKsZOS0vT6yqwNldXqamp8uPHD73JKS0tlfT0dElKStKsEIKJi4tT5snU0AdiTEhIkIqKCklJSdFrMMZ/%2b/ZN%2b/Py8lRwJFZiYmIkNjZWg5yJiQl9chjMTUxM1PWysrKUZlRUlBQVFSlfQ0NDym9/f7%2bCKPiDFjglPj5e%2bQZZQps9ufMRPi8E587wmh05Ex%2b8g9c5Mftm6oiGwDwnatCXcXy3y1DmgCPo4505nLShQsbYRamBJp70Q9f4MEBEQQBGi%2b%2bMRQNYx9Zw71c1wO7oLEkBM0bQwI5TbSz2hqAJIpANosIwAxMmddsszDMfVbYCL5iJFegz3o0cmQtdaIJJ2Cx9dtOMEEyYRtP2xV6h7zcBVBZ1RBVRY2J71AV1LSgokMzMTL21BXZicwAgVI053PBiKjyxRVSTNkgxOTlZVZY1UUHG0Aed6OhoaWxsVNvmtpjx0MEMoI1fgQ/MCD4wBejxDg38BmbEGPjhO%2bvwnpubq6aL%2bjOG9TAraJNDpG3m4LMkBIkJ7Ilc3%2bnpqToMmCA7A9rjHUmTjsbmcEY4QvqApDhK7NbWYLOdnZ1qpwZcGAMDvDMH7bD5OCnGIRDG4UDRDPiyG2Oe2DproNq8wzv%2bB15oIxBMD7r0sVHaaDaHB220Cu2l%2biJ9sRHp8h%2b38L6GLqi3cAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCast38-RFT2.82a2fbd.7a1053eb4fa1bc1b63f894823c64aae0.png 480w, /assets/static/RCast38-RFT2.cbab2cf.7a1053eb4fa1bc1b63f894823c64aae0.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCast38-RFT2.cbab2cf.7a1053eb4fa1bc1b63f894823c64aae0.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCast38-RFT2.cbab2cf.7a1053eb4fa1bc1b63f894823c64aae0.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 452' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-57b4788a9e54a3c90efa53b65608aa2c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-57b4788a9e54a3c90efa53b65608aa2c)' width='1024' height='452' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAcCAYAAADRJblSAAAACXBIWXMAAAsSAAALEgHS3X78AAAFKUlEQVRYw93Z%2bU9USRAH8Pn//w78BQ0BlPtGBFEBBQ9OD%2bQSkFNFQOnNp5PaPMcZGHadyexO0unX/aqr6/h2VfWbUmrQ7%2brqKvfn5%2bdpfn4%2bdXd3p5mZmfTy5cs0PT2dhoeH07Nnz9KPHz9%2boa/3r9RoA/z8%2bTN9%2bvQpvX79Or1//z6tra2lubm59Pz58/TmzZt0eXn5/zTAbZRqlPJ1MUAIr7%2buQUKldt2aehin9CcVLwp5kzK3bcGvfK%2bmMEA9PXQTwprGABHg/HZ2dnJEF9j%2bVMNve3v7NyM0zREI5dfX13NaOzk5SV%2b%2bfElfv379u52dnaVv3779Mmccc%2bjL38f86elpevLkSc4cxf2aCgFy/OPHj6vSXVxc/Oa1ON%2b1/vD//v17cyEgBDk8PEwvXrzIzwqa8kD29OnTNDY2lj5%2b/JiNxauLi4upr68vraysZNSg2d3d/S2TRIGEv32a0gDHx8e5ugsDFFObMcWOjo4y3cHBQdrf30%2bfP39Oe3t7GerGlFMMlafKKJBmZ2czj6YzQAjDAJubm3XJAIIghDQ0C9Ra2ASdc05IhlDuFturV69yqzRfPlfeeF4QdHRuI89NRirdBuKVCpPySi5%2bAW2wV/tHKx9Xa1KpFmP84hfxpVL1WJz7RwaopGxs%2bl/71YKI0k0eD8VB8P79%2b2lkZCRNTk7mdASScr5edAbV8fHxHOlHR0fzLa%2b/vz9NTEykhYWFPHY0FDbG6AYGBjIPV2Q3QwXP1NRUGhoaylfkR48eZV6O1erqau7Nef/w4cO8lixLS0s5m6AdHBz8JVVeh4hSrbcxxQglCUFQG4KmKyxlQFuQ8s7YuQZbKU%2bK0yuS0OitfffuXabDS8NDWnz79m3my6BoGAfdxsZG5o0G/fLycv6egMZeES8YWiyqRa%2bqR2Brayt7iMKs6pnVGYEXeZqglIMA1ocM3v7w4UMWkLfMoaO0Od7Di5coYz0PBnKstQckQA8F1QfQQA7oYRBGgB4Gxx9qyIGXjy2e9YGkarVDVQOAEC8xhM14MDwcHvIOMowdEV7iDeUsb2no5Xe5Gz2lGUJJK13iSziNkdQI6O3Jm95biw9%2bvC644uUZajyTgfHQ4483WfDiCHyrGqA8mseFJphQjIK8RxDzkZZYnjK8Ahk8wEsU4EVGRMtghDPPq%2bYIZh%2bKmkOvRc2vOLKO5%2bPYMSBE2AtSzKEPecjKQHpHAT/7BAKK2UtfqpYmWI7HGUCgAU/KUoAwoOsdQQhLAc82IwjBjSNOxOcvxqEwpfQ8aM76WOMY8ahzTQH7h0MoorcHo5MBX%2bsExaLRBeyQh1GqpkFMMaIUpdXoSlWwAS%2bQdiT0GKH3Pm5voMm7xkpWvYLFHMEjGFrrPV5uhviY86zZS0ODp3dkQB9B1hryxdGwDiLMeUZrrXHcNKPUttY7soc8pbhhRRM4eJkXHjx4kFpbW7MFjXt6evIc6wpubW1tqaWlJQeajo6O1N7eno2o501r7t69m9HDi9ZGELX23r17mZbnIr3xPDSYB%2bHOzs4cMNEHnJ193vUO397e3vzc1dWVAx56ARQtpMWxMian4Hnnzp0sV%2bm6u3WxyqoUQOK%2bXm1dec2upuBd6OAtfbw3z1vFuWLlV8uVuXhpKv9IU4xv8V0iH4Fqn5gq3durXUKqGal8zjGDAqiAJl7kKV7kKTEGskK468rYWi5C18kUz6VaLxb/tsUHE%2bcvav2IAea0QEAUMY2Qq%2bF/jNSLvqn/GLnNlbqRX5j9/gJOzNRO2kBPswAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCast38-RFT3.82a2fbd.bc84738ecaa3bcc7b4fcc255a5f316df.png 480w, /assets/static/RCast38-RFT3.cbab2cf.bc84738ecaa3bcc7b4fcc255a5f316df.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCast38-RFT3.cbab2cf.bc84738ecaa3bcc7b4fcc255a5f316df.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCast38-RFT3.cbab2cf.bc84738ecaa3bcc7b4fcc255a5f316df.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 558' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-18762b3fec850ed1ae5671d0d0788536'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-18762b3fec850ed1ae5671d0d0788536)' width='1024' height='558' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAjCAYAAAAkCQwqAAAACXBIWXMAAAsSAAALEgHS3X78AAAEK0lEQVRo3u2ZZ0/tMAyG%2b9/5AfCBIYZYYu8h1geGQGwEYu%2b9997DV49Rqqq3Z1Hao3PviRQldRPXeeM6tmNJwOXr68tuqZ%2bfn1qdfa9nJ93J57eLJSEUv8IHtfhQADDCX1xcSH19vayursrOzo5cXV1pn7q8vCw3NzfaX1tbk/39fZmcnJTp6Wl5eHhIbQ0wgl9fX0tZWZkUFxdLUVGRgpGRkSGlpaWSnZ0ts7Oz0tbWJiUlJVJdXS0VFRWSlZWldAq/Q0oDwAKenp7k8fFRjo6OtOX54%2bND39FSXl5e5PX1Vd7f3%2b02bQP%2bBRtgTgFj7Z3PsWrKa4AbkCB3NCkAeO1yWNUvqNZv7KTbwQmrejlLiQJh%2bd31oI6nRIuRI1EQrN9YPEfV6OiodHR0SHd3d2i1s7NT%2bvv75fb29i8QAtcA8zE8uJqaGpmbm5O7uzu5v79X7y2Myre2t7eltrZWNjY2fgSCbw2oq6tTtzbZBTlwt0PRAIPyzMyM%2buyUt7e3uK12Ik5OLH7Ggzw8PJSenh5bvkA1wADAf4iP7xY02omBtoyPj8vCwoI9F/UdHh6Ws7MzBRJ3eGxsTM7Pz6OC5AYDm4D7HPgvYADA6DmjtWiCUlgQC%2bvt7ZWRkRF9Xlxc1D68Tk5OFJjj42NpaWmJGwAjDwAQY4QGwODgoBohr2PIS/U5LQDMBDhoAwI7gx40gD5tLCfL%2bR6%2bgJjoUejLCKKyTU1NNp3/MVp1guR%2bNhGh07mJxc/JY2Bg4Eehs%2b9jcGpqSpE3xigZBR%2bkq6srOccghf%2b4sbFRfwn%2bcQQKuvIdDCe2gtYrLgkcADfiu7u7dporjLq5uaknhldsEmowlOx4wE/22Hc47BURhln9hsSW/OclDUAagP8dAK/UVhiprHjo7jvDaKm3n8pthZF7TxkNOD091cwOgQXZHVpcXIITsi8EKOZ2h0iN8QQyz8/PGslBo4Vm6DgqhL20xA6Xl5d6/0fEBx8ySgRFjCUSJKlhIrqDgwOdu7W1pfeH0Am%2bcLiQg1QY85ARGjkBvoO8vGM88xmD/FTWBX1vb0%2bWlpa%2bATCODC7mxMSE3s9xf0efC8rc3FzJyclRv58xzc3NkpmZKVVVVdLX16fPhYWFOg46eTpifu76GF9ZWal3feXl5ZpEIWzlTrChoUHf4c6yQN7Dk2%2btrKzoO%2b4HkYf7Q/hBo9/e3m7zGxoakvz8fFlfX9f5AEmQxhrgDa21tVXy8vKkoKBA%2bRGSz8/Pf/8CRgPYDVDhBUkK0IIGY9xO0OReD2H5CDQqwuKaEhOwu%2bw0uwHN5O3os5PsDDzRFDOWXWccNCr82CXeMw9tYYcZi1bAB5n4BvO4TebGGa1DdjST%2bABZmWfkp9JnjcxFo9M2INIFh9OqRnqO5p56WfFIVj6SRXdb/3h4xSunGfMHY7YItYzbJ70AAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCast38-RFT4.82a2fbd.fe6ddf7b0fc762f6f435016cca6ec09c.png 480w, /assets/static/RCast38-RFT4.cbab2cf.fe6ddf7b0fc762f6f435016cca6ec09c.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCast38-RFT4.cbab2cf.fe6ddf7b0fc762f6f435016cca6ec09c.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCast38-RFT4.cbab2cf.fe6ddf7b0fc762f6f435016cca6ec09c.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 581' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-20273e2039e5524da56a9149d71a73a9'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-20273e2039e5524da56a9149d71a73a9)' width='1024' height='581' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsSAAALEgHS3X78AAAFqklEQVRo3t2ZVW8rSwyA8/9f%2blCVmZlUZlCZmZmZmXz1WXK1Z5WkabubtHek0Q7YAx7zBiQK5f39Xb83NzcyPT0tp6en8vT0JJeXl3J8fKz929tb/QKztbUlJycnH7iG70cJRJMAXDYvL0%2bSk5OlqalJMjMzJSsrS0pLS2V0dFSKi4ulpqZGcnNzpbCwUF5eXv7B//MEeHt7k9fXV7m4uJCrqyt5eHjQS9orPz8/K2cwRtvwYkoA5yF%2bWr9DOC/2DLd34CsvGKrvB8c49wjV/srZQ%2bFFzAGw5fn5udzd3WkfVmbOvrD39fW1toGlMgebw9bMGxx9Y3FrMw4O8FYeHx91jgIcleIUFTuLfRnna2M/5gBDRmZTU1O1orCmpqakoqJCldnq6qpUV1dLSkqKlJSUSF1dnXR1dUl2drb09/dLd3e31vn5eWlsbFQl197eLm1tbVJZWal9cCYmJrQ/NDQki4uLkpaWJq2trTI8PCwNDQ0619HRobDNzc0yPj4uBQUF0tnZqXCsV1RUJC0tLbrP%2bvr6p5YkYgJA9aOjI1lZWZGDgwOts7Ozsru7q%2baMy2G%2bFhYWFG5vb08GBgaUK9D%2bm5ubauaYp9LnksvLy7K0tKSHZd7Gzs7OtG17As8XYrPPxsaGrg0MuOy/v7%2bvuMAcHh7qvnDWj0QgGjIfLSvkiRUwWQ7WthoO1gnnrl/FCbav%2bww/VoLfpXawzSPhpEjN159yhJyXQbOvra2pYkOvIMfI/tzcXFQ8P88I8JmDFGyOgnJEmfX29iox6KO8sCxm8j5b5yuOji8ECLW5czyYTDuLjVtx2%2b1Ql/TaKQt4wdY4L/f39x/jxsruwjiOFC9vxen4uIkSypsDjujRiBZTDtje3lYnB2eEOjk5%2bWGrkWvsMjKOrcZvIBJEB0Aw2B%2bnB3Ho6%2btTm49zQ8iMHR8ZGVE4%2bozjc7DO2NiYOkXOkDlmBMBhwUnhMlzQnCScHV6XF8dR2tnZ0QNDGIiGy4prjYcJHuOsBQxODTjkBuAWCMjl%2bVIhFMrTi3yBJyLwlx0lz5SgW%2bHZOC8J2yKzaH9iCL68tuHxquQIsAZwgLG5wbjXjbkVCOf0uCPImZkZlWWCFQIg9AUyj4ggAogGugJdQAA1ODiolwcOQhkB/HKSfHGEnNqawqta9sdyg1zegixzX5kPZk3%2bZEosnIhEUj6L4n41AdyXR8Zha0wkppK4H9PGayPnyD6xPOLCHP1oEcFXDrCDY7YwleQHiAFQhOgFTCSiQGyPH4AuwEQCG42UuBIgnBb3otorWlrL6fqGe2G34otkn%2b%2bcL/B/SHh4wgG8iKWl8ORgTzQ3GhstDhwyyyvaOOyLfaePNqdNGsoSocyDg9eGx2e4tg57wf68HuPA4Q%2bwn6Wz8ASp9q8AXNrszzltbTxF1qRvcYIlUsFhDcZsHTtLwBnQlJWVqXxWVVVpQjIjI0P/5JCQREbr6%2bv1zw3yS1KSZGZ8fLz%2b0cHHJxmZk5Mj%2bfn5CgsOf36AY5yEKWsmJibqOuyF24v9B4Y9UYb4CCjEnp4ehWctFCgwCQkJikcyNikpSdLT03WeNmflLMABU15eLrW1tXpGzszaKGHG4%2bLiVCf9owOgin2hJFxg0RtUtVe2F4eyUB8YtDl95sE16ts8L8aXOaq9KoU%2b81RwjOvYA3zjGIsdeEnWYi/jLNoWPzjX4azAsBcwrEvlvIzFXAfEWv8EvPz19ZVfYqEco1AJFr9%2bnQWi8bLG9rCjiZCzMOZMcNB2usSWADHFbKLoBRf5HgsQ6xPg8MeGIAjFgxeIXJJDoKJkUXg4TCRQCIxQoJY5wjnijxC4JEIsaHLmBH4lAVAymDVMHWYK0wZBuKRxA8rI/jkCS5uvM0tsmWNTdLRZxzjp1xHAfSinN%2bhOgEbqTvulRH0PhoIp2VAKLBic32nx/wAt5v7iQcpMtAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCast38-RFT5.82a2fbd.852caa485823bcd5a6f5cdc1a40cfdb2.png 480w, /assets/static/RCast38-RFT5.cbab2cf.852caa485823bcd5a6f5cdc1a40cfdb2.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCast38-RFT5.cbab2cf.852caa485823bcd5a6f5cdc1a40cfdb2.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCast38-RFT5.cbab2cf.852caa485823bcd5a6f5cdc1a40cfdb2.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 529' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-25dbbcec6821488eeb6261efd3241593'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-25dbbcec6821488eeb6261efd3241593)' width='1024' height='529' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAhCAYAAABpwa0hAAAACXBIWXMAAAsSAAALEgHS3X78AAAHK0lEQVRo3u2ZaVMiSRCG%2bf9fN2J/wnzYcDbG8JjxvkFRUTlVPBEVFRUVQUUqN5%2bSYlpsDhdxdjeWiIqqrsrKzMrKfDO7Ccgn/Ywxn7Lnvb/AZx7%2b%2bflZZmdnZXV1Vfb29mRtbU1WVlbk4OBAksmkxGIxCYVCdh7azzDCpxqAnkNOTk7KxMSEDA0N2TFztPn5edtmZmakXC7/dwzwfwh4PMDbqtWqbd6xd%2b5f5QHNDuk312lrtfejjBPolZs33nKr2/ajaUb30eHRMw/o1e%2bjw%2bPDDfD09CRfvnyRhYUFiUajkkqlZHx83D6TAkF7UH5ubs7OTU9P23meSY2kxR8/fthssLOzY9Pj8vJyPUNMTU1JqVT65xqA/L2xsSHhcFj29/ftIcj7NA53fn4uS0tLMjo6KmNjY9YIGIVDHh0d2RoAw7Fva2tLtre3JR6PWwPB4/T09ENrhEA7EHtP87pnr7NKN8DqPW%2bgV3nXC1iNMhrXGmO62fpH6NhoCF8PwE1PTk5sPN/d3VmXQynv%2bPLy0rosNI%2bPj3JxcWH35fN5ub29rdPjstCenZ3ZNYfmjNlbLBZtzx5ks4d15h8eHmxFiMzDw0PLnzFrNzc3lpYe3siHR6VSseuFQuHNOno09QA3ATGgRJxSphJ36XTaxiSABhN65olf6OkBKGKcWAW4ADTqengFg0FLQ49SHIaYBwCJd7DCYQZ7UZ55sIT3BGTDhz6TyUgikajrxhi5AC14AT2YAVgyDz94A7yRSMQau6UBsD4KgLTcLI3bonc/bsXV6vTOC6Djmb303AYHxmg8c4PQIoOb5IZpzgO86M4c%2b9kHjftBwzzrbsxebt3J9q4jh/NAA5/GcOsYA1hz7u8X5417m/FqV9E1yvBejB%2butMMEv/W2GNDrYuZX/fyKtUArBCd%2biDNii5gl9okr4tBhAzl8ZGTExjhxR1wTl8QkLk8uJ%2bezj9hkL/mfuAQjstmsbG5uWswBN%2bAHLXO8MkOzu7tbp3evzcgGI9jjii7iH5zhNRuAhh69Kazg2TIL%2bFkKJgAT4OGEwgglMAZKohwKLC4u2jkOQjGDcOhBX56ZR0H4oSRGAtjABwwDvav6kAe4YjxAlX3r6%2bt1oGWedeTDB0NxSRgDsIMHWcx9exgcHLSGbyylW1aCnYQAKY5DAzLHx8f2IBgN70BJPADkdg1DcDh3YEALOgyFgiiKMV3GwSDwpWFo9%2bGEvRwWo0DHGpmlbQjg2Q0hHugkVvze1GyIqPX7%2b/utEl/7%2buTbwICk8RhVbFzdHmW5HcKCMBkeHrZhgjvz7D6JcZP00HHj7OHm8BRulgPzTOjgzu5dgoZXsE4D%2bb0VqdVZQfWZZz9jYIBuSmDvz1bnD5oaC9f6UPllIPeq1Q5ux%2bc5MYf7Yo6zYu6L9flAt%2bWlteNVXmR%2bWkxoXszigkhwVmQpKJqQa4pVO05T3rTnly79UmRL/a8uxUyOioRDIomoyMaqyPS4SCr%2b2gMoGnAh8rArJFzud0pQ7Lhn6C819qvXV/I01C%2bPZzkpV3Sv8rrR4ucutiGl7wPWBSvannSvK5ooT%2b/v721xAj/XO/mu6KrUDPisfaXW%2bEEP7jQWTOyDty2KdFxVjywPfpOK6kjZBtebRy2QkDk6LGYvLQFnUeKY2APAAB0AhvgDpEBUQGpF0dWlrbimnUmNu1z/V4nPzUokmZKQxmNEada0zUVjEv79Nzldj0gyvSMR5UumINZdVmEMaPJMXIMN8GcekEMO1SV6rCteuCxC9gA/crmcxRl0BQPYz3hEcSKhwJpPJSXz9Q9ZVvkhxRd0W11alODyigQnxuVxYuSnB2BFUBvrcjtYEgGubC3rjRe5PVd2UirrvrvVsBTV9W95wdFbuVfLF0plObnIS%2bFbn9xkj6RMqav8SImONwchBVIqc3useT0D2ehWoaRVnrflB8ujqOvOk9iLJ0LPfsbX19f2Au9Ux3s8VG%2b6kDmUPGWy6niluh0eZSWvF/e8v/tODCB2VIE3P%2bJ%2beVEkf6E%2bVtACQnPu9JjI7na3qPbSJzVeo2t/jwf6jH%2b3GCXrGv8rSzqeEklvvScLvKBptb9PjFrN1NKIcfjAmjKvLsxINTQn1Y2IVFWwqQFgq48nLZtDcZVZHfjzp9xOM1UtG1ndDvbEXJyLUayqqqc4XoFO6uVXHyTU5U0283oP6QWE9cm1pnaTfp%2b6m8l5NVfDKJM5EFNDbmlnCO%2bH051tMVsp/6Kok2%2bCb5SD%2bWZCjLokCpnY%2bkvvFMIrvAVTFy9Wb4ywlVS5Kq/2Kt7sK099fjtl9Wv1Fhp471tUfa6sboSbl0vvy8tdvr3hwkZd2sSjYhRzTMkjnwIHnRR7TCRsQ6edboFOweiVMo3f7Hr4V1YzuUZzu9lMvnhgImZD0BqFPncixvPlp5VugW5upBd/VbX7kOnn7tYbG8LCGzqtdPsLY5HWqQA01icAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCast38-RFT6.82a2fbd.994aa73140837f8bc9800fe121167fba.png 480w, /assets/static/RCast38-RFT6.cbab2cf.994aa73140837f8bc9800fe121167fba.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCast38-RFT6.cbab2cf.994aa73140837f8bc9800fe121167fba.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCast38-RFT6.cbab2cf.994aa73140837f8bc9800fe121167fba.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 777' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-15d1f43d07a9d737a1cd56dd58cdd963'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-15d1f43d07a9d737a1cd56dd58cdd963)' width='1024' height='777' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAxCAYAAABqF6%2b6AAAACXBIWXMAAAsSAAALEgHS3X78AAAICElEQVRo3t3ahYocSxQG4Hn/RwgkEIiREE%2bIu7u7u7trXb6Cf%2bk0M7Ozm5nezW0oqsurjvzn1OnulQ6e379/1/zTp081NevT9vPnz5p//fq1/Pr1649xk3x6XRAgB7p06VJZsmRJWbt2bTl06FBZvnx5WblyZTlz5kzZs2dPWbduXVmxYkXZt2/f1OEnTYTedJxrbqRdbte369rvuP/gwYNKCPn9%2b/fLkydPyrt378rLly/LvXv3yrNnz8rz58//kIJB8w7bR7%2b%2bf00Am0pd3pt5MzXr8j5TtRk2V3Mfg9b%2bawK0dfhffKbb%2b8gScPTo0bJ69epy5cqVmo4dO1bu3r1b9u/fX27cuFF1Wjp9%2bnTtK798%2bXI5ceJEFfXjx4%2bX27dvl2vXrtV%2bBw4cKFu2bKm6DwMuXLhQjhw5Um7dulXfU6d9165d5erVq/XdeuYy5507d%2bq7vtY5ePDgVLs9vH37dnwqcP369bqR8%2bfP1wNb0IYtihAIok1uE9oc0rtD2zwd175jx45y%2bPDhOlYf78bu3LmzHirzIuLevXsrwRBj%2b/btU2MeP35cscSezp07V%2bc4depU2bZtWx2P%2bCMToK1Xg4DvX3za52qnXvtw/YCjDWKDCDKMULHz/eZqAtqgPYxb9/%2bQgG/fvpWnT5%2bWz58/18rkP378qCnPixcvajL59%2b/fy5s3b2piwoxxgC9fvpTXr19X8dPmXV/Px48f67vxHB5jvCNO1mEq067u4cOH5f3797WszV4/fPhQ96vO/K9evaq5NuvrZ2zMq3r7VrYn60r22LOhixcvlq1bt1Z9okN0FtDRo5s3b5ZHjx7VMtCiZ/RP34AZndZPMh4A7d69u%2bov3defbY8ea%2bMH0HH6C%2bBgjEPQcevCC232BRi1nzx5sgJc1oVD5gimwCJr2KM9yPUzTl97sbZ9OiPw7OEaCtkgqqA2KnJQ8iAS7qkPJ1FZmeOCI8Ym14ZDymk3B64YK%2bmn3FxHOZyWZz17tK/Um8%2bezWOMNcJVXNZHm1w/46yPEXHH9TX/yFbg/%2bAT9MWAYQg5iptJj0Jt%2bhVvLBzFgZT1aRMwl6OApBy3PThkDmPM3QbmjBm2x%2blSbxBnh3G6eYOjZ4AKRvAP6N769eurri1evHgKD9asWVMWLFhQli1bVnVSHf11IXIBchHauHFj1eVVq1bVsjkXLlxYddxYWGWctkWLFtWxS5curdgxW%2bnsjWpOBklAU/eTcBCmQN7ou7IElbVDbrmkn7I2EmE%2b5eg3KaPbJIIkwA2A591YUjYxAszW7s83n38sEoAr0bumnka/cUI7xFUOYqdP7Hn8C/Xph8NB9VF0epDnOjEC0DM2ltjxC%2bgiG3v27NlqUwUx2GrvzE1stD5sOqxgw%2bEEH55Ywwdzsv3uAPp2GQ2aEQFsLF4dLuMWncY9h2H3m2PijSGYHNE4P5EgdSSKFNBj8yJUUwLmBQGm2wwRJ74sgRudMpBCHFwNx5W1NUNkw8JnXV3CZm0FslFuqusn15jI46ZrLZXgehJ79WIBkZKmVLWjPV0DbG8cyDvTzTps85LVfOIyz/uocDbHduO2QAcnhti7EOG4yww9DyC6fCQ4QnK0ww%2b5i5NLCmli%2b/8ZAjBtwBHyy5URJZ4ikIQPQFBCEOUmp%2bEDgsASQPg3nt2cqEDeHTz3c4dUZi0cTL0%2bAFK7OpaCRye%2bl1vgdKH22bRNVAIChsSWmBN/vjvbDv3ViwuyEMSfqDtwxD2BTm2J4fULjw8Lnf%2bNp9obF/cHPbxDqen59XvUNz3F5k2vCZCZq00UdWnv5yVO9NNYFrF5NziSwPMDhPyAmEeeHongENF1KkISmEo3ROoh2sO7hBckhXepzLQqA1pjpUSAeJTGJ8qjPmG4iROgSWWLOrSQluSwdN1hHNYBiTld5yFyjJSBIBB1a3SIxBRhRYggN1fmMN78CAhAc6PkazTvLJ1KQIIUkveE2og%2b8bbpZgDUQRI200YyECphrYh7DhcrY76oVq7RIWhnGNBvIRwEaJs2barBDeJJBXAvQRMcEgR1WFJC/PkQOB/gNEZ7AqjmJAXEXj9tVEI7lRAoUUcSOrMCoyIuQGpegIaNDwepUsLn7Sdg1w8km/PP6LvAuA5PJOkkkyfBA2UgSBVwjw4TWWKtjhRox3l9ARqOkhrtpMY8zKUc2MlJVL4PkiDeZj6X8T1GvVCNnQA2ECsQz88mo6f0mM7HIZIT7/wfgHCIo4/EAiAS4hnv0CGeeamZhCDA1ZiY2k4wYJiuEX9Ap00uJX6XJ98bAF/QXa4upiz4gmDxF/L1KoTPOHkiUJ1LgE0RYeDkiw5RJsI4i5M4BayIMMBir3HcZUobThN1lyP9SEu%2bFKsn/jitneQou4ZrB6bGkzxS0hkB2i4xIJPyrSAeYExX4vy4a4wc4YBavuUFBHM/CMfzA1XzG2CixTGL%2bozqBI3lMpRFbIRezrcocWcSgEsRvem%2byXeRJqYC/SbPh8aufm2b03hA%2b68xT9dBjDkPiLQPmfB2l9HcOZcACNwGvWE/VQ57n61%2bzykBgB5b3gS9QfeAfuHvmUZxJhUynzUBmv8PNQ80kz9DM679L1IiQu0LUbM8ZxIwiBvNug0bNtR/A1xjeYSbN2%2beCmy4uHjnsiprE8Xh3fEc5bw57e4VvDt1uTqrnxcqMOzH5XwSkxzGAcUB8hcoiwE0c5nh/Uluc1xgbm7uCLn85EfqZuR4zsPi4/hKNNP4wrgx4D/F%2bX9M13t%2bvAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCast38-RFT7.82a2fbd.b886d99d8d0482a37396c0ecd508f27c.png 480w, /assets/static/RCast38-RFT7.cbab2cf.b886d99d8d0482a37396c0ecd508f27c.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCast38-RFT7.cbab2cf.b886d99d8d0482a37396c0ecd508f27c.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCast38-RFT7.cbab2cf.b886d99d8d0482a37396c0ecd508f27c.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 611' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-653acf9db0fad4c9ec933ddb61ed6dd0'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-653acf9db0fad4c9ec933ddb61ed6dd0)' width='1024' height='611' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAmCAYAAAB0xJ2ZAAAACXBIWXMAAAsSAAALEgHS3X78AAAER0lEQVRo3u3Z104kORQGYN7/YRBCQiC45IILJCRyzjnnHDz6vDqoVNPVy7A0XcVOSZarbZftk/7z292TOvi8vb3l%2buXlJZdyX7G/OP47n57vUMDR0VHq7e1No6OjufT19aXFxcU0NjaWhoaG0uDgYDo4OOiKEnq%2bywP29vbS5uZmrvf399P19XU6OzvLgh8fH6e7u7ufp4A/FehHhkAIdXh4mLa2trLFr66ucr29vZ2tf3Nz8z6uKx4QGy2Xdn1/WtbW1tLIyEgaGBjIsT88PJz6%2b/szJsCA5%2bfn35T2letXlZ6vXuT19bWyHRZ4J2xRSPHfaUErFdCNuKvTkz3g8fExzc7O5piE0Ds7O%2bn8/DzX0Bp6Q2zxOjU19R672pXp6em0sbGRVlZW0sTERE57EfPGzszM5Hp1dTWnP2udnp7mb9TalpeX85zWV%2b/u7maskDW8W98c1je/vfk9OTmZ9yDEzDE/P5/H6rfe%2bvp63pe15ubm0sLCQp5POTk5%2bUcB3FOHgTZgMpMS3iZMArR8pM8C%2brXHWIurx8fH88ShHP3GKTZMWTZCCAoirDHarKHNxi8vLzM4%2bkYbhRLKuz2a235DOO1kUMxpPYr1jf4wlHXMSbHk%2bBsC8UIjtBNAxSsC0OK9WNoB3leC53/55iNzvivg4eEhf/DZXP/VpcgJOpGWf8sCgFDsAr%2bLi4scj%2bIUBihiUC1uAkBabbBxIRAbBywAheCBygCEEgJh9akBjffwmEYrIAQIVIaWhHt6esoKCERFVgL9jf1MCHSL739IAcHUCB7sjLVZn3cQWh05VKoSBp06GH17CJQfiiAo64v/yOu8gydE7qUE%2bZrC1DAEVgBVPEI%2bhyndvPT41GHIQ1BeEMyL8AQkWJEYRT8WRjEUJnQwPkqSYimktgqoOsKyLlcnEMEJxZpBNQkXtDk8xBi/47syXtSWCJU9wYOnh4VZkULCpVk/QNO4uPHRzjvivK/2TTFjNMYDCMaS4eKsK75ZmMAUIHX6zdrwQrvxkT7jyqvWCmjFtDw2vrS0lIWTAQjHmhEC4p2CeATvMNY4iovTmDG%2bq60CWgnuwoKgcaHZjqKWzw7FtNqKKNXWA4pnAgpAjT9639euveq9dh5AaNYUz3I662lTcAIKiT84tH3m9FZrDxC7YhZwQW%2bkRvwCMbEtJABbnBF%2bHBUu0uEyFY6ToTrAEPr/76hwsLwgPnGlhRne3t7mFCkDyAr39/fvKVPWaCQVJgz3Z/0gOIQhWHgCD6EEYYMKU0wwwOJFa4Bq44gQDyBM5PoqKuw9DkfGBIOknEZT4WCCrO0361dRYSESnlL8K8z4xlLh8ACuHFdkLE5Qwrs9KlJh7d7L1LjRVLiYAYIKhwJYvUiFAyeCCsc9fiM8oBUV/jcm14oqt2OEtfcA6SuYXytc%2bMj1dZUiaguCxU2K8fJf1Z2466/lYajKZX/y32e/AAidRfAx/%2bz/AAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCast38-RFT8.82a2fbd.9beeda404241737f9644068b67b7ee1a.png 480w, /assets/static/RCast38-RFT8.cbab2cf.9beeda404241737f9644068b67b7ee1a.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCast38-RFT8.cbab2cf.9beeda404241737f9644068b67b7ee1a.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCast38-RFT8.cbab2cf.9beeda404241737f9644068b67b7ee1a.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 783' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-55fd45879b8b915c1ef3e97200d2f2f3'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-55fd45879b8b915c1ef3e97200d2f2f3)' width='1024' height='783' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAxCAYAAABqF6%2b6AAAACXBIWXMAAAsSAAALEgHS3X78AAAFoElEQVRo3u3aaUscWxAG4Pn/f0HIJz8phCiYQAgYcEVxSdTEfTeJaxZ3XM7lOVDSd6KjN2Nm2vEOHE53dZ%2b2q%2bqt91RVW0kl%2bV1fX%2bf57OwsbW1t3ZxXXy8en5ycpMvLy9%2bu/5dfpSwGuLq6yvOXL1/Sixcv0qtXr9Lr16/T27dvU1tbW%2brs7EwDAwOpr68vdXR0pJ6entTe3p6Pv3///sdGqJQNAcfHx%2bnTp09pfHw89fb2prGxsTQ4OJiWlpbS%2bvp6%2bvbtW/r48WOamppKi4uL6cOHD%2bnw8PDpG6AeGLdECIQC5jgWFoY4N5MXZUV5SyHA/OvXr4Ygp1QGCCL8/PlzGhoaSqOjo6m7uzvzgYEAEeO7d%2b8yPwwPD6evX7%2b2RggUlUB2DPDmzZvU1dWV%2bvv7M%2bvbEV6%2bfJmvMYbdAiEWjfekDVA0wkMU%2bvHjR84bWgoBRRIsnlePooFahgMeovhtBmoZBDTj978B7oPYs0XAc1D%2bXwjAqsrL1dXVdH5%2b/nwQEEoqQ9%2b/f58NEFvMbaz8p2xd6hAovmz1nlxdbNSSh%2by25kXpEVBv/n5XUnPXcVkQkhGgrJybm8tNhmg2yMeFw8zMTG46jIyMpPn5%2bXR0dJQbFrOzs1mmSNHC2tnZyXI5ukbF3t7eb%2bFSRE31taYbgAIU1nHRYaHo/v5%2bNgR%2bcG13dzcTpXtUYZubm2ljYyP9/Pkzl6%2bOyR3L0/92KftXQoACPKkkpfjKykqWQcjBwUEeFKT89PR0vgdqFhYWcm%2bOfHl5OaMGEjxre3s7G9D5xMTEjZxBS4GAIol5WUqDNUUhAxJAWr%2bODELMcQ%2bl3QM11q%2btrWWjQYF1UENZcgYjd15PL%2b/RDRCzF%2bdNTUgKetGIccqAO4UnJyfzvZCCGxiAnJI4xLF11gij8Lo1jFCaEKg2gBemhJenLMibDQjgZceU4H338joZbqC48%2bCBCItAiWd4ZnWuURoDeNHwKiOYKYbgKEQJSrnHTsC74l3YUNwgxwtQBE1kEIRHIMezGO709LT5IVC9HxcRIEa9eMQ978XsPsbgTQTnHsdCJrzNUGTmQAJjBJfU%2b1Xn0Q0QJMhzPBqKQAGjhEIGBIjriHlejWtQAQFmMR/D/VBg9jdKRYLxEjzvJW1lEcOMEiwf2yCFhAYkMBA5hZxTECqsDx4phpN7IKU0IeDnhUCzWW2wphugyMz1NjWLRdFtBVTpaoGLi4scy8Hc4h%2bT4wAQFg5iPrI/15Ej1IC162oGpFarbC5jdXhjAPEatYD4jj1b3925GMYFiE1mZw3jMBi5dbU6vHf1D%2b6TN70cppx9nud5OVLaILSYGU%2be73NWfK4qGqO6ErxP3jAD1IpdP8xezOGdU5hhoiKEFIZxHslQvaTXqFCp1IrROKY4ToAA%2b314HS8EF7iH4niEwaKPwCjCRkYIIWZoilLalik7tPWSkzUyTa7cx%2bh%2bcgFKRH1gH7drRG6AE6KHQOHIHRjHNcaxNtYHv1hD4WKaLcdoeAjcZwCK8Khqjnd534hqDwIozJN2BMQICWRCJ7zsWjRNyKGKPNCAWO/qUTbVADwbSvMgD5PF11lejvrAdQajZGSB1kUGaUQNET0D6z2zuh1fOgQYQoHneNAxpQ0KiG%2behwyede4%2bCAlvQwMO4fVIo/0jlNzC86KV1igUVGoxcMw8CaKUEbc86EWjP8Cr8npGoKxz22L0EqIWCLJ0X9QJnml4jtHojzIP%2bjTGU1g6qkKIMEef0DmlXA%2bGj6wyymaed40s%2bMOIXQEC7Cqe1xQE3PVfWrELeMHwKu/FLhBsHsigHARQlMeDK6ylcPCHmXE815roH0ZB1pQQuA364ZFWrRArtdLP6P4GGh7yLfAxRtNCIP6gGK73%2b16tYqhMFeKtCBC7z%2bWfJWqGwFP6yvvoJPhc/k3mH6ZPBljRPgIZAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCast38-RFT9.82a2fbd.53947e1d7f8bc44417af94a8b3322f65.png 480w, /assets/static/RCast38-RFT9.cbab2cf.53947e1d7f8bc44417af94a8b3322f65.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCast38-RFT9.cbab2cf.53947e1d7f8bc44417af94a8b3322f65.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCast38-RFT9.cbab2cf.53947e1d7f8bc44417af94a8b3322f65.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 597' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3bddba426cbfce91b0d7d767f2ffe3a6'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3bddba426cbfce91b0d7d767f2ffe3a6)' width='1024' height='597' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAlCAYAAADyUO83AAAACXBIWXMAAAsSAAALEgHS3X78AAAH%2bklEQVRo3u3aZY8cSQwG4Pnt%2bRRFicLMzMzMyYaZmZkZ6/RY8qrT6ZmdzV02l9y11OruKpftctmvXTXTKgNwff369ZeM7eZqDdTkP3/%2bXE6cOFGePXtWPn36FO0fP34s7969i%2b8PHz6Ut2/fxvvjx4/L69evB8QIA2YAE12xYkWZNm1amTFjRtm7d28ZOnRomTp1atm4cWPZs2dPWbBgQZk/f36ZOHFiPM%2bfPx9jv3z58vsbwPPhw4flypUr5dSpU%2bXWrVsxwUePHpV79%2b6Fge7fv19u375dHjx4EP0vXrz4/T3gfwyoeICbO1fvbK/2V59/hAc0GaL%2b/quuVpNC1bve3jSJH5l8J2PUeXYyXic9uplDq0lI1Q2rrlp323qfVNc0ttrX5P5NMtqNa0ePLvm10yMzSnV8q8la/6WrlVZy7dixo2zYsKFs3749cvPZs2fLgQMHyuXLl8v%2b/fujr6enpxw9erTcvHkzcvfx48ejcDl06FDZuXNnuXDhQqSwffv2lSNHjkTK07Zr165y7Nixsm3btnLw4MGgwVNtcOnSpbJp06Zy586dkKndTc7WrVujgEJDL/pIpWQvX748eKMlWwp1e6endKrPeE/yyfbE682bN99iAGarVq0qixcvDgMYtHDhwhBKsc2bN0cRY7IXL14MOkpcvXq1zJ49O953794d/dOnT4/v1atXl5UrV5YtW7aEYEbEc/369b0TRLNkyZJy/fr1GI%2bvp0msXbs2lGYoY/ChT/JXUGlbtmxZ8KPzvHnzytKlS0MvBmdcBjMH78atWbOmvH///nsM%2bBk5Ocelp4nRLHL%2bieyipO7mqleUgQFVIHJxd1a3wizLlVlUaWrlWNZq%2bGZJtNyOpa2K1VPSGsfa3q0Sd5swYUKUuVxUFbho0aLwuHPnzgXt3Llz44n%2b2rVr4RVWndfgbxwvtNqeXFsInjx5MsIHvT460ePGjRtBRxdeyKP045OL8p0BCBYfSlQCxDBDaKM09%2baSmBK%2bbt26iGfulzHKpSntneLorJIQ4IomjK/J6eOqxpo41884F4a%2bYZNJkW8cN6eTSTG%2bySujtTMg3UwSX3OgL570JENbrwH%2bjotzZTV80yW%2b2uXyTjLtCLsNQzvG/Gbg/m6auq4DbFFdLMptrRprjxo1qkyaNClWZ86cOeGCQsSKsTSXtkJW1zvAGzlyZIQP17QzFAJWWj/vEmZTpkwJTzlz5kyAlTBKGl7jNi7BlbeNGDEiPI8u%2bOd2ulMN8Y0HdKoGs0%2b644LPnz8PrOBK3Bm6SotcTSg8efIkUpB3YMf1YQq3NsnTp08HjdSmjQujdVZw9%2b7d4Ct%2b7RLFN5noyXn69GksgDY0MpdvKRcvNGRVd5KdKtxWXxMfiA3Jz9x/9HW32sVlfYdWjfvqKY/wqLtVvfxMnmiNqZa3ya9avibPKm01lVVpqzKr9FU9q2Pru85eDwBa3MzAdlc1dzflXrwcbdWB8tWrV7040g5M%2b7rIa6odTERIdvKCTv29BhBvQAzIyaFiTAoCdmIMeAEtNQHQAUDKW7WAYy1pRgpVC2T1KK6NA5CTJ08O/glegEyqAoz4aAdybqAJ0FSX5IlpqQ3GSIVovONLN3ykW7RAk96AFPbACTIAs3HStu9Zs2aFfq1qGmEEE4fAwCXzLsCD6lnjmxylgBVQ02cM5AVCCg5jspjCF62xQI3SaDzJAV4MrQ2dCenDkywrqExmYHzx9O2pj8zciyh0vDMikFWAkYl3lsz4Moj5tLoBuEwpXDDztGc1pjKEIHnVpdEwgPY6hmjT11Sm4id03Cby8uXLXgxBm%2bEga2j3LUtVwxBdX3VFq9ORlcukxowZEyvCbUaPHh3lLJcePHhwuPW4ceOChoW5tg2THI5WOAwbNizeuaiT4LFjx4bbZ10wc%2bbM4DdkyJBYGXy8jx8/PsaTI/y4sDpj0KBBQSf1CTkhSIZSGy%2b1CR3UKcOHDw8PTS%2bvnl00psGmswG5l1WtQq6yd3HIwlaJK%2baqoCFEeWosWjQJZNpyZXiXNjT5e4B%2bpbgxXJg3aM93cZ2/JXji5cSZXsbkbxDCBN%2bsSnNRv0uD7XZuYtgkVVcAJTcx3BaAqAw9xaZYFp8Zs7DDRIxxZ/1v1VR1GeNWWwzrM5a8rN8BW2IHj8otrUIKrdg%2bfPhwxDw9yEBHBpkAEW2eXzSFWqvTORqBNhcAhWtTyEQpBUy4ln7IShEGy52cTIKW8bhkIrtvd54ZUFJZLJTc2hkHHzy4PAMYD/VNxrcdqfBQ9nJ3OpCvXajQNc8I9JNZrQU6ngp3W/XV9/k/yutn/vLj4pFZC9TDu9XtOX51sk0lcr3C6otXE59Oh7FNvx10U%2b7Wq9Gufhf4nev/bo/n%2bzRAEkHcdB%2bIC4mhuRu6empzLgCFIXL2Q%2bT8lhEAVKK04iczQ/KBGejdMkIiO9C1kpkFFDD4ecdLNrCjpGtmFm344yHLtPudsaMHmLBSV96GygBLDQAEAZa6wC3XQvakBXpofAM65bU8r1bQBiTxo6CSFZBBcOOUxPgBMSU3FM8jOWBGnnc0aos8hFUD6GdY/W60ahRgymD9NgDryqOsK6WpujBiXe/yvWeulG%2brg94qWiF9zgbQ4SV1Gi/P69fu5kH686yBcTL3u6UxvMjw5BUOW3znfwqMwdtq60dHDv5ZnXZlgD8x/n8YBJtQuC/U7U97t7TdtvX3YKc10Oj7b/pl2PUXKjvFuyAEQpkAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCast38-RFT10.82a2fbd.613c9e4c948f55841d58132d18d824a3.png 480w, /assets/static/RCast38-RFT10.cbab2cf.613c9e4c948f55841d58132d18d824a3.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCast38-RFT10.cbab2cf.613c9e4c948f55841d58132d18d824a3.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCast38-RFT10.cbab2cf.613c9e4c948f55841d58132d18d824a3.png\" width=\"1024\" alt=\"casper\"></noscript></p>\n<h3 id=\"transcript\"><a href=\"#transcript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TRANSCRIPT</h3>\n<p>Greg: The idea goes way back for me—about 17 years. I was hanging out in Harvard, waiting to chat with Walter Fontana and another process Algebraist, just who was interested in biology. To entertain myself, I was looking at analogs of arithmetic operators. It turns out that you can define an analog of the notion of square root. For the process calculi, there’s this notion of running processes in parallel. You have an equational notion of equivalence called bisimulation. You can ask the question: Is there a process square root of P such that square root of P par square root of P is bisimilar to P. You can give a crisp definition of this operation.</p>\n<p>With pi, I was unable to come up with a calculation for the square root. If you turn to your calculator on your phone or laptop, you can press a button and it will calculate the square root of a number. The question is: Could you calculate the square root of a process?</p>\n<p>All this was just good mathematical fun. I really didn’t think about it as having an import with respect to computation. It turns out it does. It’s easier to see if you consider nth roots rather than just square roots.</p>\n<p>The generalization is fairly straightforward. The nth root of process P—written just nth root P—if you put N copies of the nth root P in parallel with each other, that’s bisimilar to P. You can see that this is starting to look remarkably like the kind of thing that we expect of Casper in RChain. We’re running N copies of the node and Casper is coordinating those copies so that the behavior of a single smart contract—in this case, this would be the role of P in the root calculation—only one copy of P gets run even though we have all these copies of these root processes running. It’s very similar to consensus. I didn’t say that very well, but let me check in with you guys. Does that make sense?</p>\n<p>Christian: Yes. These end copies are supposed to represent the different choices that P could make in response to this consensus protocol. It’s averaging out the possible actions that P could have. Is that the point?</p>\n<p>Greg: If you of the way that Casper works, it doesn’t work by averaging, it works by ensuring that all copies agree on the races. That’s really what’s going on. When we go further that we’ll see that that’s exactly what we do here.</p>\n<p>Isaac: Something that wasn’t clear to me, that now is becoming more clear because of how you just explained it: We’re going to have however many nodes, say 10, running all of their own instances of these processes or smart contracts. Ultimately, we only want one of those to actually be executed. I didn’t see that connection between the square root and this coming to consensus on the state. But that illuminated that connection for me.</p>\n<p>Greg: Yes, exactly. All the copies are running, but it’s as if only one P runs. There’s no one place where only P is running. As a harbinger of what we’ll discuss at the end, we need all N copies to run. We’re not asking for a quorum of them. That would be a relaxation of this idea or an enrichment of this idea in some sense.</p>\n<p>Without loss of generality, I want to look at the calculation of just the square root. Once you see the solution, you can generalize it to get the nth root.</p>\n<p>For the most part, you can distribute the calculation through. If you put zero in par with zero, that’s zero. The square root of zero is zero. I was having a conversation with a mathematician friend of mine yesterday. He was asking if there are any other fixed points for the operation. You can quickly see that if something is a fixed point, then it has to be bisimilar to Bang P. Because this square root of P is equal to P and the square root of P par P is also equal to the square root of P, so that means P par P is equal to P, which means an infinite number of them…</p>\n<p>Isaac: It’s interesting too because the square root operator is operating on processes and names.</p>\n<p>Greg: I couldn’t calculate it for Rho because I didn’t know how to calculate the square root of new. Whereas here, because names are just quoted processes, I just distribute.</p>\n<p>Going through it more simply, when we take the square root of a for comprehension, we distribute the root all the way through everything. We’re going to take the square root of the continuation and we’re going to take the square root of the guard if the for comprehension is listening for Y from X, and we take the square root of X, but we also take a square root of the bound variable.</p>\n<p>The reason we do that is because we’re also going to take the roots of any guards. If the guards are bound and then we do a root operation on them, then they would cease to be bound. But if we also do a root on the binding variable, then they remain bound.</p>\n<p>Isaac: You’re attaching the square root to the continuation, so you would need to do something like that.</p>\n<p>Greg: Yes, exactly. There’s one case that’s missing here is that the deref case; it distributes as well. It’s exactly the same.</p>\n<p>Now the interesting thing is when you hit a par. The par you have to break up into two cases. If P and A are separated—there’s no interaction between them, so they share no free names, for example—then you can just distribute the operation so that the square root of P par Q is the square of P par the square root of Q.</p>\n<p>But if they can talk to each other, you run into problems. We can try to distribute the operation through and see what happens. If you do distribute the operations through and you take the result of that and you put it in par with itself, then you see that there’s a race. In the slides, I’ve circled the race.</p>\n<p>One side of the arc can get the substitution of Q1 for the square root of Y. The other one gets the square root of Q2 for the square root of Y. Now they think different things about the state.</p>\n<p>This is directly drawing on the point that you made, Isaac, which is really interesting. We’re going to have to introduce some kind of constraint. It’s a coordination constraint process that we’ll put in par with the operation that distributes everything through. That immediately sets up an arithmetic constraint on C. It’s got to be the case that when you take C and you run it in par with itself, it makes the choice for both copies of the distribution of the root over the four.</p>\n<p>That’s a nice little puzzle. It’s a different kind of choice in the way a choice usually works. We implement this in a cool way. It turns out that join and choice are interrelated. You can desugar join down to a choice. Here, we’re going the other way. We’re desugaring the choice down to a join.</p>\n<p>Christian: What is the join?</p>\n<p>Greg: The join is when in the for comprehension you’re listening on two different channels.</p>\n<p>Christian: I see.</p>\n<p>Greg: You can’t get through that guard unless you’ve got all of them,</p>\n<p>Isaac: Consume two messages at once.</p>\n<p>Greg: I’m using a notation that I developed in the original Rho calculus paper. It goes way back because it’s not my notation, but the superscript L and R are in-lefting and in-righting names. The set of names is infinite and you can create these bisections to sub-name spaces. You can do this in any number of ways.</p>\n<p>You can take the name that you’ve got and put it in the output on one side and an input on the other. There’s an infinite number of ways you can do this, but just know that we’ve got these bijections to sub-namespaces. That’s what lefting and righting does.</p>\n<p>Christian: This is a bijection between the set of processes and the set of processes unioned with itself.</p>\n<p>Greg: It’s a bijection between the set of names and a subset of names. It’s like evens and odds. That’s the best way to think about it.</p>\n<p>We don’t immediately output the choice between Q1 and Q2 over on X. Instead, we output Q1 on the left of the root of X and Q2 on the right of the root of X. Then C grabs the left one and the right one. Since we have two copies of C running in parallel, each copy will grab a Q1 and Q2. It doesn’t matter which one. They can grab its own or can grab the other for comprehension one. It doesn’t matter because each one will have exactly one Q1 and one Q2.</p>\n<p>Christian: How are we getting two Cs in parallel?</p>\n<p>Greg: The root of the for comprehension puts the thing to the right of the equal sign. When you put that in parallel with itself, you get two copies of C.</p>\n<p>Isaac: I didn’t realize this before, but the reason you need that left and right superscript is so you don’t have a comm event on the level of just one of these square roots.</p>\n<p>Greg: That’s correct. Each copy of C grabs one Q1 and one Q2. Both of them produce on a channel, which I’ve called out. Out is calculated from the root of X left and the root of X right, so we can calculate this channel. This is a channel that Cs will use to communicate internally with each other. You can arrange it so that out is fresh relative to the continuation or the Q1s or Q2s. I’ve given a simple definition here, but you can be more sophisticated in this regard to make sure that it’s fresh relative to those things.</p>\n<p>They output a coin flip on the channel out. Notice that you’ve only got two copies of C and you only get two coin flips total. Each one is doing one coin flip. If you guard with a for comprehension that grabs both of them, the other one will be locked out.</p>\n<p>This is effectively an implementation of leader election. That’s something to note about the power of the Rho calculus augmented with join. You can do leader election in one line.</p>\n<p>Christian: What do you mean by leader election?</p>\n<p>Greg: We’re going to insist that one of the Cs recognize the choice. It doesn’t matter which one. It’s not really a leader. There’s nothing special about which one goes first. At the end of the day, it’s like cars coming to a four-way stop sign. Who goes first? It doesn’t really matter. One of them has to break the tie. This is the tiebreaker.</p>\n<p>That’s an important thing to observe about the expressiveness of the Rho calculus with join. We can do this in a single line.</p>\n<p>Isaac: It’s almost like an anonymous leader.</p>\n<p>Greg: Yes, that’s right. In that sense, the leader is anonymous. It still qualifies as a kind of leaderless distributed consensus algorithm. I’m borrowing terminology from a friend of mine, Steve Bures, that I worked with at Microsoft. He calls this case analysis beast or freak. You have two coin flips. From two coin flips you either get beasts, which is a head and tail, or you get freaks, which is the head and a head or a tail and a tail.</p>\n<p>In both freak cases, we say that that selects Q1. Remember, we’re going to need to output two Q1s because each copy of the for needs the Q1. We output on the square root of XQ1. That unlocks one of the fors. Then we go ahead and we put back on the out channel, the coin flips that we got, which will unlock the other C, which will then open up the other Q1 one on the root of X and make the other for comprehension unlocked. Now we’re assured that both of them got the same value.</p>\n<p>Christian: After that, that second one has these kinds of hanging extra outputs on out.</p>\n<p>Greg: That’s just garbage. You can either get rid of it with garbage collection or ace it out. There are ways to get rid of the garbage. I just made it simple.</p>\n<p>Christian: I’m interested in the fact that you’re using a random number generator—why it’s necessary. Is it bisimilar because you depend on the law of large numbers?</p>\n<p>Greg: I thought long and hard about that particular shoot. The randomness is only putting the randomness of the non-determinism back in. Where we took the non-determinism out, and the randomness here, the coin flips are just putting that back in.</p>\n<p>Isaac: It’s like getting a choice from a coin flip.</p>\n<p>Greg: Yes, that’s exactly right. It’s not like root actually adds entropy. I thought, is root really adding entropy? And it’s not adding any more entropy than the original non-determinism.</p>\n<p>Christian: This is something I always wondered about with process calculi and it’s just because I don’t know enough, but the decision on which communications happen, in practice, it isn’t literally random? It’s depending on a choice of implementation, in evaluation strategy.</p>\n<p>Greg: No, it really is random. If you have different machines coming up with different configurations at different times you get different outcomes. Typically it’s interpreted as a race, but the race is going to be related to the entropy in the system. If you always have this kind of connectivity with one machine and this other kind of connectivity with the other machine, and if the configuration is completely determined, then the race will be completely determined. So the randomness goes out.</p>\n<p>Isaac: The interpreter is not literally flipping a random number to see which winner of the race condition wins. It’s dependent on the state of the machine.</p>\n<p>Greg: Yes, that’s exactly right. In the rest of the slides, I sketch out what I just said in English. There are a few subtleties. You have to watch out if the X was at a zero. There’s a corner case there that we might want to look at. In general, you want to look at the corner cases for all fixed points of groups. In terms of C it’s covered by the end left and end right. But there are some subtleties there worth taking a peek at so that people feel comfortable.</p>\n<p>By and large, I’ve had it reviewed by several people and nobody’s been able to poke a hole in it. I feel pretty confident in these calculations.</p>\n<p>If you look at Vlad’s argument for the safety of Casper, it’s not something that I can push through into Hall or Isabelle or something like that. There are a lot of moving parts and there’s some subtle reasoning. It’s not automated.</p>\n<p>Here, I’ve tried to provide a specification of what I would call a toy leaderless distributed consensus algorithm, where the proof could be completely automated. That’s where we’d like to get to. We’d like to get to a version of the consensus algorithm where the proof of its correctness is mechanically checked. Or, if we can’t do that, know precisely what steps in the proof require subtlety, that requires humans as opposed to machines. We know where the risk is in terms of our understanding of the algorithm.</p>\n<p>Christian: This stuff about Casper is probably clear to a lot of people listening, but I still honestly don’t know a whole lot about it. Could we go into a little more detail about how this is analogous to Casper?</p>\n<p>Greg: I was going to do that next. I’m building up to that.</p>\n<p>I’ve tried to make this as simple as something like the GCD algorithm, or Euclid’s proof that there are an infinite number of primes, or something really crisp and tight and simple that you could imagine automating the proof of and why that’s of a benefit to us. This little algorithm is not the same as Casper. There are some reasons.</p>\n<p>The first and most obvious is that if you look at the way names work in the Rho calculus, unless you introduce a process that’s stealing communications and either boarding them off to other parties or dropping them on the floor, all channels are essentially perfect in the sense that no communications are lost nor are they infinitely delayed. Casper is formulated in a setting where it runs over the internet. So communications can get lost and potentially infinitely delayed.</p>\n<p>Isaac: There are no faults in the calculus.</p>\n<p>Greg: Well you can introduce them. You can model these by adding processes that steal messages off of channels. But you have to be explicit about it.</p>\n<p>Christian: What does it mean to steal a message?</p>\n<p>Greg: Let’s say that P is communicating with Q over X. Let’s introduce a process T for thief that also listens on X. Now T is racing with Q—let’s say Q is the recipient. T now races with Q. One of them will win. If T wins, then Q gets starved of that communication.</p>\n<p>Christian: Why can’t that happen in the normal Rho calculus?</p>\n<p>Greg: I have to explicitly introduce them. Whereas in the internet, I don’t think about it as explicitly introducing the thief process.</p>\n<p>Isaac: There are physical connections that could be corrupt or lagging.</p>\n<p>Greg: Yes, exactly. The flip side of it though is it causes me to be explicit about my fault model. In the Rho calculus, I’m going to have to say what constitutes a fault.</p>\n<p>Christian: This is about the fact that the difference between the Rho calculus and the internet is that communication is intrinsic to the Rho calculus and the language itself rather than in the hardware. It’s a huge difference.</p>\n<p>Greg: Interestingly though, I would argue that if you look at physics or biology, communication is intrinsic. The internet is simulating something that is already the case in the real world.</p>\n<p>The other thing is that C doesn’t lie. C is a really stupid process, but you could imagine that there’s a variant of C which goes the other way with respect to the beast or freak casing. Let’s call it C prime. If you run C in parallel with C prime, the network will get screwed up because one side may think that you chose Q1 and the other side thinks you chose Q2.</p>\n<p>That’s the equivalent of equivocation in Casper, which is a slashing offense. Casper is dealing with detecting line. On top of that, Casper is providing an economic organization of the protocol so that agents which are providing an implementation of Cs are economically motivated to have them do the right thing. In particular, the whole staking mechanism and the block fees end up providing a good incentive mechanism so that people don’t right lying Cs.</p>\n<p>Finally, notice that you need both copies of C in order for this to work. But Casper says that we only need a quorum of Cs. There’s a little bit of a misleading sense in the title of the talk. I call it “Radical Fault Tolerance.” It’s a bit of a pun because radical is root. The root of root is radical.</p>\n<p>Christian: You’ve gotten good at these titles.</p>\n<p>Greg: It’s not actually fault-tolerant in the sense that if we shoot one of the Cs in the head, it makes P more fault-tolerant, but not super more fault-tolerant. You distribute the roots around, so there isn’t one physical location where P lives. That’s good. But you haven’t actually made that fault-tolerant in the sense that if you shoot one of those roots in the head, it can’t proceed. It’ll get stuck somewhere.</p>\n<p>Isaac: You only have N minus 1 nth roots, you’re not going to reproduce the process that you wanted.</p>\n<p>Greg: That’s exactly right. In order to make this more fault-tolerant or provide a richer notion of fault tolerance, we would have to offer a notion of quorum. We’d have to build in some redundancy here.</p>\n<p>Of the ones that we’ve talked about, most of them are very approachable with this methodology. The one that’s the furthest down is economics. Introducing economics at this level is a lot trickier. However, one way to think about it would be to go after a reaction rate-based solution, some kind of stochastic solution. That still doesn’t quite address incentives. There’s still a gap to be crossed. By and large, this is a very promising direction of research. At a minimum, it allows us to see Casper more clearly. We can see what it does and what it doesn’t do.</p>\n<p>Christian: In terms of economic incentives, do you see this meshing well with the presentations you gave of the metabolic interpretation?</p>\n<p>Greg: Yes, that’s exactly right. This is a deep topic. I’d like to write some kind of—I don’t know what the right form is, maybe a book—that goes over the history of agency. There are several different notions of computational agency that have been put forward and they all have different qualities or aspects.</p>\n<p>It’s weird the way these different notions of agency have lined up with history. It’s extremely strange for Aristotle to come up with his notion of logical agency that essentially prefigures computers as opposed to the sort of agency you find in linear logic, which happens two millennia later better matches the kinds of machines that they were using in Aristotle’s age.</p>\n<p>When you use a catapult, you know you’ve got the pile of rocks next to you. When you use up that pile of rocks, you know you don’t have any more rocks. You can’t proceed with the attack. Same with a quiver of arrows.</p>\n<p>Those kinds of machines are all resource-sensitive. You’d think that the notion of agency that Aristotle comes up with doesn’t have this weird digital, “I can make infinite copies” kind of underpinnings, but that’s exactly what happens in Aristotelian logic. It’s got infinite copies laying around. That’s very strange. Why didn’t Aristotle come up with linear logic instead of classical logic?</p>\n<p>Isaac: Are you suggesting there should be some constraints on the N of the nth roots? You shouldn’t be able to produce this as arbitrarily many copies?</p>\n<p>Greg: No, I was trying to go for a different point. I wanted to observe that economic agency is a very strange form of agency. There isn’t a notion of economics in nature. There’s survival. There are evolutionary imperatives. But there isn’t money. You can’t get money out of the ground as a natural resource. You can’t get money by growing it. The only place you can get money is from other human beings. Economic agency is a very subtle, strange kind of agency.</p>\n<p>Capturing economic agency is a really interesting idea. If you look at the economics literature, and there are lots of proposals that are built around assumptions about economic agency, but a lot of those assumptions about economic agency have turned out to be bogus.</p>\n<p>I’d really like to capture economic agency as a computational phenomenon: here’s a model of computation that crisply characterizes economic agency and then when we test it against how humans behave in economic situations, it captures a range of behaviors. Does that make sense?</p>\n<p>Christian: I think so.</p>\n<p>Isaac: I also tend to think that it makes sense, but I’m a little bit unclear as to exactly what you mean by “economic agency.” Could you explain that again?</p>\n<p>Greg: Clearly nature has resource-bounded computation. I don’t think that would be a lot of argument on that point. Economic agency is a special form of resource-bounded action where there are incentives as a part of the agents that are acting that come into play. In ordinary economics, we assume rational agents that are trying to maximize profits, which is very far from what happens in the marketplace.</p>\n<p>Capturing that sense of incentivization and resource bound, I’d like to understand that a lot better and I’d like to understand it as a computational model. My feeling is that the tools of compositionality, completeness, resource-bounded, concurrency, and bisimulation, those tools make it possible to go after such a model in a way that hasn’t been attempted before.</p>\n<p>To the best of my knowledge, there is not one instance of a bisimulation-style proof in the economic literature, even though the notion of bisimulation is actually hundreds of years old. It’s been rediscovered over and over and over again. Its significance as an exceptionally powerful mathematical tool wasn’t understood until David Park saw it and then Robin Milner picked it up.</p>\n<p>Those tools give us a fighting chance to capture a notion of economic agency. Then we could use that notion of economic agency in this style which I’ve presented this proof. We inject the economic agency into a model like this. Because we’ve characterized it in terms of bisimulation and these other things, then we can potentially automate the proof.</p>\n<p>Christian: I have a lot of questions, but I was wondering if briefly we could bring it back down to basics and talk about how this is analogous to Casper. Right now it’s not even clear to me why splitting up a process into N processes is a form of consensus. It’s deciding race conditions in some way, but I’m not sure how this is what we want by consensus.</p>\n<p>Greg: What Casper is doing—let’s think about a running network. We have N different nodes. A user of the network comes along and deploys an instance of a smart contract. What happens in RChain is that that deployment will get picked up by all of the validators. In that sense, there are N copies of that deployment of that smart contract. So that I can reduce the number of words I have to say, I’m just going to call that deployment instance P. Now we have N copies of P running.</p>\n<p>If N copies of P all ran independently, then if P had any non-determinism in it whatsoever, then there would be a problem because one of those copies might go one way and the other go another. Casper is functioning in the role of the Cs in our root calculation. Whatever the non-determinism is, they all agree on that non-deterministic choice. Essentially, for RChain, Casper serves in the role of making sure that the winners of all races are agreed by all parties. That’s where we use the consensus.</p>\n<p>Christian: It sounds like this should lend itself to proofs—that everything happens perfectly in this form of consensus.</p>\n<p>Greg: That’s right. By “perfectly,” it doesn’t mean that P is without bugs. It just means that whatever the bugs are, they’re manifest on all the nodes in the same way.</p>\n<p>I was working for a large software company that wanted to do a knockoff of Mathematica. The definition of “done” was “bug compatible.” “Bug for bug.” If you’re trying to take over a market, it actually makes sense.</p>\n<p>Isaac: I guess that that is something to consider.</p>\n<p>Greg: I was just playing around with Christian’s use of “working perfectly.” It won’t work perfectly, but when it’s working, we’ll agree that all parties agree on exactly what the behavior is.</p>\n<p>Isaac: Regardless of if there’s a bug in the underlying process or not.</p>\n<p>Greg: That’s right.</p>\n<p>Isaac: I have a question about taking square roots with race conditions. We did this case and the generalization of the nth root is more or less straightforward. You can follow your nose and figure that out. What I don’t see as being clear: here we have two sends that are competing for one receive. What if the situation is we have three sends that are competing for one receive?</p>\n<p>Greg: I was hoping somebody would ask that. That also turns out to be a straightforward generalization. The two generalizations are the same. When you do the root calculation you’re not just doing it on single races. You’re looking for what I call tangles. A tangle is where you have N parties contending on a channel.</p>\n<p>Isaac: When you’re grouping all the pars so you can take this square root appropriately, you’re grouping them in terms of these tangles.</p>\n<p>Greg: That’s exactly right.</p>\n<p>Christian: This includes not just N outputs but N inputs at the same time.</p>\n<p>Greg: That’s right. There are only two forms of races, and that’s either two outputs/one input or two inputs/one output. It turns out that those two can be collapsed in one. They’re inter-definable. Follow your nose.</p>\n<p>Isaac: This is a tangle in the sense of that really cool presentation you gave at one of the Ethereum conferences.</p>\n<p>Greg: That’s precisely it.</p>\n<p>Christian: Could we have a podcast about that?</p>\n<p>Greg: Sure.</p>\n<p>Isaac: Oh, yeah. Or could we talk about Knots As Processes? I saw your paper about it. I haven’t gotten around to reading it yet, but I really would like to.</p>\n<p>Greg: I’d love to do that. The Knots As Process idea is a lot of fun.</p>\n<p>Isaac: Are those the same thing?</p>\n<p>Greg: They’re related. But the visualization that I gave at the Ethereum conference is the most obvious visualization. All you have to do is take the syntax tree and draw the lines on the history of the use of a channel through the syntax tree. That’s how you get those things.</p>\n<p>It’s definitely worth talking about because the visualization is powerful and that was my point. Even with the most obvious visualizations, they’re so powerful. That means the underlying calculus has a lot of expressive power.</p>\n<p>We can talk about either one of those. If you want to talk about the Knots As Processes, I can bring my collaborator, David Snyder. He’s gotten more interested in RChain recently. He would enjoy a chance to talk with us.</p>\n<p>Isaac: That’d be great.</p>\n<p>Greg: The reason I did that goes back to this point that we were discussing earlier about the power of bisimulation. If you look at the literature, a lot of people—for example, Maurice Hurley—took the extremely powerful tools of Algebraic topology and applied them to concurrency theory and got some nice results. I felt that the direction was wrong, or at least only half the story is being told.</p>\n<p>For the last 200 years, computation has been the errand boy for mathematics. I believe that the next 200 years are going to be turning this around, so the mathematics begins to learn a lot from computation. In particular, bisimulation is one of those things. It’s a really powerful proof technique. I wanted to provide a pathway whereby Algebraic topologies could get a flavor or taste of what a bisimulation proof looks like and where it might be applicable.</p>\n<p>With the Knots As Processes, it was really a throwaway kind of idea where—it was already known since the sixties that ambient isotropy is a computable problem. People use rewrite systems to show that that was decidable. It wasn’t like it was some groundbreaking result in that sense.</p>\n<p>The theorem that we proved is that two knots or ambient isotopic, which is the notion of equivalence in knot theory, if and only if their representations as processes are weakly bisimilar. The interesting thing is that when you start mixing in LADL with this idea, as long as you preserve this property that P and Q are bisimilar if and only if they satisfy exactly the same set of formulae, now you can use formulae as a query language or classification language on knots. That is very interesting. The best classification language or notation language was Conway’s notation, but that only covers rational knots. This covers everything.</p>\n<p>Isaac: That’s the value of recasting certain notions like that. You have all of these tools that seem to separate from a certain area of study. Now all of a sudden become available and start giving you new directions of investigation and maybe even new results for free, which is great.</p>\n<p>Greg: I’m totally with you. I wish I had infinite research funds and 34 hours in the day. Art Is Long. Life is short.</p>\n"}},{"node":{"id":"761a0417c96d73649843c78da68c1899","title":"RCAST 24 - PROGRAMMABLE LIVENESS FOR CASPER","path":"/blog/2019/04/11/rcast24/","date":"11. April 2019","timeToRead":24,"author":[],"excerpt":"Greg Meredith is joined by Isaac DeFrain and Christian Williams to discuss RChain research on Casper. The slides and transcript are below.","content":"<h2 id=\"rcast-39-knots-as-processes\"><a href=\"#rcast-39-knots-as-processes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RCAST 39: KNOTS AS PROCESSES</h2>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 800 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-eb7fed03f98c58e6ab86a3a7ea4aa48a'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-eb7fed03f98c58e6ab86a3a7ea4aa48a)' width='800' height='400' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAIAAAAt/%2bnTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAQAklEQVRYw7VYCXBUZbam6lW9VwhJd9/93u6%2bvdze9z1bJ%2bklgYQsvaX3DiGEJEAAgYABoUBRZHRkFBQUEGp0YGTUB8gqOwGCCZuo89CZNyPj0zc6Mw/cR8SQfud2EMeZmiofPqtObv7799%2bp853zfeecP2PyJzM/ho30Z/ID2at742oF8W/jxwlExUXC4vFIUZFIIEJFYEJECCZABCiOYTiOEbyhOILh8AY/KIKJRJgQdgrnhfCK4iIEEaKoCEERFBNhGIKi6JgfF8C%2buJYjxxYVCVFhEVIsQMFpQcFgwcNAcBTFUYzESZKiaIai6YL3sCVCMAG4yBvgIuGYiCAwDEMJvPALBdgIQeI/LoBrAECJjS0aB4GEYAsxCDgfSyEqEiBCBAd3MJT3A5OwMpZTEzRNkiROkCjvt5AkwUsUHKUoAsNFKIrgcBiWBIqBwUeEaMyPTSGdihhbPE6EFgtRAYKN8kEAa5TCReA8gRUcxpRqla8hGu3o1ZvtEqmUBI8JEWAAvzFCiGFCnH8V8QBIlCAQikFJWJDfABg5/k%2bs/4dSSK8ixwmKUUwowoD9AmAw7xMuxGmSpzVQGUf5DEhoe0lpduYyf11Mq9OJJQxBwT6EHKUoHJhFkRi4DjnBYZNASRrDKYRmblNoKJs/%2bw82lB05xcP4ARRqMaiJcQIBTvK0xnHeY5KCkEMeilD%2blY8xwWsAZRicYWilipPL5QU58LQhKQwAUACAIngkDKyx0Vc4AIsx%2bVOZm8cz794X%2bd2C0O/v%2bdb%2bsDTy5ydavjqQyZ/LjZxM3xmAj/Yn1HKR0WIOx0LgikA0XiAoQpBiFC1GMKhLd6FYMY8KFTASEkGK5AqZ3WGz2cyQEGC8w2FlZWLwVSQCQfNEQhERSdxiEUlgYql4TH4g89X%2b9H5FYJfA/zJaMKxguH834T9sqvnDskh%2bMHdnAD4%2bkFCIx1dUVU7ras9kE9FYKBRuymZT4XBjJNKUzaUmt2Xj8Sg8p7S3hkKN7e1Turu7ps/o6umZ4XK5AoFqu8OUSidaYtFp09rb2nKZdKqjY0o02pxKtlR6y3AC4QHcOJA%2bZAjuZQL72MAeKjAKYBfi30PzrzuKfb%2bdFwJGjZy4owzIhHqj3mjSOl22YI2vs3PqzJ7pLrctEmsKRxvdHlsgUOX3V3k89lQ6nsulYy3NiWQ0l0sZDdpg0FdT6wd3m0MNyWTU7ysPR5oA8MS6mnQ66fd5ydsADuqC4Otu3H%2bhpeHdFZErS8Nv9zQfNtYChgKw4OcvpvJn/g%2bavq0Bo4YYV3wXgo4XCscLReP1ehXAQNBiDBMUC8aKkCLgD7yimEAgHAfsomjoDkU4LqQoVCwmJRIKhxJECmkKoymEIhGJmGRZRiKmxWJMIsa/BbCXDuwS%2bv7rgWj%2b1603z2Tyb7T%2beX18rziwTxIAXr33YCR/Iff9BX27DwAAaMMgRwSFTgQttBhkAAyGskhSqJSleT2gRVBM5QpWKqUIXAS%2bkiQCRhAiHBNAUWWllJSlRhcKmUQhk8qklIwFo78LQOS/siQMkR4%2blM73p7/clz6ordlNB3YKfe/cGy4ASI86dzsVt9c3%2b9Oj61G7eeIWAJOaAgDgCvQmCCpJCUGCwF2BcLzdYWlunqTkWJNJp9drE/FYiceh1aoMBo3ZpDcatTot53RatRqFREyIJYSUJcFjpYzhFBKVQqJWSlUK2d9n4N0V0fybkIEsFJ937o2Ajo%2bKaw4RwT89Ec9fbrvlN2h6KAcVNt9fWJ9tzcP585NvrflPW0cGW/MDOR6AhioSFhHQkjARPHFCAB0KUgF0sttNoMWpHZO7ujsVCjbU3OCr8s7vndPdPS2TSfb23r1g4dyu7naNmlUqGZmUBqd1arlGJeM4qUolVXOsSsF%2bRwN7yMDJirqLiYYL0YYBf90eJnCACjyi8DZyjkSte8uyCdePpvOv5p5aVLNiRvXXEOMzube3x%2bZkK8K1rkfu9v/ygYmZRvf8yd6OWGlfu3f4ROaj/XGzhhYIizFCAJRgxQSkgqExKOEEjrAy2mTUVFWWmk066FnVVRU1Nb5gsBrUmc2kYFETqHY6jRxHaTRirVqq5aQaTqrXKAw6zuXQl3sM3hLz3wAgA/vEfAnaKfABZ3Zh/sN08HF5pd5ieqg3sOHe2mmxks8PpT54OW63WqQK/cCG5vxrkxsDzsgE9%2bG1Tc8urz2zMbR2YVBvMM1MVex%2bdNJwfwGAlikWCnBCCOGH4i5naZpGaR4DdCiYRAUYOh6KCUgTGgIcw3EBiJXjJKwElzKESi5RcbROzWo51mJQVngstVWlAa8r4LX7vUZf%2bXcBQMHZzwYPKGv2SYNA/WOSmhTrbEuW5s9NHjnfOjzUCh6vmu2fk/WumhWAMOcvtS3trHQ5LL1t3pPrm/MX2754tbXcZdm7pjH/dkf%2bFF%2bFgELFIkFBkbwoQaAElBQGeioGCmbEBNBaxlcVSi4TKxVSMBUnkctJrUquUymMOs5kUJQ4NbVV1kwokAlPCNWWN9W6QxPKM5FgNj7xuxpA/G/3hP66I/k/G%2bIHjTVHyGCHwtMwyXX9aObmQO7Dl%2bOfHUlXl9kDXlt0okunN17Z0XL9WGbomfCKmX6FynBmY/PwiXSJ0/LST%2bp5MfAA4hYdLRAJINjAe4pE6dHBhkIBAJiYwTmFFDBIJTQUR07OapQytRz4LdOqZFaTprrcVh90RSfak3WWKSFP7/R4X29X34IZi/tm9c7t7Jqa%2braRFcploYy%2bnstfyr3/aGwf5v%2blwl%2butzY1uloaPPE694M9vjK3dfejDYfWNNb5HAumVALXIRXzWis8Tstvno9%2bfTxtMhp/9VAdr%2blTGQBgN0lh4ofqDpMMDDzwZBiCYVComGDAHIi9VEKxLAXsUhbKi0HLWU3aEpe5PljaXONqmWDrSZY%2b0pfZtGbRls1PPrz6gSXLehcu6J4xvS0Vb7w1SuyTBYD6L/xr1e8XhWGGGz6czg9mX8s07hzr20r45orcq5LVV3bGT61vPvl0c/5CG3Dp9eeiBx5ruLwtBpp%2bbL7/za0R0PeNY%2bmdD9e/82IL1ND8aT4DZi0NdxdgPMOHnB/LaIYQi3EwVkrLWYmcFcsK5OHkUsiGVi2zmTUlLquv3B2pLctO8izqqt/y5PJjJ44cHzy/bcfun65ZvWTZPbO6c5l4rHlSHT/MDR/JXO5sej3ZeCE66doz8fzZHF8uB7MA7FKu4Y1U49vRxqvr4uD0CMhgKHer9vNFk6%2bY%2bQut%2bfOt4P0IVNjTmcI6y68HRinEwEUQKg9vPPVxCUOJIQnQRyU49CM5NCYFq1ErtCqFSafyOM211aX%2bcntoQsnsjuhjK%2bf%2b%2b682/ebK%2b19eH37zd3/8xe6Dq554al7v3dNy4eb6Gm95KQ/gxvHMH/cnvjyZGR7MfXwo9ckryfd2xD/YFf/8cGp4KPfF6czVY6lrh5J/2Zv47fbo1X2JT15JXduf4CVxMPXxAX7/T7sTnx9KfnEk/eWRFOx/UtgHDUAVsurFcHUV0xTwXiIh5XLxKBKpmJSKCbmc0WlArHKdVmq1KN12U7CqYmJ1aaSusru14b6%2badu2bTl/8cKnn3z27ocfbT96YeXaZ2bMnZ1IRZsba31VpW6nvQDgWPryc5GhjWFgyIknm15/LvzfOxPnt4TPbw4PPt285%2bFJ5zdH3toW/fXW6JG1jSfXNZ3bHB54uunspuahTZFXN4b%2bY2sEvnLp59GT65vgtb/wHHqm%2ba9HUp8cSFi0YgRDIeow1UDNARFDW%2bXnGQkNnFFxUk4pMetVdqu6tMQYqHLWB8qi9f7OyZG5PVMfWDr7uWc3HD7Rf3xgYNO2FxauWt0xc3YqGp5QU%2b2t8HhcVofNyl9oIN1QPb46lr5%2bLH2jYPxOf/rG8TQ48d5OvtSMnMxCY4KPvjzKn/yqcAz6GmQPOhocu3409TmfvRR8a/SPjGrApmPhQs6LVUKCEsQMJWVIoL4SCnyhYhp0ihKHvbLEFawqa6rztmUaejpyM6dm7545bcW989c%2btnLLzzevWf/03AW9iVQMptHaQHVFeZnL6fC4nFaT%2bZ/eiUcKBvkBP0ZGZ55/PHbqm81Tt4w/eSL9t8Ocy6TAcZKBwAPvaVzBspwSLsBKNbRVFWvSq5xWQ5nLEfSWTqqpSEXrZ3VlF8xq68rFeqbm5s9s61s4q2/x3BnT22d0dfUtnBcMVpW4LR6Xw1ddbTEZYFga873myu95DYCT51rzZ6GCZW5%2bI2KbnsF4ChEgVnBdxalUKgWUGqC%2b0aCxmgxOu8VbZg3X14bqqlPRxu4pmentuamtqcmpcC7RlImFIqH6qVPSO1966fHH12x46in4Yuvk9OJF9yjlYqOBu%2bP/SmS/sVtrCDzcPD9YF7ryaO7qVuBkcnSYcxgkcOVlJRTHqXU6o0athMDDPAOxtxgNdgBgM1SW2X0VJUCNiUHvxEB1fdBXP6FyQqCi1lcRqPLCiBqJxDKZNElSmzZurKoqWbNmtb%2b6XC5jFHL6TgH0p/L9ycKTt5HjyfyljsuLY6/UTz2/4snBvp%2b8tSQK/eTa3gRQiGZoTqlQcRoNjAYwLethQFBajDoAYDXrPA5rdXk5uOnzllaVu2EdqKyERXmJuwRo7nS43B6LxSqXsUsW9y1cMC8WbZ4ze2ZXZ5tGJYeCdmcA0jdPT7n56oybZzpHTrcPD3TmB9s/3ZF5beXaSz/dMDhv%2beA9q/Z4Gr7YHv3saLrEqpZIpXqtVqNWa9VKk04DGEww8Ru1VrPRZja6HdZSl7Pc46qq8HjLXGVuR6nHWVZS5nZ6HA6n1WK1mC3wxfuWL128eCFMUy%2b9%2bPz8ebNffGF7daUHw8aPubPwDw/NufHa/TcuLv/63IKvLt6ff2vp%2b6vrd7tDlzc8e3HVE//5/I7Dse6rG0OfHUuWOXRSltWqORXHAQyjXmfQawCASa%2b2mfROm9lhMbnsFrfd5nY54CLvcrrsDpfd6rRZHHqDXq/Xwaw6ZXLuZ6sfFgrGQr%2bb2tY6p2f60SOHgoEqRDT2B1DoxCiF0iMnUjCPXN8TOx5NnJm7arB3RX/nsjceuj8/NA2m0VKHRiJlVUqlyWAyGgw6nRaGJavZbDMZ7WYLOOuw2Z12u8PuttnAabvd5oRzep3GoNVoNUqOk8Elc1Jdzbp1j698cPmSe%2b9BRHeNG/svyWSEvxMzxA8XcUHBhdHjL5sjb6xYdGHZA6cT4Q/XT4Ih/NreuMemEktYnQa80UD0DQaLwaAHVlgtdhuE2eo0mYxWiwk2zCaTwQAp0ms1Kk4hM2ggY0roejDqMRQiZuDOgMqlpEJBg3zFDPR1lJWQ/3//G%2bUvaNkbh1o%2b3R4aPpbkpyZoZPsTThCxWALXW40aVKzRak06rRYw6HQmvd5sMfFe67Rq%2bFQFaeLkcGGHgstKGBj1pBIcpiYxDUUMeh/JiBHYgajDlQjmcJpGaBL9X/u5wPGexn/0AAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"800\" alt=\"casper\" data-srcset=\"/assets/static/rcast24.82a2fbd.29cae422a5bda0e836af518e7cd53ad7.png 480w, /assets/static/rcast24.775f9c8.29cae422a5bda0e836af518e7cd53ad7.png 800w\" data-sizes=\"(max-width: 800px) 100vw, 800px\" data-src=\"/assets/static/rcast24.775f9c8.29cae422a5bda0e836af518e7cd53ad7.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/rcast24.775f9c8.29cae422a5bda0e836af518e7cd53ad7.png\" width=\"800\" alt=\"casper\"></noscript></p>\n<div class=\"soundcloud-embed\">\n    <iframe \n    width=\"100%\" \n    height=\"\" \n    scrolling=\"no\" \n    frameborder=\"no\" \n    allow=\"autoplay\"\n    src=\"https://w.soundcloud.com/player/?width&#x3D;100%25&amp;color&#x3D;%23ff5500&amp;auto_play&#x3D;false&amp;hide_related&#x3D;false&amp;show_comments&#x3D;true&amp;show_user&#x3D;true&amp;show_reposts&#x3D;false&amp;show_teaser&#x3D;true&amp;visual&#x3D;true&amp;single_active&#x3D;true&amp;url&#x3D;https%3A%2F%2Fsoundcloud.com%2Frchain-cooperative%2Frcast-24-programmable-liveness-for-casper\"></iframe>\n</div>\n<p>Greg Meredith is joined by Isaac DeFrain and Christian Williams to discuss RChain research on Casper. The slides and transcript are below.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 686' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-57412324fbae707ad228582236676edf'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-57412324fbae707ad228582236676edf)' width='1024' height='686' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAArCAYAAADIWo5HAAAACXBIWXMAAAsSAAALEgHS3X78AAAIyElEQVRo3u2aW2xOWRTHP4IH8ebBA%2bFBpB6QiESQ8eChkbiPYCQSI8SIIIZJn8YYE/fIuN/GJe6lVNyr7upa6n6pKi3qUup%2b6U37dY3f0vXN6en5vn5fq4qxk519ztln77P3f6299vqvfXwlJSUSyH6/OFNJsV/K1H%2bD2fff5Et00gVZ2fLiYLIUPnn%2bEQS//38AQHGxTvZl0jm59MPPktKyt6RE9ZJXxy%2bUakKxZ2P/B3DcOVRdsPedZaj3nO%2b42wWrd7f3BIBUnF8gd35fINmrd8jN4X9JcpNouf7jrx8B8Gj4qVN19On1jeAA5OZL6k8xkjbsT7k7%2bR/J2XpA0ob8IUW5eWUa%2b0vtxMOHDyUxMVGys7Pl%2bfPn8vTpU3n16pW8fv1aCgoK5OXLl5rfvHkjOTk5%2bg7X1N%2b4cUNu374tz549k7dv32pJ4h36ePfunTx58kSuX78eqC8qKpLc3Fyt5553rl27Jo8fP5bU1FTJz8/Xd/mm1dsYyNx7gVC6BD5O6tH8WDlRr51cif5FUvv/JjmxCeXsQHHpcjl//rysWrVK4uPjZeXKlVrOnj1bTp8%2bLZcuXZI1a9bItm3bZOHChVpPOWXKFNm1a5esXr1a5s2bJ5s2bdLrtWvXyq1bt2THjh2ydetWmT9/vmzevFkmTJggc%2bbMkZkzZyoYR48elUmTJul3N2zYoCUgLF%2b%2bXNavXy%2bLFi2SGTNmyJYtW7TN9OnT9buLFy/WsZDcy0EBAF1FMC9XsuL3SXrM3/I4LlEKi95L3ofn1Ls1AGklJSXJzZs35cWLF1qePXtWpf/o0SO5cOGCXLlyRQeINDMzM/X%2b6tWrKn3qaXfo0CFZtmyZSujy5cv6vrWlP6TL/YMHDyQ9PV2OHDmi2gcgFy9eVI3IyMhQrQJEwEcDKPkWJcLifU8NUOP3QUWOHTsme/bskcSkIxK/L0HWxMfJgQMHFL379%2b%2bXQc/v2i6rkt6/f6%2bq%2bzmSpw2gAgmDGkhm3s6QjPRbkp6WpqiTkaq7Ay9LzfLwug6VLXn149VHuP16vRfSCFYk1erci/016Gv4vnVP7zsA3wH4DkD1AMDO4cz%2bL5A0Ocfl9GWqBIB16JXMS6zsgCviBpGOM2wuUJlOcT%2bjo6Olc%2bfOMnbsWOUCBoKzDffFQdhkRVrlzNZPOJpm48TV7tChg7Rt21bd9OBcIEIAhgwZIq1bt5aNGzcqIRo8eLA0b95csrKyyoDAwJ2OTijJG1HCJcctzsvL05IMCaIeZw1iFUob8CxJcAqfz1cmT5s2TczxixgAm0xcXJy0bNmynHrFxMRInz599LqwsDAA1tKlSxUkL%2b1wZtxxeMC5c%2bck7YMXiv%2bPb4%2bPDy%2bATzA5fP9wKHr37t110vXq1ZO6devqdVRUVAAgE0jYAFjDgQMHKpMjIS17fu/ePWnatKk%2bIzHgqVOn6lJp1apVABC3Jlg/SBpCxcSNOEGqAAMgAMiotpdbToKawxBp16lTJ5107dq1pVatWnrduHFjHVeVAOjXr58SJKcqmfHr0aOH0tXk5GRZsWKFtG/fXvbu3Stdu3ZVouVWPwMAFWfQkK%2bUlBQFAaYHkyMDAgABgNdSsu%2bfOnVKhg8frvS7TZs25QCoX7%2b%2bchunNka8BFBp0HUSGEsDBgyQvn37KkC9e/eWiRMn6robNWpUQGsA0t03ak2GDt%2b9e1c1gIFiU7iHesMYAcBL/Z0ADB06VGMFc%2bfODQBA5nrYsGHltNBXmR2gY8eOMnny5I9B1NLoz5kzZ6RRo0a6GxDYoB6NwFD2799fYmNjy2mAtUe6aM3OnTvlxIkT2hdgoBHw%2bDt37igAtryCjY04wYIFC7QksebNADZo0KCc9CPeBWwZzJo1S0aMGBEAZPz48apelDYxpMhy2b17t7Ro0UKl6EbfrD/9YvXRAibJNYNk0pSARvAkEj%2bC1KVLlwAAzZo102%2b52acvUs%2bKhHTbtWsnCQkJGmrCyNk%2b694CWQZW57X%2bAYbJYQfITBqNYLCU3AMM96G2P/s2O5BpVpMmTQIAsBMQUbJdKmIb4Fxr%2b/fvVyeoV69e0rNnT%2bnWrZscP37cU8VNPUMNmsEieWe2Z5TkiiRvYyMB2siRI3XiGECzAYwTY%2bv0XH1VdVmdyW2hg219lQmvhyMYtlEmznZsUq9Tp45m8wUaNmwogwYNkpMnT2obX2UjOO7wV00RHps8htPt%2bVWUMdBfPR02AAiF45JjiMeMGaNbr1cePXq0jBs3TrdLwu9fPQDhxDNDJV91Bzvd53SVod7B2jojvhhfttNwMzsBbXzVKZnPnb6YkJgRHGN17POQEPZh8/ygtjg8lHiPvGPngpT4B1BfvEzO/3CLzVEyt5g%2b8e5wuiwe8cUAgIpxXkhQAjoMOaLE1eU4DFoN0eFMD28RI8ZRG9Yc64xbzPkg9QcPHtRnML3Dhw/re9TB%2bZcsWaJ9enmanwWAcBKDMg%2bNdef0xMyKm%2bfoDqRYNMjcZiRta95ZV9ml4avq5HFfUUfz2Z1GCXV1TtQNmjNwaZNhWZhBs8lRb0TIfZRGHwao85u0d7LVTw6AdYxriVqizqg2/B8V5RknubA6TmdxlXGheU5sAJXHPtCOZywDVJ0TYdrhqeHZcSROW%2bphjJz4whJRe2wM1xzsEkBZt26dLjP63759u2ZjgCHPBquiAZRogRkn%2b0mCZ6grxgtjBqWlJHLE8TgTJ4JDtmf2IwX3GDaMnx3Q0p7n9E2EiHvnc74LDXYaUQwo46gWDQjHBiAhpAGn5xqLj9TREAZOvI8YIFJHkhYTJLCBVPnZgkkhddrwDkf19IfWoBlEkLiuERsQLCMZJoOkKNn%2bkDCDR1pMnKN46pmM3bOceAfVN8lacBQgDDTAREPsG/xEQeSIb5itCXc38FXHFsgE2M5Mmqxnrhkoqs%2b6tmfYDaRrf3RgM5Ask%2bOZtWfSaIRFjMg8py%2busTPc225T435ATaYv4nA0mAq6/%2bnzejfYf3/h9htJ/hduukpmdCU/DAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCP24-slide1.82a2fbd.d3ce92dafb2e25e0ab32eef6d4c4cfc1.png 480w, /assets/static/RCP24-slide1.cbab2cf.d3ce92dafb2e25e0ab32eef6d4c4cfc1.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCP24-slide1.cbab2cf.d3ce92dafb2e25e0ab32eef6d4c4cfc1.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCP24-slide1.cbab2cf.d3ce92dafb2e25e0ab32eef6d4c4cfc1.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 777' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-1b45e1ce4422c81aadcd097ef312bcbf'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-1b45e1ce4422c81aadcd097ef312bcbf)' width='1024' height='777' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAxCAYAAABqF6%2b6AAAACXBIWXMAAAsSAAALEgHS3X78AAAKoUlEQVRo3t2aW0hVWRiADxQFQUEwEANF85ARvfVUMDDEPA1YEDS9xIxFFGFUkD1EE0m3IbrXQzLZ/Z5mV7NMu2mmZmUXu1hZZqapWdk9TfvH77f/zHazj53Ss8dah8Xae%2b1/rb3%2b%2b2WfwMePH0U7v6YmcTfmgjDfYQ8EbxpbkK%2bvqpXyFdukbFGivL5e8t0ToYUAnzjf8LROimPmyOWfY6RgQLTk/fir1OUUthChsdFzgyYHcbhuchHL7p2j1xo3nNf6Jg9GhHp/U5hMayHAh0ZFsnpnmpT9nahjUfRUKYgaIcV//tWmFHzrrRUBKv9JlqIRU%2bVO7CKpSEiS6j3pcntCvICmF%2bVpZ8%2belfPnz8uzZ8%2bkrq5Onj59Km/evJGXL19KY7PUMP/69Wt9xjzPX7x4Ie/evVOYO3fuaH/y5InO1dbWSn19vfbnz58rbENDgzx48EDu3r0r79%2b/17m3b9/qOdiDzjvY4/r16/q8oKBAzwe8wbx69UrX2T29lQq8K62Qgp9%2bk3M//CLFzYjf%2bH2m1KRkeqoAyNHWrl0raWlpsnHjRtmwYYPs3btXVq9eLSdPnpR79%2b7J7t275dChQ/oMmK1bt8rixYsV5siRI7Jz505Zs2aNrF%2b/XpKTkxWuuLhYsrOz5cCBA7Jnzx7ZtGmTrl22bJl21p44cUKqq6tl4cKFsm3bNl2/efNmha%2boqJAFCxbI4cOHJTExUVatWiUJCQmyY8cOWbJkiSxfvly2bNki69at%2b88IyidxfnGlWMriVkjJH3PkeXJGa4/gIQFnzpyRzMxMKSwslNLSUsnPz1eE4TTczMjI0DmQLSoqUk4yx5qsrCy5du2apKeny82bN%2bXChQt6cOAgAnvTT506pTD0o0ePKnHz8vLk0aNHijjr2IdnvAsJYB3XSAIMunz5su4LUdkPWM4QMD2%2bePGiZB7PkBPZWZKSdlhO5%2bdKevYZFXG4AlVpbuPS0Q0xRxV8tQG0hw8fKpXyc/O0ZzVTMLWZk1evXlWKw1EJYQvc1jyUlf9cdxI0XHhU0Ws%2b3HcGCcD44cMHNTg8MB230Qv5z3XWNoZwn6F6UwfEHLwTXMLZK9DRhzLuuZsRMpJBjZthzrO0iwBfykF74bFjxyQ1NVVdmh3OyaW2EPlca%2bvdt2/fVu9TU1PjabciRgA7AP549OjRMmPGDJk1a5aMHDlSrb8Xh7yQJ14gBsBPY9EtHqBXVVUFjaTXu3GP3bt3l0AgIP3795f79%2b%2b3SYQOJYAhN23aNPXb1vbt2yfjx48P3oMgvhzE3IjQ4BxuDM%2bEEYZ4uDqQefz4sQY3znUaw3wiCoQH%2bR49eug4f/78ljC/2bb5ogK0sWPHKrdoGCPamDFjVDTps2fPltjYWA1SDMa5BwEUvvrSpUty48YNXQMBKisrVbqcyBvRCcAg9LBhwxTxbt266Thp0iT/CGCHmTBhggYZ9mLa5MmTZebMmRIXFydTpkyRpUuXyty5c1vZBuMkXD99%2brSOxAVXrlzREBcCoBZeBCC6I8KcPn26It61a1cdCZS8iBxRAhB9wXHTPTgzfPhwjdwISSEQER/deTgaCMJ9ojiiO8SeXKOsrEwJYAR16z4SQqSHjejVq5ciP2TIEHG6ed9UAKsfHR2tCMPJQYMGSW5ubvAZhmrcuHHBOSMchCDiRH1InhjNEDIS%2b3vZDGcQBVzv3r2VAEOHDg3aHV8kwA7ByyZOnCgxMTEyatQoWblyZSt1oJE3uA0ZiJCtYSSdnTmyPTf3vdxmfHy8It%2blSxftu3btatN1BiIVkBghTESdgVCo4ORr/L8Rdt68edK3b19F3t0HDx6s%2bYyXOwxEOjJrK2hp7/7mYVJSUqRnz57Sr18/GThwoAwYMEB7VFSU3vfp00eJg1F1B2QBP%2bpuoRKVjtiPhnrgPbAvqIuzM4%2bE2LWbIb4QoDM1X2yAG3G8AcHMrVu31KgRzWEEEUW4QkRo3CPtttCXObiLZWeOznoiRdJ3PAXPgbOSW3l5ebDU5lsuEOoFZvjOnTunAQnRGiUwSlMHDx7U%2bgMxAnMQh9IWVnv//v2azBAKExPYHCOlLKo57IHub9%2b%2bXf0/VR/uKXNRdsP9EhNEnADhNAhB/I7Rgotwy3QSjsNFDkkBFX2FkxZKw01Ka6bHwFPcBIb1BECM7Ek3SbEMNLyqcDuDHqI0DschOYxVgonbzbdb1RcYg7OKr1Vu2RPkzN%2bzB4hqrbIZ1godjDwD1pIn5jkL%2bxrB7R085xp4ulWIeU%2b7CQBHKJmR91ORRbQRUcSVjushuUE8jx8/rmEtxVA4ByzVX8SXa/IHskBUhVAYeOaJHIHJycnRSi%2bqwzrUgjzB4FAZroGhFmEFVOCoOFOs5f2oGmflHO0mACPUhlPmjuCG5fQYJUYkAE4gHVwzEvaipzzHMHKNtCBRGDFEnz0JgbkGnnwA7tk%2bMIC1XJvxBJZ5jC/zdj6TQPY0NxmIpJvDUmOMiPkxZpSk4SQcNQ7CIbgFV0miSH%2bBoRoNNymXw3nWsxfrMKrsAQxrkS72oTRPp%2bwO94HnualKh9sAr5AUpNExswNwAY7CRbhnXCfLAwaOgTTPjWvAY9DgrEkRRRHTX%2bZNKsxFAo8N4BnzPGceqbNMknchDRGJA8xio3%2b4NuMy3EH/4D7P4BRuC%2b7DWfQWGLMF6H9SUpLaA/SbDyDUApjDbgCPvaGzH8QEBk6jNtgO3sX72Yv3cY/%2b83GGdU71DUQq9ncmQMY1uA/n4RaSYhLAaDqNXoIU3YIdsxlw1QIj1iEZcBfJQVV4Tmcd64F1u2N3GS5i2aDzmoOi33DVAiB0Gl1GGuAe3OE5BEJcKYZgpSmLIS3oMxLCPXvxDC6zD1xlL2CQGmwAUoUquOsFvucCRnn3Fxmvmj02BA9CGQwkS0pKlHggAudwp5YFWjzg3MeZcocqgPiaC3xtMoQ9QGfxHogzYg7yls66kxuvMdyPMIHO8DcV%2bxRnoorO4w3QY/Pj2ALsgPu7Ycf9R%2bh/7O6GDSBbhPOoAcQw9xbOF6JvigA0kLMgCN2FALg8kIfruEGyRWIBS5hQCSPIN08AuE3kBqKIOqKPxceyYwTRffw/Fh6pgGBch/rPQqcgQFtlMOdo3xIRcyQArlI8gSjMwW1cIkEOxIBA9l8i%2b0gSzn8DfCfAlzSQAjnieEb7IGJVI%2bIGiANB6AQ7rGkrxg/3i3LEAiFEFBFGV%2bEwCMFZQ9DKYiDG/4GI5rjH7Vmcb2U09uAZ98QI2ALWMGIvIBzqw1rusR32PyPW8A7e50tN0MSaF2LI7KMmPp3sjXkiPg4JZ7nG76P3RHUgwoHReQhIvkCkCCFYzz2RIVEgCAPPPPDkBOxJzg%2bRuYc4nIH1vhVFabycg8E9DgMR4B6HgbtIBPd0YIBn3oweB4d7EMZyCPahgwwqYNzFMOIdIDLeBM5jM3gOoYH3TQKMACAAtzgUf2/j4ByIOB3xpFtuAMfI4khomAcOhCEKI4kP1%2bxFvM8cqS%2bZHgRlHiSRCuYYyRlYw754GFTS17L4lzR0HiSsRmB2Ab0nn%2bfwzCHuSIhJjH0Z6nRGMNy/qVnygnhCAPQXvbY/QpLxIcpIE8SxqhGSAry5Qa9kK1xX2ClD4fZy9Uv6v7aqHf%2b8wn%2bcAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCP24-slide2.82a2fbd.01f523bddfe09bfc304241324ea49312.png 480w, /assets/static/RCP24-slide2.cbab2cf.01f523bddfe09bfc304241324ea49312.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCP24-slide2.cbab2cf.01f523bddfe09bfc304241324ea49312.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCP24-slide2.cbab2cf.01f523bddfe09bfc304241324ea49312.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 794' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a6107aec5c129bc1e5bf3230b2a50c21'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a6107aec5c129bc1e5bf3230b2a50c21)' width='1024' height='794' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAyCAYAAADsg90UAAAACXBIWXMAAAsSAAALEgHS3X78AAAJ60lEQVRo3uWaS0xVRxjHrzHWhdFoXHTdhV2ZdNG46MrGxqQ1VmXRmFhCY0xrmviKO9M0IdFo2qpRQGOIIj5ARJCH4AtfID5AEJXXRRAQAQUBEUGQ11d%2bg9/1cLgX7qXce8WeZDLnzJk5M9/7P98cx%2bDgoLiKiAwODIj1GuwfkBF9PrHicEf8QE%2bvdJZUSm9z2zAT/hcM6B8mvstZI8Xf/y75X/4ohV/9JM2Jl8bVhIGBgU9EA4aIrPkzSur%2bipGqLX/Lnc%2b/lbwvfpDumoZhJrgh1Hr19/cbZmhR5rgr2lcv%2b3v7WJ2LcTrWUx/7N63rso6nOKyE9La2izPsD6mPiJOqrf9IfWS8lIZskZaM7GEG9PWPIv7Nmzdy//59efv2rUzk6uvrM9/w5urs7By3z%2bvXr81aWlpavPrmBw14L43yX/6QnM%2b%2blrLQbdIQnSTOX8Ols6J2lAbARS6IP3LkiNy%2bfVuOHz8uFy5ckIsXL0pKSoq8fPlSbt68KdnZ2XL16lVJSkqS1NRUOXPmjJw4cUJyc3PNfWxsrBmXkZEhly5dkuLiYnny5IncuHHDjLty5Yqkp6dLdHS0nDp1Sk6fPi35%2bfnS3t4uCQkJZhwlLS3N1E%2bfPpX9%2b/fLo0ePTBv9mZt10T8uLk4uX74sZ8%2beHakBhsimNqn8eZuUfBMmZd/9Jh1Zdz%2b8s9k9V1lZmZw8eVKuX78u586dMwuGICbu6uoybTCDBRw%2bfNgwinsWCDOuXbtmGEcNMw4cOGCY8eDBA0NMYmKi%2bT6LhgGHDh0yzONddXW17Nq1y4xjHuZlHfX19XL06FFDIAQzL%2b%2bTk5Pl4MGDEhMTY%2bY8duzYMANUdSqcTil2lkvpEFEFmVlSVlgk1Y31kp%2bXZwi1M0Ft8vnz5y71RKVfvXrlYhpS6u7uNm06jj69vb3S0dFhxsEotU%2bIR/pcbW1t5h3j6Ytqc09N0bl6enpcc/E95uD7Oh/fUKHpN%2biH6TlUks3NzZJ765akp6bJ%2bfPnJSE5SWKHuJQ2JD1UiDZ1LJ6c4Aj8MM778S5fx47QYh/GjjCBd%2b/euaTSY%2bE63HRnBt6EQavH9qb42t9dX9Um38Kg3RfY7n0t6iR1vD77M6arSdrD4FjzOvyxCJ0U26utrR2BE6wM8bQ4b1Xe07xobENDg1cCnHQGKJF471WrVklYWJisWbNGKisrRwAZq5TshODccMqYoLXQ1traapyYnTD9ZmlpqSxcuFCmTZtm5uZbAdMAXQQxevny5S4wgmcPCQkZIUHCHo7XzgQuPDtYgDBHRECLYGBTU5MZo6DLndasXr1aHA6HTJ8%2b3dSEQWWq3xmg3N6xY4eJzVwqrfXr1xtgw0Vc3rx5s%2bzcuXPU4rhQ35ycHCkoKJB79%2b4ZTABTnz17ZpjgDo8Q//n%2bokWLDOEzZ840dXh4uMssAsaAqKgo2b17t7lXaQE8MIV9%2b/bJunXrDPEbN24cFTLRovLyckPww4cPTYEBJSUl8uLFCxfGsGsd39uzZ48sW7bMED5jxgxTA54CpgEqDVR/xYoVLgcIoEE1wROgsLVr15oFb9iwYRQDsPW7d%2b9K3hD4QgMgnrqqqkoaGxtH2b/OCbS9NYRjioqKXOqPNgQ8CqgWbN261eB6riVLlsimTZtciwEKYwJ79%2b4dJR32DzAMSYPsQGvcE1FQf08EqSbQd/bs2YYBK1eudOEbT2HYb1Fg%2b/btsnTpUuOJcYj2UIht49XtGqCE845a72GKwm1P4ZcrIiLCEE%2bZP3%2b%2bMR1rxLGPd/gLkMB1pInUWLgVmamWTAQDeJqPzdLixYtdxGuZNWuWhIaGSmFhoduw6/AnKhtr4d5CVW/Mjd2mhr558%2baZMnfuXFPPmTPHvFuwYIERhp0JDn9CU3eZoMlKo1lhLrvRmpoasw3G8VpLXV2dCas4UU28BEQDfIW2gbr87gTdEU9oQxogO3ABkkAq7OMxBTw8PkPTY9ZdKH0IffShnTYcI5iAPrxnnNnBDt2DFOnLXPSz5ioDEgbd4QLULzIy0uAAskAAJaAwsRvAQ5YGDI8tA5jI9tCXSAGMpsTHx5v9Bek3sk4AHGpQJTCZDBRpMzJKZJBIo7mD2kHRACRAeENibGYANNxrvEeaSI9npIakiSCMo1ZsgHbgyBgD2OIZyEx/2unHt3jH93T%2bgO4GJ9MHTIb/8DkhEohijwbeXNZ%2bVsZYzwcmEl0cwTyVUWJImzudToPaSGWTSs/KynKl0/EF7AfI8rJNJp1Oihv/8V%2bzTI5gH03p9hcbJlKQ08ep4TjJRBPface%2bIZ57nBvt9JnyDHBn5%2bwGyeEjfQiFYBIjaIGvNj4lGGBHiiC6iooKQzSaoTtCzfO5Q5aflAZgBuCCx48fGyhLJggToHbnEKe8DwAFImHiOW3UxHOIph3cAH4AI%2bgZhaLHKe0DVJKoOsiPc0MIxe45ywMpwgjyfUQGDmJJl6EVZH8wlY%2beAbpAT/aqR%2bx4dAhD4hTNBqMNmATqz64PlIcW4Bt4NyU0YLyLzQ44AIkTAvH25AS5BzIT74kImIL6BSID8PijR4J6aotaQ6ju5vSUlnQXGgAxSBUT0MMP2unLs/oE%2bjFG9wM801ezT2gF7bz3xkcEZDeIKnN2D4JDkkg6MzPTxHoKAIdEKbtBbJt%2bIELQIDs8do6YCG3sFPEJIEHeQSzPoEUywviKlPcn2oTSoO4GdWJ2dUgD6es%2bX7UBaaLOODRVbe6RLHt63fXRhlSpaUPa%2bAnNIzAX36NoXoE5xtsfOIK9C0RlOdFByvqrC9IFB6ANSBHpog1IGsmiIfgJIoWeE0zUF/g1KUrIQkrYJxJBuio9amwb1aZdwQ4Sxu5xeIyhxv7RCDSEUAjT0A6iAu9UK/gGWsL3aaPQxruAMkBtHymyo8MmOeIiS8OOjmfaIYaajA8%2bgd0gWIC%2b%2bg8Q7dYfrcgKKUoEGqMZd%2b7cMRsn%2btKHiMJ%2bgiyR/ofkSQuCYgJIRG1eDzwgljakh9TQDDQEDIATRZMwB3wGWgETeM94xqFtaIQdKo91Luh3E/CU7EBiSAoN4MCCeI8WcJTGM7aP5CCSPkiXNpWuRgiIxkzQHDSGdl/9gN81AOnhtNTWkToLx3bV66v00AJUW2M60mUcDIJwimZ7wRU8a45AowZtMA7zQGt0Bxm0KACBiuxYHPZIQc2xdQjRHyJZOG0wBKnCIN4xlveKEVB5NAXzQOpoFM/UFD0lpq/%2bmRLUtDhSQI2RLoTrnx8QiASpkSLEwDCFvLTBEPrSjs3TTmEcvkQjDZqifkL/KNF/CcY6Ig8IFIZgRW8sFHvFxkGExHI8P9JH2vpXCCgPaRI5iAD8p4hW4BMgjmeYQITQ/wcUO1CICDAn6OcCk3U05m322NfN0L9MvGHkQxG0fAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCP24-slide3.82a2fbd.b4289b8c5e4cded2c2bda6916d3e69fd.png 480w, /assets/static/RCP24-slide3.cbab2cf.b4289b8c5e4cded2c2bda6916d3e69fd.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCP24-slide3.cbab2cf.b4289b8c5e4cded2c2bda6916d3e69fd.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCP24-slide3.cbab2cf.b4289b8c5e4cded2c2bda6916d3e69fd.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 737' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-1da8b544679cfcc0573f13cf205a2feb'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-1da8b544679cfcc0573f13cf205a2feb)' width='1024' height='737' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAuCAYAAACYlx/0AAAACXBIWXMAAAsSAAALEgHS3X78AAAJNUlEQVRo3u2aS0yVRxTHb3Tj1rXLrujGjavaRJOuWqNpNI3WVw02BkvsotJ058LGBhV8RiUaEjS%2bEOUhPlARAV%2bg8hbkraiAIA9BeSl4yu/ouX58vZd7idyLms7NyZ2Zb2a%2bmfOa/5z5PG/fvhUv8RsZ0TxJ8xB5Z7svgEivX78Wz5gHo4u1NNw/4M0bU75sBgy/W3xfbZNU/fyXlH77i9RF/yODLe1fJBPGMmDkrVfqDTHxUhv1t1R8/5vker6Wyp82vmPAOAORRkYZNDw8PIZ81bnJxnHX%2bWrnHM9dtvc55zPe%2b3k2ODj4ngHvpd9bXCV1v8dKx7k8ZUT9H3FS9t2vMvCo2acWkPr7%2b6Wrq0s%2bJjkZ%2bbGJxQ0NDQXd3mO2zxSGOrqlaM4yKfzqB6n/M17akrOkZlQbqFdHOPJh8W/evNEB0tPT5ejRo3Lv3j3Jy8uT27dvS3FxsZZhDP%2bVlZVSWFgo169fV6Id5fv378vp06flypUrkp%2bfL2VlZfq8r69Pn1VUVMjdu3c1f/LkScnJyZE7d%2b7oP9KrqqrS9924cUPbpqSkSENDg%2bTm5srVq1elqalJ/2/evCkFBQVSVFSk49OecRlrjAmQulNzpCTiR6n4ZrWUz4uUnuwChzP8LwMyMjLkxIkTcvbsWTl16pQkJyfLwYMH5dKlS1JTU6N1qampsmvXLjl06JCcP39etm3bJps3b9aJHj9%2bXBITE5WRe/bskd27d0ttba2Wz5w5o%2bPFxcXJgQMHJDY2Vvbt2ydbtmyRxsZGXTDjZGZm6vi8t66uThlEmXnRduvWrZKVlSXbt29Xio%2bPl/379yt5TP26u7ulpaVFGpufSnX%2bbSlLOC7tFdXS3tMtDfX1XjUfeW8GZm%2bdnZ064d7eXlW/58%2bfy7Nnz5RBlB8/fiwdHR3S3Nys5oLj4V0vXryQp0%2bfan/6UM/k0SakS11bW5vOifaPHj3SOZBnfMZqb2/XMchT//DhQ1X/ly9fSk9Pj/7zHvpRzz/EuNbXYwupH13ktWvXJCMtXVIzz8qRlGRJPJIkmaOS3blzp6qQ2ZgvJziZNhyuxPw9TpVGinCnu6tbOkcl0NrSqhyDi0jI125g3tapGc68eVxfbdzkBWDjtAk0TrD1lNEKj3sxzgk4txSZIBo0H0EiP9F9esS144wEiUNMgyw/MSQ4SWQMMw3wxbxAkwukuuP1dZqRP8aFjAG2%2bKSkJFmxYoUSHtyt2v4mRzJH5iYcG%2bSrn2ncsWPHJCIiQubNmyfl5eU%2b/VbIGGCTwJMvX75c/Qlefu3atZKQkDBGiuz5vphAevLkiVRXV%2bs/ezn/7AJ4bsZzL8gkTtvp06eLx%2bNRmjt37hjGh0UDSKtXr9ZJW2Liixcv1jzbGwxauXKlghenhMxfPHjwQMESzwFRAB6k2draqo7ayTgS2gHAAVOwcGPCzJkz1YH7Y/SkM8BUe82aNYoNTJ1JkZGRCmgAIuvWrZNNmzYpqLGJWF8mDEqEQHAgu1u3bqlGwEgwgttRw9SYmBjZuHGjzJgxw6sBs2bNUuaEjQFmAsDW9evXe18McFm4cKFcvHhRNmzYINHR0YrgQH02EZsUbZEmUBUC8cEA6jEp50KMAWgFzAV0LV261MuAvXv3%2bt2FQqoBYPlly5Z5FzR79myFuSTg8Y4dO2TVqlWK/51eG%2bmC/FgIyBHC5g0xgih9SZP%2bOEcSjDUzgHE2blgZADRdsGCBREVFyaJFi1TizoXCIM4Qzi3NJsoiX716pVKFDNIanHVvg068Qpo/f75XAzAzf9thSHEAhNTw9DgvJu/eAn3t58HCV/fiYRD%2bZM6cOd7FG%2bF8Oai5%2b4acAYEm7g8dOmFrsO9ZsmSJd8Go/rRp07xk9eZw7b0hZ0AwGP5jx7ZdhpgAZ33iEOY8OesTiygtLfXGHtwmF1IG%2bNMGZ9lfPhSRorCbgJNwZHh39msSZc7v5pzMuVmcjrI5TCaJ2lodbcAK2L2VaUO/gYEBdZw4YXYSi0lYu7AzwNSUEBRRoAsXLqj3B7ERoUEtifoQJQI4ET0iyoPTIqKEGhPSImRGdAcif%2b7cOW1Lma0OZ3v58mWtI%2bpEG1R/PDMLmwaYxNEA/lkouN6iMsBe8jwjIsQ2SGQHbWHvt7MAbamnL2PRB7svKSnRXYZnBHUYn/ZoQ6Bo9pT4gHCmid8MhdgcgokguXeIj4kMfVIM%2bDzuBv9nwP8MCAsQctYHAkaB2gUa%2b5NggIEZf6jQzgY2KV%2bnPmek1zC9BV19nQoDOcKwMMAmTSAE0EKYi2AHwIU7wezsbK0DFBEmAxgRAgPocG1GPXs92B5gA9anD8CK4CeAh/gCQIqrNPrQFwL/%2b4tIh10DgK4AGYIjAB2iPMT5KANqODoDYKgHytIGKAvRBiIeCAGEAD0WMAUwWQCFPGNRBmqPZwpTDoQIeCI5JIxEgcgQaBBYCwRGI9Ae4DFXc0iYcBt5NIL2aATS/iyAkBE2DpQ1jeAfCVKHBiBlYDBShHhmEkcL7CIXadMXKMwBiEhTMPY/ZQywS1gOO0gYyXNA4vo8LS1NbZ7DEdfd%2bAraoSFEh/EbHJDMvskzBhrCdTja4O%2buYUoZ4JyMxQvNdpEkUicP4StM8naVzSEJrbCrbrtOR/LUoRH4F54FOgBNyS7gTrwUGz98%2bLDGC5EeZTQAyeLpqcM/YPO0wdtDSJy21KMhaAz%2bgWt96mFEsH5g0hngS%2b3YhrBn%2byACSWKnSB27xv5N%2bkgWu%2bYihH8iw7TD49sVvV2Pmd1TttA546IN9EUzbOfwd%2bAyfOIJ9XGXfd7sFM%2bNFJEuHh4PjmR5hjSRKj6BPmb/tCHoQXCEPNLGJ3CnYN8XUYdZmT%2bhHWPxHvuuwZ82eiZj8dgeHtk%2bR4HY19nSyNvlBmXz3BDSRYLs2/Y5DN4ejeAqjPa0Q%2bqmTTzjn3aMRTv7jAYtsN0BAlegBbQ1zbKACnNFEzyT4dl5AZ6b6Aw2zD6NN8dj85ETEkVaeH0Lg2G79LEvuIgMmaagDWgLeUOFTBrJ0tf8AO1ow/i8G4ahEUgfjUEz7As0xqEteT7KgnEfPpObZB/gxOVIxXC%2bPbcA5niHG/d4NobzctT5IYT765DxxrY5QSH1AcGEvSdy2pvIe3yN7Z4vPuBflYyKqmIedRUAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCP24-slide4.82a2fbd.ccfd3be8f283fe8a2386366e1a7483ac.png 480w, /assets/static/RCP24-slide4.cbab2cf.ccfd3be8f283fe8a2386366e1a7483ac.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCP24-slide4.cbab2cf.ccfd3be8f283fe8a2386366e1a7483ac.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCP24-slide4.cbab2cf.ccfd3be8f283fe8a2386366e1a7483ac.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 684' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-d17bf609953a553ff2e50ac2a2f5b8d5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-d17bf609953a553ff2e50ac2a2f5b8d5)' width='1024' height='684' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAArCAYAAADIWo5HAAAACXBIWXMAAAsSAAALEgHS3X78AAAI3ElEQVRo3u2aSUyVSRCAn3rRg6c5z2GOc/A6xotzmwQvMxmTOTgxmSEx0cQlDLhEM8q4j2iMS4wRxRVFBUEBVxBFUHBBQFA2ZREXQEVA1JGlhq%2bYevn9ff/jIY8XndhJp/vvrq7urqquqq7%2bff39/eLPvX3iTrS9B/M/yz7/R9/g5v9pfSHNW5Kl6e8k6a5p/N8TYZAAff260Z6OLqmeFS%2blU3%2bX4m%2bipOjrH6Sr5O5/ROj1RELqGyCgM1ufu93ZHwjWPS4QDi8Y97rcfYFwDBKgp1c30ZaWIw1/7ZSWw6el4scFcuPbn6R23jpPKbDU1/fh0fkckp8AfT092tBy5IyUfh8tVb/9KY8TU%2bVJUrrU/ZEwCOyiMKmrq0tOnjwpd%2b/elba2NmlpadHyxYsX8vr1a%2bno6NA6bS9fvpQnT55ovb29Xfuqq6ulvLxcHj9%2brN%2bM7%2b7uljdv3ijcs2fPtF5VVaWwnZ2d2v727Vttf/78uX9MRUWFPH36VPE9ePBA12hztba26lrBxxjWxHpIPuf572nvlNLvfpWrX02Vyl/ipPLnGOkoLP1AAozjzc3NsmfPHjl79qwkJSVp5nvLli3y8OFDOXPmjCQnJ8vx48dl7dq1cujQIdm6dassW7ZMjhw5ImlpabJp0yY5cOCAJCYm6tibN29Kfn6%2bjmHs9u3bFe%2bKFStk48aNWrJJ4JYuXarjwJuQkCA1NTWKkzmOHj0qq1ev1vrOnTtl8%2bbNsmrVKoXbsWOHHDx40EEANv/unbCtjoZmebhhr9THbpLOgtva1t8XWPzh8qVLl6SoqEg5AUFY/L1797S/rKxMSkpK5Pr161rCkdraWv2%2bceOGcrW4uFiampqUyxDj1q1bigcYNsl3YWGhXLt2TfFRb2hokPv370tWVpaW5AsXLii3qd%2b5c0fxAU%2b9sbFR8dy%2bfVuuXr2qc4LbfwRIdGZlZsn53FxJycyQ7Pw8ScvOlHMD3N22bZuKjp13tw7wOl/DTRDo3QAjIpn8BOB8wJ2SWyVSUVYuJQMUul5UrG2cL86dbcytaYfS8sHanH1OpRose%2bEJht8L3uc2ZW4OOhc2HPvaM6BY4SZlqGMCmbLhZMYzHzlUXD73uQ5UDzUHE/3h4BzqaHn5Ie5kbSETYKTZuYjdu3fLwoULtXQuvre3d8hFmfS4M8fQC5706NEjiYmJkSVLluiRduusiBFg7ty5smjRIrly5YoSYf78%2bdpuCg6bHIijJPwBtDy%2bARnbzsawMtTdushJ9MmTJ4vP59McFRUVksSFjQDG2cuXL8usWbPeE8WZM2eq6SFhpuLj4yUlJWXQ93DoCLMEFy9eVDOJGcOEYRIZB3ECcdRgxo8fL2PHjpUxY8bIhAkTlIBDSUHYCGBimJ6erhskvXr1Sstjx47JnDlz1PbOnj1bnZl58%2ba9tzjjVl1dneTl5Ulpaan6CWSIAfdNcpycx/avX79enR4IYBIwbtw4JUzECGALwu2cPn26OjcmFfv27VMCrFy5UqUDr3DBggXqSDmVFd8FBQXqXEEsPDs4ixk2F9itqCHyunXrdMyMGTP8BIiOjo68DrAzvmHDBtm7d6/WcTunTJminISDSMfixYslLi5O%2b3sdt0x8dLxIpADusWlEH6KiA7wsAMQm4RIbAbKzs7XNS3GOCgHsGKD5p02bJvv375dJkyapG%2btMEAcOuwlgYk7m4sOFhTqE4TuQUjMpI8XGxvoJsGbNGn97b5Cr/KhYAXz5w4cP64Xj9OnTfsI4FxvITgez88H6Kisr1dqgAzj7KMGJEyfK8uXL1ZMNdhR84Y6weMUGArnP4bA6KEDjulfmNuglCb7RCDM5XdLhuKUf43meOnVKj1pqaqpesclIH2aWNo4b13UvKfCNdszNLQVOsfcKjwULqbkvTKGmiB0B9%2baRADQxURtLRHNGEsbyui8YUVCaTgmMmBIMpAvwxnbt2qVimpubq1GenJwctQxEdhBT7DxuM2J7/vx5yczM1EAGPgAhN%2bCBI%2bhBpAeRJhhCIAZvkf5z587pHChdvNFQLkIRkQB8A3wAbDUljg7mDu3MN%2bYQO4/9R5vTDmEIwOAIEcnBJ4BIbJaSuwLeIQTF4kAsMrjAg%2bkc/rtABHRApCO%2bnwQBQokMDTd6FEpk6JMiwOfxNPaFAF8I8IUAXwgQZlMXrD8UE%2bkVqQ4VXyhrCwsBiOQ4YwLO2IBFeswddb4V2EXJosAGY%2b6zO4psESEzd4bHbRJtDrsBkmlnfODn8RFm3FJCUrihuKW4sidOnFD3FM%2bM90JcXx5LgcGl5RtYvDuiN8AzjoBoRkaG4iQ2CCw4qIMPGPDgMdIHPOPNy8Q7pI0S99pKxoCXMXicRkhfOMQftxV3FheXKA6uKuEs2ihxTekjE9qin1A3/cT06uvr1VXmG1w8o%2bPi2vM2lxvGUQeOmD8RIkragafPxtDGOpiPduCAoaTfLmajrgPshZiHV3x6uAcX%2bIZLvOMjEVx0aKcfqSCyjNTg73N54kJkEsZdgBdeLkRcjLgQkeG0SQmXKnv/H1UdYDcuuMH/AJwxJoajlGTjDFx3Pl8jAVaS4Sw/WoAHeG6R4IFYEIo2Ng8snDTporSgKRk8cBvJApdJCe3MTenUF75wcJ3Fcg65hrIpfm6AozyGwDnON5yFa9zY6GezTu6R7RscjOfskrkdIkHggftIBMQAFrzMjXTYVZpbJP8RUAfG9AN1dIAzNun72M3Dbc4YmzcKw3G4Agfoo450wCF78gLOnrw472hrOEMfHAcXxCE0DgcZyxg2BfcZyzgkwsLnjDVYFJxJBDDoDySItRgee3Ah%2bz5W7JmQeBxnmXMOZeEc5xmuk%2bEqC4SbcAxxhlO0wzlg2BBcJqaPpmYzwFDnLMN5/i5BapgPCeDVCCvBOEokBNy0I4VIAoSgZAx6gY3Tx3xIAuum9I3k/LuPAvbX4vfORAgs0Kuw88EUX8HsvJcj4x7jDq0HihG65w34h0g4NH%2bw%2bP1QG3L/mOH1ThDMO/R6V/Bam9X/BXsNoT5fRn5GAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCP24-slide5.82a2fbd.62b196d3c1b3a46383de06902a88e131.png 480w, /assets/static/RCP24-slide5.cbab2cf.62b196d3c1b3a46383de06902a88e131.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCP24-slide5.cbab2cf.62b196d3c1b3a46383de06902a88e131.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCP24-slide5.cbab2cf.62b196d3c1b3a46383de06902a88e131.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 732' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ebb63353675ff6daa8fb5f0302b33c2e'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ebb63353675ff6daa8fb5f0302b33c2e)' width='1024' height='732' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAuCAYAAACYlx/0AAAACXBIWXMAAAsSAAALEgHS3X78AAAKWUlEQVRo3uXaR6yVxxUA4OsNQfIGhFiwYRlZYpEF2UQiCyTEjl0kE6REioBFJATLKAkIZIUFSMggh2bTQhPd9N5MMTbdlEfvvff%2bYPK%2bMQf/7777Co/Hw05%2baTTzz5wz/5x%2b5txbevXqVarVql%2bm8ufVy5epDtz/SCtVIv7hwRPpWL9h6eif/pFurtjSKBNe/oIZ9BMDXv5I/PMbt9Pxv/4rHakhfueve6Wtv/pturNp149MqK6us0E8mFBds17si81csRWZVj5XxIm5gIn14l6VzlFfKxfWTwyoWfTcWrk1nf77mHR15vJ0ctCIVPXHv%2bX3zIAX1XWIf/ToUbp%2b/Xr6kA%2biXrx4kZ49e9Yk%2bAY14NHxs1nyu3/zh3Rx3Nx0Zti4dHnyojoa8PI1/MqVK9PixYvT5s2b07p169J3332X1q9fn86ePZuOHz%2bevv/%2b%2b7Rr1660adOmtHbt2rRmzZq0cePGtHfv3jRnzpy0YsWKtHXr1vTtt99muDt37qSdO3e%2bafacNWtW2rJlS4a9efNmOnbsWFq1alXG870FCxaky5cvp5kzZ6Yffvghz/mOc2zfvj2P7fPNN9/kbwTT6viAeK7/Z2k69Ls/p8O//0u6%2bM9/11AezvBVHQYgZsmSJWnp0qWZGQ75xRdf5IMiGpEY9OWXX2YGTJ06NY0bNy7Dff3112natGmZkNGjR6fp06enEydOpGXLlmU8a4j6/PPP89qYMWPS4cOHM2GDBw9O27ZtS5MmTcqw165dS7Nnz87jGTNmpPHjx6dFixZlvIkTJ6YJEybk3npRC0pFYmxy6NChVHX6ZNq5bmPatXhVqjp2NB2sOpwlGXBFhj1%2b/DhzP9SPBJ8%2bffqjM334MD148CDPUdHsY54/z%2bvm4ILx%2bC4pZzO8dSvPW7979242sydPnuQ534k9wwRv376dz2PNd5zTvDnfs493eFq9DLh06VI%2bxOYaqa5evy4tXLY0zZ8/P23csCEtXLiwDgOKWhPzlcZNscnm4NW3R/N8wOuGi/fv309Parj2tIbr3kOi5ciVwmDRk%2bN%2bJc9bDlf0/MVxpVYJPzx/fK/Smcrx62VAuTSaE%2burX0eUeKorhM%2bGWlMk19j3GoJvlAHv0uLjVVVVacqUKWnHjh21DlMu%2bXLCI6TZp7yv9L3wLZznV199lU6fPv1WTC%2b9D%2bKFpU8//TQzoG/fvtmLe%2bKwlSQaxF%2b9ejXduHGjVhNR5BrhaMsjEWa3a9culUql1LFjx3Ty5MkmM6FFGeDhtfv06fPG23p69%2b6dzpw5k8f6YcOGpXPnztWKxxFR9u/fn2P5vn37MqzxqVOnstcvOuGA591HjBiRif/4449zX2R4qzGgKI1Bgwa9CYMecXnIkCE5CRkwYEBep67FQ3pImslIkjBCzIdz4cKFWuErvmV91KhRmeEIb9OmTe4xuNUZUNSCfv365QwsHgnIwIED09ChQ1P//v3TZ599lg9ezgCqK6MkfQzACPkB9ZcHlDNApkn6kqoOHTpk4tu3b5%2bOHDlSS7tajQFh43KG4cOH57GMrHv37jlZ0hCPCXPnzq3lFxB48eLFnOaSuJzk/PnzmXitUhIm7IHzdOvWLTOgZ8%2be%2bV3orpS3tIoTlHP36NEjjRw5MnXt2jUdPHjwjTY4tNxerlG0Zyouo2PXkbExIT6lPHsL6b5J3WsY1KlTp8yAzp07p3v37tW6KDXEhPdiAohwkaHOVLmYnDQWBYrX1ugr5SSRMrsffPLJJ5n4jz76KPddunRJY8eOzcxrzBRK76PI0FgS01B4qpTWVoKxB3UPwtu2bZudoN6c1qtXr9Y1gXIii9KslPK%2bTYQp4obPYFoSIH6D44vGOZq3Xp47tBoDGktrW/P5IBoQxHN24vWBAwdyMiMBEu7iSizTk8zIADkzuYB5eJyid9HDWHSAbx0OG495EcS%2bV65ceWMirR4G63NUihKKEwom0mOFEQnO6tWrc8iU7Sl8KIQorESFSIFDNUeveGJt3rx5Gcceoo3K0OTJk/M3FGAwtKk5QKubgJgfcT/GxYMW8wISZL9FpxdrJE9j4sod%2bzRF5d8LA%2bpzcm/r8MpvisXMr1KEKB%2bX3/sbqie0KAN%2baU%2bLMSBUc/fu3fkerqboBscRsUXhidMylrK61WlSXP3Ro0czjjVODK7LFHyOTTgDG7icJNVXcQYv5Ok5wtjXt%2bIsenNghEUwUd1qMQ3wiLeKpj6glwEihpPimBDlYoMhKrkcoMMpX5vnBDm%2bcH5xHd6wYUPu4ShrIyLe9%2bzZk3sNjkYQ9najNPZ9magLlUoyx4mB9ZbF39ZWiykuIhFIOiSLMGFJ%2bKMF5kiUNCNJAU9imGUMXg/OoUkvCIBnb%2buBr4eLYIRhHFgaZA%2bw4OI3ChEpHG34hFJL2DtvLfd3gCAWQ7yTiN5hjUkOcxyMNBHm0N5jDryxniQxIQiXU4DHWPPmvGMErYKnp4nwtThLsUgTT7MY4McQ8dfhjIuH8GFSpc4OaM66eXPK7hpC4GoOCA5jzJMYAqk1NQbPpjEHvL1InKnxA8FY6%2bBjHqy6BKaYY46Ew2y8gy29LfF6hyVpjsqYc8J1PYdD1TCETwBHJUkAUYgzF4wJ54UgcA5OK8KBhkm44sKxByaF6cC1Ho4u9nQWfZgl89LM2wOu85eak92Fg0EkKcvQcJujohmcl3XZn2oNG3Uw0iDt%2bM2P5ELC9nQw%2b3BYpEmqJAZPlmiNI7M/GEwnTXghYTCIjjHc%2bA2RRsFzXt%2b3f7NMQC4u9MjIFC3k6iRCSjhsXjMXeX0UOMBE8SP2sK6pI8RYrg82fh6jVd7tF33Ag7Ue94dYj2KKd/PWwRlbd57S/0Pi09BTepf4Lw%2bnqtSU/dIEXGeTYZ80ghMyZnM4z97ZLNsED8872PDmnF4kVuA0/iF8jRbJEpi4FUbvexrz0IcPMC4WWN85EWLb7C/CFRtno%2bya7ZsLP2CeffLimBJO0bt17/yCaIBQxIWNh5/gP4zhGfMJbpkcozEm%2bZ6bJjh7s33v/IL9ijXG0oe4B5C4A0dCE1qEUARwTsbWwUaShZnmMQijzL3rfaDUkuXwpj7CHK8caokQLTJIIdM4cnlEY4Kog3HG1qP%2b/y7VoRbRAJIRXqhxJCBUjYoqZCAiEpZIVIzhidXg2THi4NCIgMcETJETRPZnPZghxFFz34eLOZFKOw9G%2byat8s5vtfhlSBiiqg7ImZFwSJGKO3zk8pGokDwiOcVwfOY4MD1Cw%2bHB42QDF0zAR84fe4bjtHfAgrHmHPX/S6wF/QAvr3QlKSJFZS0SIQmHIAkOKZySnqQQInHRwHFumAqeg4u0FmHgI7kJzYq55cuX53dw77UeUKkqVPyVJ5IOCZEeYyQfkUKbQyhpx8/ixTXSjEIoMyJ1cLQNTCQ/8fM5bYITP6vTzFapCL1tZHDIsHVSpilSXXbsH2dx31f81Ni51JXN0wYaBY9q/6zL4pX%2bB1T8L5ImKTFPilJWFZv4r0%2bk11EgjcIomPhHWEP/L/pZVIXfdzr9ruf4LzdiKVKCvlfzAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCP24-slide6.82a2fbd.27bc17be8677c5f8524f9d9c378c08dc.png 480w, /assets/static/RCP24-slide6.cbab2cf.27bc17be8677c5f8524f9d9c378c08dc.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCP24-slide6.cbab2cf.27bc17be8677c5f8524f9d9c378c08dc.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCP24-slide6.cbab2cf.27bc17be8677c5f8524f9d9c378c08dc.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 618' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-248946c00aa0f5c107191eabb78b4116'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-248946c00aa0f5c107191eabb78b4116)' width='1024' height='618' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAnCAYAAAC/mE48AAAACXBIWXMAAAsSAAALEgHS3X78AAAH8klEQVRo3uWay09USRTGO3HrzpV7Z%2bEks5pZmvkLZmEyiwmDLmahZmLixAUYSNzoREcjKqio%2bFZQUQOoiLzEtyiDIi0IIqAoyFPkrUA3Z/pX9OmU19t0I0gzWqRS99br1jl16nzfqcYzMTEhJvPn94udJnx%2bCbV/pdkTegkKPz4wJP3l1TLa0TOpBL//G1BAUPjR9m6pi0%2bSyh9%2blYrvfpHekvKgJfg%2bGajJHxhrZ9qcdVP1idTfrd1eR6Sx0SnAN6mAtvSz0pqWJc3JqfLv98ulZvlfk8cAJTiEpxwbG5P5nqJUgM90bvnniFT9/Ic0JqRIR2a%2bNPz5t4wNDn8yEam0tFQePnwoLS0t8uLFC2lra5M3b97I0NCQKTs6OqS1tVWam5tNW1dXl7x%2b/Vru3r0rjY2N0t7ebtpHRkaku7vbvDOGPpWVldLZ2WnafYG10f7q1Sszb319vZmzpqbGlL29vWb%2bly9fmjH00czckZTwkQX4WrvE%2b9Pv4v0xThp%2bS5SB0gdBO//U/LOysqS4uFhOnTplcnp6uly%2bfFnq6urkzJkzcvLkSdm5c6dcuHBBdu/eLVu2bJHCwkLZs2eP6U99SkqKVFVVSUFBganbu3evmXfTpk2ybds22bVrlxHywIEDZi7m3Ldvn1F8UVGR6Z%2bZmSkbN26U06dPy/79%2b2X79u2SmpoqO3bskAcPJtfvcznCHymA1NUZ2KGOdmny1oo346zUF5RJe0%2b3EWh0dPQjTZJU22i5r6/P7BD9eGfnaGPXqaOkjjHsMv3J58%2bfN/3evn1rdhEr4B0r4J1yeHjY7K5aF8%2bDg4MmYxlYAN%2bmraenx4zhW1gm34hoAf6gA8SkiguLpKCoUHKLCyU7L0dKS0qM1t%2b9e%2bd6DP4PKSofoN4cLfb39ctIoBwKaJjd9AX9g3NgOC%2bNYyQzbiovr/XTQQF9Zm79TrRoEZkHhNnVaCbRc%2bZMal22sJHmsdfh1u53krVZI0IzyCo85xMHdOjQIRkYGAgpRhftpgRbCLcdt/P4%2bLjpjx/ZvHmzZGdnz1gJM1aACge0xcfHS35%2bvhw9elRWrVoVgiESDsupBK3HieH0FDpxmjg9Fdj%2bDmnZsmXi8XhMBj0Mgw30jYkCdJHAXFlZWWiRwBBenoRS1q5da4SzlUBqaGiQGzduGMjCEd%2b7d0%2bampoMMjiFf/r0qdy8eVMWLlwoCxYsMAqIi4szbfiDmCoA3AbnNdXW1srKlSslIyNDVq9eLRs2bJCcnJzQbhnqHYDIR48eSUVFhYFbBEQJWATwpwrQIwYHSEpKkiVLloQsYN26dbG1AF0cO7lmzZrQohMTEw3p4ZyigISEBMnLywvtFoldvnPnjjx%2b/NgoAKVRcgTczL8kAMv4ma1btxrhFy1aJM%2bfP49Idr64E1RzZserq6sNk1uxYkXIGjDb9evXGyJk7ypnnjr8ACSGrM9O4mWjDIpFAYsXL5b%2b/v7YWoC9yGPHjklycrIxUz3vunCYm9MJsmjaKe3s5B62AyQGsY8AVofD/FxY9MxmbO1MapbhYDAaBqfKICZYunRpSHBnxseEg9o5UwCL1R11Y4JOQuTEezcGqArAOaalpZngB3p%2b/PhxOXHihAmeDh8%2bbJ6dMcucKyDWsUJMfYCTHOGdgTUCKY3z2SE8P46LuANvj9PjHdgjsqMdJ0gdER1jYZWQKur1XoHIEUTQ%2bCPmTtCZgTxi/mvXrhlCdP36dWPG3BWA/dwlENNfvHhRbt26JV6vVy5duiRXr1419bm5ueZ%2bgbsC%2bjAGwkQ9czAevvA5535OLECPgd4RsEsfPnwwO037%2b/fvTUm7%2bg3a1H8whv70USvgnXrG8jxvgqFIcYKT/oYLh%2b1LVrcYwOlfZvda/AsJPt%2bcXlQKsD8wXc2r8DC88vJy4%2by4yHzy5Ik5s8%2bePTO0GQcH9aXk/OMwocQ84yt4574QZ6oUmYiTuAG2ybubdbitc6o1uypAz6xNZpTD2yzN5t%2b2yZLx/iyW84u3xolBZlAGGSUgLJEfikJYIkFuhGlnDMpSwREapdBOf5AAP4AP0bXqOvAjtOna7Ot7%2byiSPG67x8LwsuwawcqVK1fk9u3bZjG8E5RwvY33xrvjtXlm5xCU0JZ3xnCDiyLoj4CEzAhBG99gd2lHEQjJHAhOP8bwrkqABqMclMU3QBeIEc/MwzpR0v379803QBHmYo3IhDzU0QaisB5POEYHd2cXuVkFm8FrvC/4DBaD2TzThrlTmjvFIKbTn37U05cdo4S3UzI3z3xHS%2br5HhjPBYnyAdqYkzb68M4zyMA89rq0PxbAGlgT79QzRtdKX7JnPjG5WCTPVM5sur/7RXvTO525o/kdMNyNcDRr8XztP3/HlAh9EwqwzUnDYc12fSTzdAuf7XH2mHDfmc4PIrOigJkyPjdnO9UPNF%2bCIXpmKjxQBI6DsWA/GAwvAGPBdeAHLgD8gNFAG%2bSFcewe8AbbI3oEs4Em%2btAXHsBYSJF%2bC3gDy2mDk4DnyiSBWvjCdCLEGSsAwQhhEZ77f34V4ocRbmy4JocJnjt3ztzicC3O4qHEKA2chsDw8zehMxiPEpiPTNiLYiBM4D3K5a4RkkTdwYMHDRGCIOnc1M%2bJAmy%2boBccEA77stMOdSEr7DbcX%2bmqnlkEV4rNM23Mp8RF57VpOXX00et15oZAOW%2bU5wQFpntW7XDX%2bf9GkfxFuIDtc33Af7D3J5t9aSVNAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCP24-slide7.82a2fbd.69f0dbe6e76f0d7bc9b22f228335901a.png 480w, /assets/static/RCP24-slide7.cbab2cf.69f0dbe6e76f0d7bc9b22f228335901a.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCP24-slide7.cbab2cf.69f0dbe6e76f0d7bc9b22f228335901a.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCP24-slide7.cbab2cf.69f0dbe6e76f0d7bc9b22f228335901a.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 713' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-70503b473e422a684e4e8c81de0b446d'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-70503b473e422a684e4e8c81de0b446d)' width='1024' height='713' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAtCAYAAAAeA21aAAAACXBIWXMAAAsSAAALEgHS3X78AAAJa0lEQVRo3t2aSU9UWRTHS2PSiW78Esak173yC5h0b9reuQQX2oaISCRBhbRtBxvEEBZNiEOjOAuIoqjghMqggDgAAsqsojjgBIhaxWl%2bFw65PN8rCqoK0t7k5r16dz7D/wy3fKOjo2KqyPjT75fRQGD8OcrXie/fafXZP9zKaMAizvdMAErg61fp/ftfafo1Xrr/zBX/4NAEEQKugwMe3/9/BPAHzEFf5JdIa2yqNP4SJxW%2bH6U9Pn2cAP7AFCmxpUUJodX5W6t/TKW03TnObQzFHkPV39quxbmG8z2YKvsmG8cGdCRmSt%2beQulK/Uc6k7Ol%2bbcE8Q8NfzOY8v79e%2bnt7ZXZlE%2bfPk3bZ2RkZNo5tIZSvIjgU%2bCj9Py1R27%2b8JO0xKRIT0aedP2RIwHHAP9E3wsXLkhRUZFcvnxZCgsL5eLFi%2bb5/PlzqampkYqKCrl27ZoUFxfL6dOn5dixY3L%2b/Hm5fv267N%2b/X86dOyelpaVm3NOnT6Wurk4qKyvl7NmzcuXKFdPn6NGjUlBQII8fP5bW1lY5cuSIXLp0yax94sQJaWtrM/NWV1ebNY4fP27aS0pKzDvznzp1apJRbio7ToAJkRodHpGupCxp%2bzlOun9Pk0D/wAT5ZIreU2pra81iVVVVcuPGDbMQm/n8%2bbOUlZWZw7IRNsEG8/Ly5PDhw3Lr1i1DFAjBpnfv3i1NTU3m8Iyjjx5g7969cuDAAbl3757cvn1bMjMzpaGhwazDvBAOYkA0mAHRaD948KCpEJB1IZQnAVTXGu7ckRtVlVJRUy2lRcVSU18nNXW1UlhQKK9evXKdwBY/Wy9tvXaWL1%2b%2bTBFLDqfirtLlxBm333bfUFXAFQN0w11dXVI7RuX62jqpHuNSeVm51I1xGU69e/fOdRL7m/Pda2E3PPE6qFd7qP5JSARwLmh%2bB9lYsAUh5NcxU6rPUMxQOKaUNZAE/4TTFrYjNB01g7W5ibuTcNonGKdCFd/ZMCgsAkzHRcrQ0JBkZGRIXFyc5OTkTG7K1lcnx7UdbICjgCjvPMEYHWuvpXOw1sqVKw1o6jzzQgA9yIYNGyQ3N1fevHkjO3bskO3bt08efHBwUDo7O78hgnHAXrwwpg4cevbsmXR3dxtzyjtEdRKAgkn0%2bXymLlq0SNrb22dFBF%2bkuP/w4UPZuHHjFLGMiYkxxOAw2dnZsn79%2bknLYc/BWMzgzZs3paWlxZjNR48eycuXL7%2bxKP39/caUrlmzxhx%2b8eLF5olppYSKPREnAFxbu3ateR8eHvce09LSZPPmzbJ161bZtGmTecd/sNUCgty9e9fU%2b/fvG07yjvOCt6nE0v7Y%2bZSUFFm3bp05%2bIIFC8wTos2LBNib27Ztm/HwKHfG/IpVq1YZr3Dnzp2SkJAg8fHx5pA2ATCxcL6%2bvl6am5ulsbHRVMTflhYl9OvXr433iNosW7bMHH716tWz4n7ECMDCFNzWxMREo%2bsrVqwwnh7l48ePxnVNTk6eIv4QATGnnQpOaOWgblbDBtTly5cbAsTGxk6RlHmTADioop6VlTWF0/RTQLNBkG/2wakQQ71DN7BFarZs2WIOv3DhQlm6dKlxnW2TPOdWwM0PUJG0Q1I3MxiK/df5wRNFf2ddsmSJnDlzZkZY4ItkckE9QBZXj9AZ74dDXDAhPT1dUlNTjQ8AyFLBmF27dklSUpIJlGYiBb5oZVqcCQsvR2g6zzNYXOBV5kUFnJvHFBJFvn37dtIRsqPHYAGUTTSwwB6HZFGZnzZAFHOpXuSc%2bwFe4oojs2/fPoP%2bmEbyBSRPMIPE6CQ4yCccOnTImDUqprO8vNyMIZ9w8uRJUxlPJV9AXoA%2bxPrE/DhQOFsz5XzUJQBOsLEPHz7IkydPDKcGBgbMs6enx3APD5E%2bmDwkBXTHvuPtwVXG6TuOEYkT3hnX19dn2rEY4aTuI2oFZhrlRaqEA7S%2bSAPeXJaZmNGoEUA9PUQZscaxUeBC/LUiuprFpT8gRl%2bAUh0g3unLd/rru3qJfFNHiXkIm1ErVAgAZDz7YMyc%2bAEKeOg0uT3SZ1QCFkCPxCVJS8CLIOjBgwcm%2b0vGGDeZyI%2bEKmBIG30BSmIDgqKrV68awOM7MQVAyW8AETBkDAlR1mRegJNKOwQJRQp84brAzosM/W47QuogEe8DYB0dHeaAABnWgnAYkMNCaE6Ab8QUcJc%2bRJtwn3Y4r5cfzqSLjQWhpMt8c6X3bASucXi4RdwABwljuQcgIYJJ4zfhMO8QhP5IENEiFoQxs8GKiBKAgn6yWTaKyKMG2HFEnYOyeSq/EV/EGq5yIJ60MQ5ioLOM4R0Ow3nakRBCY/L6SjRUjTVJilD5zT64hGEcc/Kb%2bwramVej1YgSABDjIIgy3MN%2bo9NsgkNqpY1D8KRymaEqgGhzMMCL74znyRwcGjsPx7H/9Md5siv9UCnUg374DHyDUBCAdVkrmGn0zZfpQ89JZrJRCMPhkSAAEpVAYiACh4Ao4ZrLqIOgHQlqtYFIgVFBCUDDhPFUM6keIe%2bYMzxD9fntubzeFQCde4gaAdwyvOFcX0XCI3SuGRUzqGYPvQdwQGhsNjac7Cy2GnDSGB49R0cRc0QaDqvzhL1GbwE2khm8w3n0HgDDT0BNGMN3ABP9py/t2HzeURm1IoAfagVGaWLVSxLCIgC2m0PjiIDCegOs19q0IdIgM3l8bnCJ7iAGAAhYcSCu1YkAIRrWBCKQ4oKQODq8813BjnGYShwkbo8Zi2PFb54QBNOJM6bheEQJYIs8B4CLdg5P0%2bRwR1Pk6pkBfs4/P9AGFuh82o70KB64qRhtetvMGDAEKcGqIGE8tT2qsYBbJsbGAbf7Q6%2b%2bwa7HvXKQXveSUbcCzhDU7T9Dtqvsddnq1cdGeWe7M/R1/g8p1NDYF6lMsH017lZUFPWp3pnTatiH9coyO8c4%2b9tzR40AuiiABbABgoAW1gCdxXlBJ0FlsAAkB%2bxAbhwggJPoDt3VSI42vuEI4RLjCaLnWBnmZg2Ajv4gPcjPb%2bZiXdxnwI/x1OkAMCIE4KAciJBWc3e4pxAGc0VIzOHYUH5%2bviEIeUA2z2%2b8PUwe33nSHxTnO5aCeABLoAfDwjAf5pY5WI925mQPVPrCFFzjqBHAqQKgryYonEXv%2buG2WgyeWAhFf0V12vAMnX9/Q6w14aI3TKyn32xrY/%2b3YE5uh90QO5iH6ObBuel9sDlC%2bRbK/v8DpY%2btfCgi1IQAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCP24-slide8.82a2fbd.98969a1c8e7b7d3c073f22ac923cdff0.png 480w, /assets/static/RCP24-slide8.cbab2cf.98969a1c8e7b7d3c073f22ac923cdff0.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCP24-slide8.cbab2cf.98969a1c8e7b7d3c073f22ac923cdff0.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCP24-slide8.cbab2cf.98969a1c8e7b7d3c073f22ac923cdff0.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 686' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-65dbd30a8571400eb7a1722dff76fc79'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-65dbd30a8571400eb7a1722dff76fc79)' width='1024' height='686' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAArCAYAAADIWo5HAAAACXBIWXMAAAsSAAALEgHS3X78AAAIp0lEQVRo3t2ayU/USRTHOx40no3/wHjxNIeZA2cTuZB4chKTGS/e5uCSwUQR9OBNR40RSFxxwAXUUSJBRSMKiBubArLIrqwqIrizNLzpz4PX%2bfnj1yzdjc1YSeVXXfV%2bVfW273tVv/ZNTEyIVhGZGB8XZ5nwjwsjQZofsPqCP6aYHx0YksGiChnp658UQqD/xxfAFPPDnX3S%2bHuSVP78m5T9lBAQRPmUJfinvWhlPPCuVRtz9rmre3wmeq/5nHuYbZ25C8A/KYDutGzpSc%2bR9uRUqfplgzT%2bkTQpAA/mR0ZGZHR0VBZzsb3OQQB%2bJez8%2bx%2bp/HWDtCQekN6MXGn964D4x8Ym8cHB/Fig7%2brVq1JbWyvPnz%2bXpqYmaWtrk97eXnnz5o10dHTIixcvpKWlRerq6qS5uVm6u7ulqqpKHj9%2bLPX19UrT1dUlHz9%2blPb2dqXnd0lJic5HHRgY0HFbg3eePHmi8z58%2bFDevXsXpGUO9sBaPNnHbMxPs4CJ/iFpiP9T6uI2StvGFBmubpqGA5SvX7/KmTNn5NatW3Lx4kW5dOmSnDp1ShksLS0N9mVlZcmFCxfk0KFD2s7Ly5PMzEzJzs6WEydOyOXLl6W6ulppc3NzJSMjQ44cOSIHDx6UtLQ0uXPnjlRUVEhKSoqOnz17VtesqamR9PR0fX/fvn26F9Y5fPiw9lNv3Lihe/V7uO80AVB6Ahpq7miT%2bppaKc/6V2rvlkp7V6dUlJfL2JSFOIXw%2bvVrefv2rfrb%2b/fvtU358OGDtvv7%2b2V4eFjdhN9oc3BwUCsWhBUUFxfr%2b2gLGjRKG1reZ14q1sM79EPDnKzz%2bfNn7fv06ZMqhXeYh72xzpwtgILpFN8tksKA1AtK7kpufp6UFBXJlStXlBH3ZDP53GLCgDkLgCfAhiRHh0dkLCBlpB5qMi%2bkhp6KhpymN1MkmGsUsCfz2jpu8w4/Cnho1X7PZzJ3GZ8KrzNtaj4aHHclas41Ik%2bEIqwUwG/79u0KZFiSRYxQm7VwiotBz5OKb1uIdTOPv%2b/YsUM2bdqkkWO%2bSoq6APxTAAm6szFA7Pjx47Jz584g4wBTZ2fnN5vVrDPAJCGN8NbT06NhEMDr6%2btTRr0EkJycLD6fT2t8fHzsBWAb2LJlyzeJ0bZt2xRYic979%2b6VXbt2TRMASP7o0SMpKyvTfIH67NkzRXGzHGOceYgaa9euDQpg5cqV8uXLl9i6gG0Q7RPTjbljx47J5s2btT8pKUldAw07mXr58qXcu3dPhQDjlZWVKjRCn9vCoNu9e7ds3bo1KIA1a9ZExHxUXYAEaM%2bePcH2%2bvXrpbGxUROexMRE3Tgat8J7mD7ZJDkBpg%2b9xX%2bvvIOMEL9fvny5CoDEynAkXEFEzQJIg9etWyc5OTkSFxenKa2VgoICzf6coIiPgxcIxRIeKomNEwCdFkPBypYsWaICOH36dMTRwBetCIAWSFNJSUlh3RsPFdawBGd1M2K/ERQMr169OugCK1askP379yuAhguGUQ2D7vgcKmmaLQfwAtmEhIQg48uWLZOlS5cGLWHVqlVqgeEIwRfNywXL0KjzuROYjZbcgHBJKKXaaZM22mfM8CVmFjDX7C7Wuf%2bCCsD8FcQGD4oChymOrtwBgOAgPb8Z5%2bgMoBEBiPGtra1K8/TpUx3jyVGYPtM6oZIx7gIImViGRaKYp8JO7WOO9%2b/fVwauX7%2bumyXccZlBPIcZgPLBgwdKR%2bwnGYIxcgKER3954CiOEG/evKnM3759W6NLYWFhEPiidym6iF1gpuP3ohSA2y3cbUuEnIAYChidx3Vn/6IXAP5JNLDoQHJj/c5Ex/otozR/thzB5hudup8w2kiyvwXHADaPP3Mvh//i%2b/g1vkuajC8DgOCB%2bTtjdjDC33kfnABDeIe0l8MQtNwPgiORngQX1ALQGCc1Ul7anPdpo0X6qZz76Xc%2b6adNpc0dIP02RgVk/a57ygURgNeHiMWUC8x3b140vnAY8JpspuIFaO58f7YrL/faXrThCNAXinlM0HmdjQmaOXoVo%2bM4Cw1tPmrYjbIVu%2bkJxQSmTaLEu3atRtuuxJ0FV4DWTpbmHtBxsrQret61q3pcEAA1F/KFyuZIXAAgjrKcwrjm4mMFH0BIXJiUBUlUuMkBsAA8KneCR48eldTUVLl27ZpuhsSFDTDOiZF%2b5ocBskM2SE5/7tw5vUPgboAvPgAfAEg/4MdXHzJHQJCkiL3Rz8eXkydPKpAyNxcyAOz58%2bf1N2vyYQVwzc/PDwozpAXAIBtiMW5uaHMAYWGEAYKTvvIbxngaLf20uQGCYe4LeULHvEQA5gLREY5pjzE2aB81mAs6mEYhZIamXQSGZUBLOo3AOBEODQ1p%2bsweqKyFIBEMSmKfpOZmyWFhAIuykJnoTAWTQ/tsJhrZX7RBdNYo4FW9AM4SF3fbyYgzwQn1qdw9Zr%2bdFyZe1Tk2n8jg%2bz8ee6N5NPZFwjw%2bCxBh3jzJ4GhbxocP49P4bkNDg/ooWSD4gE%2bT9dlxmXFOjdADqvgqfZwo7aQIDjEXR2X8HN/neIx/2xGZrNNcc8EFwEIAHZgAc7RfvXql53c2Sx9MwCRP6AArQ3ieCIIx2nwQQYjWhxAQKAKCMQRKv33/ByDBF/t/AWvz7ncRwFxcACbZMBsnCiAUtAQag84wTTQhGsAkm6ePd%2bxSBOFhBVSEgLZD5SLf1QVCZXFoAsZh2r700EabWAYaxVJgEoahtW8DjEOLRhEWQmAMS7J/gUCH%2bTMvc9g/QdxH65gchijms2wWDaIxmLYExhiCCcbQqmkfhrEA%2brEQ/B0h4hokXwiOfuZnbiwnkivxBTsOOwvMwwj3gWR1aBltkkHaN0FjlAqDCBHtwiR9vEc/7hPun6G%2bmwDccR1gQoNEDIQBENK2P0mRHWLGRgM9WiVFNpCDFhro7SJ0vn%2bEiNmV2GK5/g5V/wM2Judld/RdZAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCP24-slide9.82a2fbd.1ebcf8972d55c38474693eb9fcc083f2.png 480w, /assets/static/RCP24-slide9.cbab2cf.1ebcf8972d55c38474693eb9fcc083f2.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCP24-slide9.cbab2cf.1ebcf8972d55c38474693eb9fcc083f2.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCP24-slide9.cbab2cf.1ebcf8972d55c38474693eb9fcc083f2.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 783' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-862166dc1581624460b7e1aa48344fcf'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-862166dc1581624460b7e1aa48344fcf)' width='1024' height='783' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAxCAYAAABqF6%2b6AAAACXBIWXMAAAsSAAALEgHS3X78AAAJc0lEQVRo3uWayU9VVxzH36L/Rv%2bIpl22STddN%2b2uSZOmTbpouiC668Y0EVzYahRdYEhEhQiKgCiDCjiAiDgyiwzKJLMMDoBMv77PoV%2b8Xu57PO57WLQ3ObnDOfd3zvmN39/v3sjq6qqpBR2rKytGj3fcx9Qi3s1zHso8be3f7bLe3X/bfN/wWyZ81AxYXnEbHcsrt/bvd1nbt2lW%2b8ln1vTlT7Y8t/AvEza%2brGMlyiB/oz/ouX%2bMf1zQe4mMWdfYBOb1zr3GADaxtGQ9u/%2byiZIa68/Itu7fM6z5619sqqphjfDS8obNv3nzxmZnZ20nHGxqKbqHRI9ADej89U9r%2bPQb6/jxDxuPMqLrt3SbbWxde2H5LdeWl5fdswsXLlh5ebk1NzfbvXv37MGDB9bS0mI9PT32/Plza2trs87OTmtvb7fGxkbX39TUZF1dXW58WVmZ3bp1y73PGJ6/fv3a0eC6o6PD9TEP/bwzPDxsc3Nzjg7t0aNHVl9fb3fv3nX9dXV1NjIyYq2tra7//v37jpbWBh3WJyY4BtjKmkQXu/qt5YsfrOXzaPvqZxvNKtzAMS8D8vPz7dy5c3bmzBkrKiqygoIC27t3r9v4w4cP3fNTp07ZsWPHXON%2b//79duDAAbt8%2bbLl5ubaoUOHrKKiwj0/f/68Y9jJkyfd2KNHj9rx48ctIyPD9u3bZwcPHlxnRlpampszKyvLsrOzrba21m7cuOHG0w4fPmx79uyx6upqS09PdzSOHDlimZmZbvw6A6TKo1GuDY6NWm9zm7VmF9hgdb1NzkzbwOCgjY%2bNbWACx%2bTkpPX39zszQP1GR0ft2bNnrh8pDQwMOGnQkOzCwoLrH4vS48z74%2bPj7l2YUFNT4%2bhCE1qiR0PytImJCXv58qU9fvzYXrx44a6fPHni1vDq1SubmZlxDdq8x940H21oaMid32EAL9TdvGnFUY6WVVZYblGhncg/bcXFxXYiJ8dKo1yXnW0WNkV4px8bwuD8/LzjGm12etpGotzmGi7DRQvAArE8c6z%2bWB46Ht14EcY73n%2b9WTR6hwFe6eraL82PHgj9X9uOY4BXTYk2iYKrbWdALHPwm0uyLRWObVsYsLi46CZBKkFQWNgg2c0TpgRWBFwAMpyJVoAjQmBvb6/19fW5cVwTDsPMH0lkUWzuypUrLn5ev37dRQaaYjWLIo4HhcqtMgBaoDbQ3dmzZx1gAuQArJi/qqrKjaEflAfCFPoLM3/CDIDDAAomB%2bTQYAKQlz4ASirU0mtSYfKBbTGBoAOmwAAOzqjjdBQ/wBhQH9dKlLaiAWB7pAquv3r1qrsG1yNltIC50EZaZWWlXbt2zUHgeBoQjzGRsBIC1gJNZbeXLl1ysBYYCwTGNDh7F%2bXFGkGM4YBpvEfDttEwVB%2b6XAPKMJHu7m7XT5/XB2zVWUZS4bW9TtIlVZ7rIEAF9mcjQbTA82iQcgccn2gq/WbM1NSU65eWMZ5nCAHto4FueYbpwiDG%2bp1lJOymIY7kOZgElcRro6qSIlAa3yBNoR/TuX37tlNdf1jlwMPj9PLy8uzixYvOFJ4%2bfeoyT9Ln0tJS5wC5JzPEJw1GEzbmpx/aOEfSbJ6RVTIeMyJ1x4y884ZmABuB61JxVB47ZDFIhjOMYQyM4D2YgiQJXfQFZZg6RFvSR/2hKxNkfp4rPVe%2b4tVAnqFt0rqgUB2aARCUerIwNqT0k827pCqqCdpIkDMNok0tAYndjGancoLYfKxsM8inxMtIUwKFtWl5XmyMRQqsUMVBNVUL8NYNN/PKjKcogtOjosMZM5Lk43n3MKE3JU4QbUDtaJI4DJKKJgODvXU%2baMbDAKi41DxRZiTlBBXmgKqoLY4HRxc2jWYTOD2cF/RAnZgEz3CMYA0YfOfOHWceFGwwFcYyRrXFhoYG91weP6U4wFsXhAkcgB85QhYZBpXJsRHTaYQxlcHwLdDFp6AFRAVMA7OjHEZjjMIg95hSrEJOSjQA9WaRKqkhKU0YBpLKxqnuUuzkjAYgze3MEJNygkhczCDOqtycTE6A5JA2TEX63ijirxl41%2bP9QLKVGkEkmcKFHJQwASqqHACmYCKMkYlsBVl6nRl05FC9kYRnnEGGXoi%2bFQ1MiRPkjLpSb%2be7QE5Ojts4ZW5CGBLFNuOZhzYAUiP2y9GR/uLkcHDQw%2b5hMoiTe%2bZlHCFT3wZgSKKmmJQTVFhCEmwU8IPnZbNInYXgF3BOiTgkDuF4sj4cHSaBRsnBQV%2bJGOgQDMK8CEF5gJBgSjUgqAbnryD743IYP5Dqun9KGLDVIkVYVBb2i3IyBdKECyKoFp4ZtZZqo%2bZKO7FTMjmiAfeEL6WqKzv4/4JIotInwQHfE58BHcryqOAI/6uWR5pMKgsgCSpZ%2bSUZpD3%2b4okfXb7XqrA3xgbhcfq8FRkiAE3vKC2NZSr0QVfvaCzXeld9jJMTpqGFOD2lvdvGAIoNAiVMhlcWaMFjE5b05ZdxwFlqdmgMYY2NEOLoAzChPVxjMsxRWFi43k9EwatjRmgWzyi5sVnepR%2bPTyQgDKJ1tG2pCquxYG9xgcUgdXwAUiEJgSnKDNmwQhULxi%2bwaJ5jMoyDcWwUSRLyuFe5jDHQY17mEm1oMR%2bNcSqT0b/Zh9mkq8KxbG%2bzKLFZeEs0/CUajRItviTMACSEKoLKQHn8wUEKjHRAbEgICQrA4PxQX1JjVBxpobqoMmbDGL2DVEldMROu0RK0hvdwsLxDnQ8Joy1oHVEIU0MbMD0aNDA33sH8eAdaXJMqK3MN7QOwbxZFzg9xCMueOevPENSfDbMQ%2blg0kyuXhwFsnrGETRVLUXneZXNsDCYSeWAKMBem6E8TmECkgZGcKYISofTZDHPEJ%2bhDDuuV8w5tAoQ4JKbavSAvm2ND1OkpZHCW40IislXBYTaGxHB6OFbVD3nu/dLEWOhTHoMhZJ7QRstUUE0FOkyYAXAR7rI4uAoT4L5UkgaTVMGBWfpYggZpgxQzYAw/L9HQEDaItqAFMhHosXl9/IAOtMWMWP8nxvpD5L1C4bCOLdZ/ft7UOKg4uu0/SOiDBVJHsgp5SE8xH5VFfaUVAjTcI31JU1%2bEBGT8TI4FwP7TP0Q4cGJ4WiIBqo1JkHvDmJKSknXnw2dyVJnx4ADUHZvHP5CvB1V4PohfZFT89EJhVYJUgKCPa39pWtUiGPPB/iMU9CtMvBTYX7NL5W80O%2b4nqVj/7MUrZO6U9g8ENEK87a7ZqwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCP24-slide10.82a2fbd.822682d33ae51efc62d109c1485833bf.png 480w, /assets/static/RCP24-slide10.cbab2cf.822682d33ae51efc62d109c1485833bf.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCP24-slide10.cbab2cf.822682d33ae51efc62d109c1485833bf.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCP24-slide10.cbab2cf.822682d33ae51efc62d109c1485833bf.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 632' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-4078f5ec767bc5e4c30540f2b14c308d'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-4078f5ec767bc5e4c30540f2b14c308d)' width='1024' height='632' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAoCAYAAABOzvzpAAAACXBIWXMAAAsSAAALEgHS3X78AAAG0ElEQVRo3uWaS1NURxTH5zvkI%2bRjpCrLZJN9NqnK1kW2WViVbQiFCEViCkRBqMECFS0REXkML%2bUV3iAOD0FgkIcK8hRkZjiZXzPHut7cucxcYDLoreqae/txuvt0n//5n%2b7xHR4eyscUjZpfnsNIRD4p%2b0yTzzp5fcJbO0dKIH0RCogcTX5vbkmCP12UoW9%2blvnfi4%2bU4NAoGt8p/GqyliWT3OqmKsupbco7gCeU75f5P0pk9PsL0vXVt7Le0Gnyo%2bFPzSGTH%2b8mEGs89UuWjP/4qyz%2bXSWzv/0ly/7a/yiAp7u7W0ZHR%2bX169eyuroqb968ka2tLdnZ2ZG1tTV59%2b6dyV9ZWZHNzU15%2b/atPH/%2bXBYWFmR9fd18f/jwQTY2Nkx92gaDQSOH8v39fdnb2zP1SMh58eKFTE9Pmzrb29umHX3QlnfakZ%2bqEuImEDENtwO9Mvj1DxL87oIsXPxTZHf/SAGWrcVz69YtqaurE7/fL5WVlZKbmytTU1PS2toqVVVVUlZWJqWlpXL16lXJysqS6upquXHjhhQXF5vyK1eumAnX1NTIzZs3paioSAoKCuTSpUuSl5cnT58%2blYaGBsnOzpbbt29LYWGhtLW1SX19vVy7ds3Iys/PN7JycnLk8uXLpj3f9vEmvQNCsdWZWQzJSFOb/FPol5nhMRmbCJp8q1Z5WAVW5f3792YVQ6GQyWcllpeXTdrd3TWrv7i4aOrq6pKYOL/kUZfyV69eydLSkpHFDqKMHYMcfllpXXntnzLk05Z25HnaATyjY2PSGghIoKNd6tpbpL6xQWofPJD%2bgX7HXeBke%2bcaA4z7C4clfHAgkYOwROM8wEmoE5I7eQU39E8W5a31k%2bnDOwhaVtDJ5X3%2bROgLTSdWQCJTcNq6biTqpFs57QrIREBLiwKi8Zihp6dHent7ZWJiwri15uZmaW9vl7t378rg4KDMzMwY3w1f6Ovrk87OTmlpaZFHjx7Jg5h34bu/v1/Gx8fNN3U7OjoMB6AeRCkdSvB5XX2Y2cuXLw0jZDIo4vHjx0YJw8PDMj8/bybExMZiLpZ3lKa/KGV2dtYwRBRGQqEk5OHTYXr4%2brNUhM%2brvafTBJywxMkte8EQ32nYeiROpZ3quynLiWekG0d8x00eekrQA61lW0M7NfghUIG2mlA6FrwoTaY%2bZXNzc4ZcYSoESsjSoAcKjJ2TdxAjX7wjg3ylupSRhxzqIBezoQylQ8VJ0GDkYo6MT8eoYzuRAuiQ6G9gYMDYLgmgojPysGkeJskkFPywe8rh8QQ2fDNIBTqwAtmAIm2ZEEoGFOkDHKEN/dy7d89MUsGUMuIClAxOkFdRUWGCrMbGRnny5MnHCPRECiCppllJOmY10C4d884vGp%2bcnDSdMhnaEbpSThkDIWghAGIn6A4hkGIirBT1WFnqohjKqEvfakbsAt4ZS9RyfKceQ%2bm8llH/xDuArU6oi%2bChoSGzgiRWBjeGtru6usyqk3R1qKurzmrj2nTX6DsrzjZHadRFSYTUyFD0dwu2rOO0g3OiOObUQBDtcnBhAqhYsj7WFbEDIjatNq%2bIbW1nlZtxRMjqYtzQNlFAdRxCnwsmmKySvIa%2b5zoaPC/8/0wUwANyA36gOO4QMATksGncGPQZQAXxQXje9QiNcsWSc6cABTJQHJ%2bvfh%2b3h38G8Ql44BMETeXl5R%2b9Bwec%2bO6HDx%2ba%2bqkeamYkBih/4B0/DrqzCzSfb/UCuDs7wGbcDkh0Buh2ZOZm38fFBHaZ9m%2b3G6tk655qMHRcsOO1bqK8ZKPRZNyr7zi7BqiUnhKzK8NTUIMC80BvATHAb2RkxLA7eD1MEuYI8HFmAAt89uyZkYPNwwz1NghmSF%2b0QzayoMcwSegyZVBsykiQJtrSN3ECBzNc2tA/Y4Wmg0tQdwAaEqammTQVZgBQUwbPL4OnAyguioAOI5RIUdGefAZLPeIBwI/2lKEw5JBQEmBIPpNBWUxa29OGfgiemCTf5Oui0Eav1wBaaDS3RzpO5oBSUT4eifERg1i9zZmaAAP0KoNV0mDGLtMp302Om3l4BsFkToCtNut2pe7Ul93mnRbE3o6dGIlf6NjHcOpngqpdO89PRHvtbaztnJQYSdM/VHxeJu%2b0PbFfbCxVc0gV0f/3aJAHwOPa%2bs6dO3L//n0DWryDvJzOkAfaBwIBKSkpMUgPkF2/ft2cGdTW1pq6XJ%2bD8KA%2b9ZuamswVN%2bVcqcMOYZBe7v3PdAfolbUeeOgfFVhlPfcD7UFrJooLxRWB4ngF2pH4bwH5uCrKSOpaNaag3lkejfsy9VYoI03ALe5P5pw%2b1T9LpSM%2b%2bBezm65XGLqjxgAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCP24-slide11.82a2fbd.905de52626e83108fb601f0d88863ab3.png 480w, /assets/static/RCP24-slide11.cbab2cf.905de52626e83108fb601f0d88863ab3.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCP24-slide11.cbab2cf.905de52626e83108fb601f0d88863ab3.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCP24-slide11.cbab2cf.905de52626e83108fb601f0d88863ab3.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 775' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-53f33d18b4fcd461897e5a2e2f4ec9c8'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-53f33d18b4fcd461897e5a2e2f4ec9c8)' width='1024' height='775' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAwCAYAAAChS3wfAAAACXBIWXMAAAsSAAALEgHS3X78AAAKFklEQVRo3u2aSUxWVxTHnztjamLqtNNF04Wpa9NFN41sjN00McYp6obY1piYGANBE0hIjGljSipoKirOKAoqCA7IJKCAOCAIggpOgBOKI4LA6fe7cj4fH%2b/7eF95fNa2L7m579177nTOuef873nX6u/vF5P6%2bkWfl1V10llSLX3dPea7v69P%2bmWA7l%2bWLH0xC%2b3tk%2baY36X6mx%2bl6qu5UjvnF%2bluf/KRCQ4d9PnK%2b4LUuUlu27qhU5pw5vOBAb29ZpEdueekOTZJ2rdnSU1UtJR98a20xP3hZ05g42CPn6EuaNy0s3%2b7odEHRgxH84EB79%2bbj9bkdGn6KVGafYu%2bm/in3Ps1TRqjE4Rm/QMdDNIYX15TUyMNDQ1msF4fI7u7u03d%2b4E%2be3p6TLlOhnet6%2brqktbWVnn27Jkp53n37p2/HW2g4Xnw4MGQvsmZg5a3tbXJq1evpL29XTo7Owcxgf50zqq1tB%2bkAZ0V16T8y%2b%2bk8usfpCU%2bRRp/TpS21MwBDegdwgAmt337dikvL5eMjAw5dOiQ5Obmyu7du%2bXGjRtSX18vp06dkrNnz5r8wIEDkp6eLvv27ZPDhw9LSUmJbNu2zbTNycmRkydPyvHjx%2bXJkydSWFgoBQUFpu2JEydk69atsmfPHsnKypK9e/fK69evpaysTA4ePCjHjh0zadeuXdLY2Cj5%2bfmGlnnt3LnTjEsftKWceWZnZ5syK1Atnh7Jl8a5q6T%2b%2b2h59Ntum/4M1QC4SqdMsri4WCoqKswCUlNT5e3bt3LlyhXznZeXZybIokpLS80kWAQMOH36tJkQzIJxmzZtMtKGGTCTXJm2Y8cO0x95S0uLHD161DDm0qVLsn//fsOM%2b/fvS3V1tXmnLePQtq6uTtLS0gwdiT4Zz1K1bG5ulqqqKqlpbJCK0jKpKimV6toaueJT8ZzsHLMgcdgGqCxqpw9aoWqnKoyKqpoq42j/5s0b/xbhuXfvnpw7d87fLyoKDQ/j0x/0uk20X50L8wi0T7o1de60p43mlu4lVKeoqEiKCgolz8e5w1mZknEoQ4p9ZUjsxYsXQxgQaJycjFWgEQpmGO0GK5TxDGYY7XYp2PycHv8WgEtwGePR5cuN5HycVsk7de7GLYXjklRaI/Xt9OG2H8uJY4Hf4fp5pdfHi0WFM3Y441peT0D3Gw%2bG5%2b7du0M0aDhJu1H/UAvHoGIM3WitNRqLx4ovXLhQoqOjZf78%2bZKQkODXJPtEg2kWhg83F5hevnxpMINTO%2b139erVYlmWjBs3zniA4TTBGg31W7ZsmfHt%2bqxYscK4IH2QDi4s2OQwyLgysATv5IAt2nV0dAyhV2CExrF4TdOnT/d7n2DMtrxePMhu6dKlgxAbeGD58uXmHTe3YcMGWbBggdy8eXPQ5NTd4dfBFqBM2l69etWUPXz40O8W7dsFw41v37x5s1n4mDFjTD527Fh59OhRZBmAqs6bN88/sD5z5syRjRs3ysqVKyUmJkbWr19vJq2M0vZPnz41gIoFI3U0oLa2Vm7dumXUXyVqH/Px48dG9RMTE2XSpEl%2bDZgxY4aZT0QYYFfFlJQUWbdunV%2biIMPFixcb47RmzRqT1q5dK5mZmYMwPen27dty5swZuXDhgmHC9evX5fz58wbns1AnL4VWsN/pZ9WqVX4GgADtwCtiNoBJL1q0yLwDW2fNmmX2Jw%2bS5PwAQ5CoHQSB5NjjagRhniYMoP2A4%2bT3eeLj4/0MgJF2dBoxBuD6UHm8wOzZs805QCeiWoF6B%2b5/6p8/f24Wqkm/yUNZf4XSM2fO9DMATxQIi0cdB2gCrwOfkSaqqRKy44TACYXr/7UvmLlkyRIZP378IC9AmjZtmsTGxhoGOo05agwINfFQQMge1QlMTpKnn6ioKLPYiRMnypQpU4whnDx5skydOlUmTJhg6uLi4hzdrjWakDTYIrwIo2l7tAvpsn2wIdgKEtrHNxpIYhtFdAu4UWs3au/lE5GzgFPQBKOICwQkITFCViQ1fFh8PfsjPXIMJT6fepKW8447BC9ozIBcacAfSBv0qO41lMZZkTihEcUBCuOXyYHBRJJwjbhJYDOoj%2bgOYaotW7aY6BEhLUJn0BLBAV/gUWgPiEpOTjZRHwI5R44cMX0lJSWZ8Br9/a3j8GhowbuBuAJSQnL2ww7xP%2bqg0eCoIj7KkCaSRZP0nXbUE8UCOPFud5vQqJH85AyI9D4fbs%2bPCgOCWflwk4bP3falCNCNxwnmUq3PWcJeaIjlxeKxuBxcgKJgeSw%2b%2b5PzOzllnAGw3hxqoGPvUnbnzh3THtsAoqOcNoS9aYe34J16bYeN4JQIndIShMGe0CeJsRmP/mnD0ZsyxqAN/X38MzRC7M8AHGH5UcHRlZMcZ3i%2b%2bV/AxPlZgTu8ePGiOd3x04OgBzl0HKBoozSUM1GsOTEEyhmDOhZDOeOop6BPyisrK00ijgCTKNcxoUVQeBoi4CNmgNMWwPcycRjBhJAGGsFkVBOo03M%2bUuIdJqIJSBeGIfnLly9LU1OToWFBygy%2bkbp6AQ2a4FYpJ3ACw8AEjI3UKbefQ/TfgucBEVwSPhxOM1l8NJzHXzNhypA8Erl27ZpZPMdW6NEEVJl6mMeCoIMGTWKh5DAKdaaeBEZgHMYlZ8H0ARP4%2b6S/2ez/Bz2zASM1iiwOKbFXYQhSZlEsEn%2bu5ar2bBWYpVshXEgdURzg5HYCDzLsa/aj2gAWxx5Gkqg/zECDkD57Ho2Anu0BE5z%2b%2boZzZ8D6lLczIgl4PikSdHurI5TGDAdoPlsG/GPuCHklyf8kAz5XGOwZFAZgAHAAIBrI0HA2dYAOXJoeibH%2b0GgwQ4/LaBFHXcAQ1p1jswZFNLSlwRJoOPrqsRka2pADuPSIrRc4%2bCanf/t/Assr6eO3CVYAavDPAB8CF/h4rrpwJ4cEEMKdAXpwebhBwA1BEZAhwAX3xrUa4DP3ewio0BfftGccfoQAgemf32hcs1HQpbBc2wF9CZhADy0BE3WfnjBApa03tJCOBicITgJmNL7PYYhDCzAVSKs5kJY66CgDEUIPhKWeRF/UcZBByuTQaD1JNQikCC2wmjIdh/mBL/RajyeHIbjNZSekj5SBnbzDbcANIEelx%2bUloClaAahBGgAfwA1aA/ChPf1ACwOQKFKkH6RKOe3ph3GBveRAbTSIEJoeyJgD2kQ9iJK%2bGZM5e6YB7GW4bP8/yN7HJrAADYJiB/SIimTIkSDSQPrYESQLDRoAPdLSe3/0hfYgeZIegaEnR0OQPsFXtiRjaHgtWFh%2b1LwAewyJwm32JlJE0twXRBOQDEFS9juSQ6pICk1AetCgDbxTrlCYd2wMksQW6BU9NEyPvGgLCS1BY%2bw33DwPiLjZInaMEDiBwAsM9jqnm2P2m5/2H6P20Jj9QSvs1%2bQi/l8g1G%2by4a68Bbv25vaHS6h%2b/ofCA%2bkv0IJZ2NGZAZ8AAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCP24-slide12.82a2fbd.2f4660999e418e1dce4bcbe3f2a5089d.png 480w, /assets/static/RCP24-slide12.cbab2cf.2f4660999e418e1dce4bcbe3f2a5089d.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCP24-slide12.cbab2cf.2f4660999e418e1dce4bcbe3f2a5089d.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCP24-slide12.cbab2cf.2f4660999e418e1dce4bcbe3f2a5089d.png\" width=\"1024\" alt=\"casper\"></noscript>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1024 596' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a6bff4b3a459cbb2c7cf4c032330b7bf'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a6bff4b3a459cbb2c7cf4c032330b7bf)' width='1024' height='596' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAlCAYAAADyUO83AAAACXBIWXMAAAsSAAALEgHS3X78AAAHaUlEQVRo3u2Zy09VVxSHj8Y4cNIJcdZ54x/QCUkHHVSTajph1GjaxsYYpQMsolFTjRpRqQWVquERG0SQAIIvUFFEHhcUeclDkLcgqCgKCihwWeVb6b45HC5y1cst2u5k5exzzl77sdbae/3W2tbExIRMoXG3OMuE2y3T2n0iZHlb/FBTh3T9/pf0xGfKaP/AJy0Ea9riG1ql9ttQqfzye3EFfSU1X//ssxDcPgjJ2YZ3X/ncfhh/VgF0RiZIT1yGdMckS/VXP0nZ599Ib2KW/nOPjU3rwLNNbPWPqUwTQGtEtNSH/CrNv0RKX3a%2btP/2p3THpnoVAKW/v18yMzOls7NTBgYG5MWLF/Ly5UulN2/eyKtXr5T4Nzw8LM%2bePdN/r1%2b/1veWlha5f/%2b%2b9sP78%2bfPZXR0VHnhGRwclLHJcbu7u7UtdfjHx8e1HTyMSfuuri558OCBtmtubtb58X9kZET7h5f3oaEhfUI2AYwrw6CrWlyfBUv5F99J4w87pPHHHTLS1j1tC2BuFAaKjo6WjIwMOXbsmJw8eVKf8fHxOukzZ85ISkqK0tGjRyUuLk727dundOrUKaWDBw/K8ePHJTk5WRISEuT27dtSWFiovPQDH/zh4eGyf/9%2b5a2oqJA7d%2b7I5s2blTcxMVH7LisrkytXrmgbFLNnzx6JioqS1NRUOXDggOzevVsOHToksbGxcuTIkamHoHtSCIihr7Bc2sP/kLawKBmua/GYi3vCPc0C0Nj169elurraI/1r167pEy0xISZaWloqd%2b/eVS3xfvPmTXG5XHLv3j0pKipSK2hoaJDDhw/r4jo6OpSnpKREn7du3dJ%2bEQzjtbe3S1tbm6SlpUljY6PU19dLQUGBPHz4UP8xBnOCl/4fPXqkY964cUOf9EN7yywEk2Sw3JwcKSgtkaT0NMlzFUleYYFkpKdLyqQEMTOz351ngL9Kb2%2bvZ5yAngFoC%2bmhperKKqkoL5eSomIpm5RgXV2d1NbWahunAAyvOaUh8262Cu/2NubdfLP/81ibo52TnGPNVHeO4yTLrkk7s32f2yf2Li6GQ4eDyvTnC7k/EG/Az5iQL31Zvk7oXSZmF5hdo%2b%2bykLcVf45r%2bRtZ2a0mKSlJ9u7dK3l5eVMmbtrMZj1OQqtjXrCI2YYUXCdeBW%2bBe5xNCH4XgFnY2rVrZevWrZKdnS2rV6%2bWmJgY/cci7E87j6mzCA7Dvr4%2befLkiT4fP36sGKKnp2cKr9NiVq5cKZZlKa1YsWJWQftVAEYL%2bG/8s72sWrVKF0NhETt37lR3RLGfEcYT4K5wh7i/1tZW9VDwIQynBfFO37RbvHixLFiwQBYuXCiLFi1Sl/g2K/CrADBPCkADUEMBBVIwy8jISPXNGzZskO3bt6uF2AVgFgW4YuHggqamJn1CeCmsw2kxuPBdu3YpYFqyZInHAiDGcwp5zgRgNAP4WLNmjQqEyVFAXaGhobJt2zZZv369orNNmzZ5hGZ4gbloOz8/Xy0AAhlWVVWpBTixCIVvWBxAKSQkxLP45cuXT9tic34GmAVt3LhRF0IBqgYHB2u8AOILCwuTiIgItQKndkCWYA7MGdQInIaPxXMGOM3f1OnXbD8jAA5hYyEBE4A5oFjcunXrdELLli1TgGUKWsYC0K4RAAXhAVkJUtg6JqiizonuNH/n2UNhmxkBgPtNCcgWsG8DzJZFEigRyJiJ2ydrN32jTbNtMGsnvW08or0TJ07I0qVLPYdgUFCQBmZY1UzbYE7coDdA4vw/Ex6YrXjTPBGo/eDzRkSZ3izBmos0kxnIAJeZwIu/xmJxW7ZsUfMHeBECQ9QBRHgbQmVvVmAFOgfnNH%2b3I8dg164zFWYPuOxxi68lIFvA1zNiLkJpDksTCDlpJiu0Ar1wEiUkMU6fPq1JCeIEMjgAHVxZTU2NnD9/XoqLi%2bXSpUua7OBApV35ZIhukiKgSAATiZCcnBy5fPmyJjgM7ni/tHgAzJ8cn8kOAXchskL4ftwiC%2bbJAhEGSJDsDgslg8TijQDIQNEGofAOTviwe4EAnwFzUea9AGY6zN6HnH19%2bM3Qf5D%2bNQG458lVmzXf9r6/z4l5IQDjo7mhgQhqiO4IevDP4HjcFzc2JqIE4PANr2G/ASIhwj9zc0QbAiZ4%2bEb/jOUr%2brQCoWEmevXqVbl48aKkp6erq8vNzdWkCSl3fLjBBU%2bfPlXh4PvPnj2rmIAnARX%2bnnbkBviPO4WH/%2bfOndObIFwlY1FHeLNZh%2bXPAAhtoC00iibQKNoxWuGd3J6J7flH%2bEsdgg8BMHGyP2gbPqI56vynTp7AWBDCpQ%2bIf1gJ/AgZXuoQ3829JU8DzPwmACaENgAmRGdoFYACogPomGsp8gNYAsiOdywCPsAP2uUOD0RHSgwtklRB86DFrKws1TqL404RbVdWVmp/vFPnKo42pMJAjlgHxDj0eeHCBe3LJG4sf0Z/Zu%2ba2127fzY3xSaut8f9JvChbvauPR2O1WBFznsKyIxpxjPzsNftlzNzFg5/bOV/IPQP/Q0MvAsHUmH4RwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1024\" alt=\"casper\" data-srcset=\"/assets/static/RCP24-slide13.82a2fbd.ba7dda5a8fe5a1580882919bc92e69c6.png 480w, /assets/static/RCP24-slide13.cbab2cf.ba7dda5a8fe5a1580882919bc92e69c6.png 1024w\" data-sizes=\"(max-width: 1024px) 100vw, 1024px\" data-src=\"/assets/static/RCP24-slide13.cbab2cf.ba7dda5a8fe5a1580882919bc92e69c6.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/RCP24-slide13.cbab2cf.ba7dda5a8fe5a1580882919bc92e69c6.png\" width=\"1024\" alt=\"casper\"></noscript></p>\n<h3 id=\"transcript\"><a href=\"#transcript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TRANSCRIPT</h3>\n<p>Greg: Today we’re going to talk about RChain research in the Casper direction—an application of Rho calculus. We’ll talk about an extension of the Rho calculus. In 2008, I was driving from Seattle to Vancouver when I saw the domain equation that would describe the calculus. It took me another year or so to write the equation down. Then it took me another 10 years to write down the calculus that corresponded to the solution to the equation. Here’s an application for the equation that I think is kind of cool.</p>\n<p>A lot of consensus algorithms have to deal in the end with something called FLP impossibility. Essentially what they proved is only asynchronous communication, then it’s impossible for autonomous agents to come to agreement. They end up always being this kind of bifurcated state where some chunk of them believes the value that they’re operating with is one thing, and another chunk believes that the value that they’re converging to is another thing.</p>\n<p>If you want to get around this inevitability of a fork is to impose some synchrony constraints. When you’re thinking about synchrony constraints, these need to be limits on something, with respect to the communication amongst the participants. You could say there’s some time-bound on the communication events. There’s some number—and you don’t even have to know the number—of taking seconds that they bounce the communication events. That’s one approach.</p>\n<p>Isaac: That’s why they did in Cassanova, right?</p>\n<p>Greg: That’s correct. Now the problem with a wall clock time, like synchronization constraints, is you’ve now introduced another area of trust. Because network time is nontrivial, trying to get a decentralized network time rolled out is not exactly easy. It gets much more difficult in an age of satellites, where you begin to experience relativistic effects between the ground and the satellite. There’s an actual relativistic correction that goes on in communications with satellites and the ground these days.</p>\n<p>That’s a lot to take on if you want to roll out a protocol globally. It would be better if we could have a way of putting some synchronization constraints that didn’t involve wall clock time at all. If you could somehow get something intrinsic to the communication events themselves that allowed you to introduce these synchronization constraints, that would be cool.</p>\n<p>I realized that we could describe a wide range of synchronization constraints using polynomials. These were polynomials that were effectively a sub-class or a sub-algebra of the Rho calculus. Every term in a polynomial represented that a communication event had occurred by one of the participating parties. We didn’t say whether it was a send or receive, just that a communication had occurred. Multiplication was sequencing and sum was choice in non-determinism.</p>\n<p>Any particular multiplication of terms for the validator set represents round robin. So V1 x V2 x V3 all the way up to VN. That includes all of the validators is effectively one path from V1 to VN. You can get to round robin in this style. When I was thinking about these polynomials, I noticed two things.</p>\n<p>One, that I could encode them readily directly in the Rho calculus. Two, they reminded me of the kinds of polynomials that show up in error-correcting codes. I did a literature search and discovered about 10 years ago some folks had figured out that error-correcting codes give you synchronization constraints and can be used to enforce likeness, enforce a termination of a consensus protocol. That’s already a part of the literature. I can give you a rough idea of what’s going on there before we dive into some of the other stuff. Let me just stop and check in and see if what I’ve said makes sense.</p>\n<p>Christian: Yeah, this makes sense. The necessity of imposing synchrony constraints, if you imagine a bunch of people who can only communicate by leaving things in mailboxes, they would certainly have a hard time reaching an agreement on unless they are coordinating. It’s really cool that there’s this correspondence with polynomials. I don’t yet know how to think about it in detail.</p>\n<p>Greg: Basically it’s just like going back to CCS. It’s the same sort of intuitions that ultimately Milner built on in order to give CCS. It’s really just looking at a tightly constrained subset of what you can do with Rho.</p>\n<p>The basic idea of error-correcting codes goes way back to long before CCS or Pi calculus or any of those things were discovered. You’re trying to get a message; let’s keep it simple for our intuitions. Just from one party to another over a channel that’s noisy. The noise represents the possibility of either dropping the information that’s being transmitted—just losing it entirely—or duplicating the information, or potentially reordering the information.</p>\n<p>Suppose that you’re just transmitting bits; so you’re just transmitting as zeros and ones. We know that there’s a kind of correlation between sending structured information and sending atomic information, like a bit. Obviously, there’s a kind of duality between sending structured data and doing a lot of communication events of sending atomic data. If I were going to send a word of bits, what would I do? I’d send one bit and the next bit and the next bit. Then someone on the other end would have to assemble that data into the structure. This is just like sending packets over TCP today. It’s not a complex idea. If I want to send something that’s larger than a packet, I have to break it up into packets, send the packets, and reassemble it. Very simple idea.</p>\n<p>Christian: Would that change in the Rho calculus because you can package up large amounts of code as a name and send it all at once? Or does it down in the hardware eventually just translate back down into packets?</p>\n<p>Greg: There are actually two questions in your question. If we’re talking about the theoretical realm, in the Rho calculus, one of the things that we can do is we could express this duality. We could imagine that there’s an atomic thing, which there is in the Rho calculus, and we could prove quite rigorously, in fact, that any structure that was encoded in a name could be sent. There’s a one send communication event that sends the structure over. Then there’s a bunch of communications that would send the information in atomic chunks, or package chunks, so to speak. Does that make sense?</p>\n<p>Christian: I think so.</p>\n<p>Greg: Cool. There’s a theorem there that I would invite people to go and try to improve. It might be conceptually easier in the Pi calculus where you’ve only got names. You want to think about a version of the Pi Calculus where you can send something more structured than just names, and then prove that you could send every structure that you might imagine you could send just by sending names.</p>\n<p>This ultimately boils down to the fact that the Pi Calculus is Turing complete. You have to be able to do this kind of thing in order for the Pi Calculus to be Turing complete. The two notions are related.</p>\n<p>Now let me relate that back to the error-correcting codes by giving a little example. Suppose that instead of sending a single bit, for every bit that we’re going to send we send three bits. Then our scheme is like a voting scheme. So if I see three zeros on the recipient’s side, then I know that it was a zero for sure. The bit got through. If I see three ones, likewise I know it was a one. If I see any version of two zeros, then the likelihood is that what was trying to be communicated was a zero, and one of the ones got corrupted, one of the positions got corrupted. Likewise, if I see two ones, the likelihood is that what was trying to be sent was a one. This kind of corresponds to a prearranged voting scheme. The three bits represent three helpers who are all trying to get the bit across and they all have a vote. That’s one way to think about it.</p>\n<p>That means that for a protocol like this, you are sending structured data, so there is an encoder and decoder. As I’ve said, there’s a duality between encoder and decoder pairs and elaborations of the protocol. The elaborations of the protocol safeguard against lost duplication of reordering.</p>\n<p>Christian: What do you mean by elaboration?</p>\n<p>Greg: Imagine the only thing I can send is a single bit. Then what do I do in terms of additional sends and receives to safeguard against lost information? But there’s this duality between encoder-decoder pairs and elaborations of the protocol. We can prove this rigorously; that’s something we know we can do.</p>\n<p>Examples of elaborations of protocols that exist in the wild, Milner analyzed the alternating bit protocol with CCS. Anybody who’s gone through his big orange and white CCS book has seen the presentation of the alternating bit protocol and the analysis of its correctness using bisimulation in that book.</p>\n<p>There’s a grownup version of the alternating bit protocol, which is called the high watermark protocol. That is the practical and out in the wild and woolly internet. That’s the heart of TCP. A lot of us depend upon that protocol. Those are some versions that people might dig into to go and take a look at what an elaboration of a protocol might look like.</p>\n<p>The key idea is that this duality can also be used as a kind of expressiveness limit. If I hand you an encoder-decoder pair, what I’ve also done is said, “you’re not allowed to go beyond the elaboration of the sort of atomic send protocol.” This is the trick. We can treat an error-correcting code as a limit on communications.</p>\n<p>Isaac: So this is the relation to a synchrony constraint.</p>\n<p>Greg: Exactly.</p>\n<p>Isaac: That’s really cool.</p>\n<p>Greg: That’s the trick. There are some papers that we’ll link to in the podcast that talks about this idea in one setting. There are some interesting facts about those papers. They don’t have a unified language in the way that we do. They have to treat shared memory versions of the protocols somewhat differently than the message passing versions of the protocol. Whereas in the process calculus setting, we get to treat those uniformly. Names could be memory addresses and they could be channels in a message-passing world. We get a win. In the paper, they have to treat those individually or independently.</p>\n<p>The other side of it is they don’t have bisimulation as a proof technique. They have to go about proving their main theorems in a kind of more ad hoc or homegrown way. Whereas in our calculi, we get to avail ourselves of bisimulation in the same way that Milner sketches out for us in the alternating bit protocol work.</p>\n<p>Christian: That’s big.</p>\n<p>Greg: It’s huge. We get to use this one proof technique for a wide class of problems. That ends up being a big win over the way they have to structure it. I heartily recommend to our listeners and to you guys that are interested, go and read these papers on synchronization constraints and error-correcting codes. They don’t call them synchronization constraints. The language that they use is in terms of distributed consensus: error-correcting codes and distributed consensus. What they ended up leaving is that with these error-correcting codes, they can get termination of the protocols.</p>\n<p>But how would we code this up in the Rho calculus? In the Rho calculus, the comm rule represents direct transmission. The comm rule is easy to read. We’ve seen it several times in this series of podcasts. On one side of par, I have a process that’s waiting on a channel X for Y, then becomes P, and on the other side of the par I have a channel that sending Q on X. In that situation, the whole par evolves to P in which the code of Q is substituted in for Y. That represents the transmission of the value across the channel.</p>\n<p>I could rich or refine a comm rule if I had a context. Context represents a kind of process with a hole in it. If I had a context K I could have a comm sub K, or comm of K, that is almost identical to our comm rule except that when we do the substitution, we wrap or Q up in K. So we substitute the quote of K applied to Q for Y. Now that K can represent encoder-decoder pairs. One side of the communication can represent the encoding, the other side can represent the decoding. That gives you the encoder-decoder computations, which you could run Q through.</p>\n<p>I’ll just be suggestive here. I’m not saying that this is specifically exactly how it’s done because it has to be a little bit more delicate so that you don’t accidentally trigger some unfounded recursion. On the one side, K could be the encoder side of it; on X you send Q and par with itself three times; on the decoder side, you drop that par back down to a single Q. That would represent kind of the three-bit, one-bit approach. The dual of that would be that you send on XQ once, and then in par with that you send an XQ again, then in par with that, you send out an XQ yet again. That’s the duality between the two.</p>\n<p>This is really just to be suggestive, just provide some clues as to how you might go about writing this down. It’s a little bit more subtle than this, but I just want to give people ideas. Does that make sense?</p>\n<p>Christian: Yes, this makes sense.</p>\n<p>Greg: Cool.</p>\n<p>Isaac: This is really cool. I know you covered this in your Design of Computational Calculi course. I’m definitely getting flashbacks from that. So this is cool to see it come together in a totally different way and provide us with something about synchrony. That wasn’t even in the realm of possibility that I was thinking of for an application. So this is really cool.</p>\n<p>Greg: I love providing applications for this. But it gets better. If you have a comm K1 and the comm K2, you can compose them by composing the context. We get to be a little bit programmable. I could say, here’s a version of the protocol that uses these synchrony constraints, and here’s a protocol that uses these other synchrony constraints, and we can stack and compose by composing the synchrony constraints.</p>\n<p>Synchrony constraints are a little bit programmable, but notice that no matter what you do, you’re stuck with your synchrony constraint for the lifetime of the protocol. Once and for all, we insist that these are the synchrony constraints that hold. That’s okay. It’s not a terrible solution. The question is, could we be more dynamic? Could we make the synchrony constraints be totally programmable?</p>\n<p>Isaac: Does this have anything to do with different shards? Like wanting to communicate across shards and having different constraints in two separate spaces?</p>\n<p>Greg: Yes. It has a lot to do with that has a wall you do with being able to add patches to the protocol. So we’re rolling out patches. Anything that was in flight could work with this patch. Because when you roll out a patch, validators may pick up the patch at uneven times. Those kinds of things.</p>\n<p>Being able to think about the management of the protocol over time is really important. That’s why we need compositional techniques, because it’s a single network. A network is not going to be updated all at once. We can’t guarantee that. Even if you start with a single protocol, it’s going to become a heterogeneous protocol in a heartbeat.</p>\n<p>The truth is that just like there’s ABC and CBS and NBC in the US, and then we include all the global broadcasting systems, there are lots of lots of broadcast networks. There’s also Facebook and Twitter and Snapchat and Instagram. We should never be thinking that we’re going to live in a world with a single network. We have lots and lots of experience to convince us that no matter how global in scale networks are or how capital-intensive they are, if they’d provide significant value, there will always be multiple of them. And that’s a good thing. Redundancy is good.</p>\n<p>Isaac: Well that’s what all these error-correcting codes are about.</p>\n<p>Greg: Now I’m going to then a variant of the Rho calculus, which is the solution to that domain equation I saw while driving in a snowstorm from Seattle to Vancouver. This makes it possible for the synchronization constraints to be programmable inside a single protocol. You can write down, as a part of the protocol, various liveness considerations for your consensus. Then after I describe that, and run at least a minimal calculation, then I’ll talk about the secret agenda behind the design of this. The scope is a bit larger than just what we talked about so far.</p>\n<p>It’s like the ordinary Rho calculus. You have the usual suspects, stopped process, the four comprehension, the sending process, parallel composition, anti-referencing names. All of those goodies are there. Then we have two additional terms. These terms come from the fact that our names are no longer just the codes of processes. They are codes of pairs, where one half of the pair is a context and the other half of a pair is a process. For people who are not familiar, a context is just a process with a hole in it. That’s what we were using in the earlier part of this discussion. You can build them up syntactically by saying a process is either a hole or it’s one of the constructors applied to a context instead of a process.</p>\n<p>For example, it would be a four comprehension in front of a context, or sending a context, or P in parallel with some contexts. You can get the context in another way. Christian and I have talked about this kind of thing before, and Mike and I have talked about this kind of thing before. If you think of the syntax of the Rho calculus as a parametric data type, these kinds of data types have a well-defined notion of differentiation. This notion of differentiation is the result of applying it to a data type to get that data type with a hole knocked in it. The context can also be calculated from this derivative, this notion of derivative, which is then closely related to the functional notion of a zipper. The zipper gives you a way to build applicative data structures that are efficient for updating and navigation.</p>\n<p>Isaac: If I remember correctly, the derivative notion, you’re doing that to the domain equation that describes the calculi.</p>\n<p>Greg: That’s exactly right. It’s the part that just describes the syntax or the term structure. The thing that it doesn’t touch on is the comm rule, but here we’re now showing for the first time having the comm rule take advantage of this reification of the derivative. This is closely related to, what I used to call back in the Rosette days, perceived early reflected, there’s a process by which you can introduce these call CC kinds of construction. The whole area of research called the limited continuations, that all comes from being able to reify contexts in a particular way and make them available to computation. Here I’m being more than just suggestive that this is closely related to derivatives and in position on the rewrite rules with respect to what they have access to in terms of those derivatives.</p>\n<p>It’s also the inspiration for this calculus, or the derivation of this calculus, comes from work that Mike and I did where we were trying to provide a categorical semantics for ordinary Pi. We realized that all the semantics that we had come up with would have reductions underneath of the four comprehension prefix. That’s undesirable for the Pi calculus because it’s understood in the Pi Calculus semantics that you don’t get any sort of reduction under that prefix. We were looking for various mechanisms to freeze that computation.</p>\n<p>Finally, I said, what if we looked at it the other way around? What if we said, you don’t get to reduce unless you have some magic fairy dust or unless you have a catalyst? It was actually biological. I was imagining these are like biological entities in a soup. Often in biological and chemical situations, we need a catalyst to create a reaction.</p>\n<p>What if we insist that you have to have a comm catalyst in order for the comm rule to run? We were successful in pushing that through. You can get a semantics for the Pi Calculus using this comm catalyst. But it turns out that’s not the end of the story. In our semantics, the comm catalyst doesn’t have any parameters to it. It’s just an atom. In molecular terms, it’s like an element. It’s not a compound. You can imagine catalysts that carry information that can be released as a part of the interaction. That happens in ordinary chemistry all the time. Here we take the comm catalyst and we use it to supply a context. If you look at the ordinary comm rule row, you can see exactly what the issue is going to be. So if I have a four comprehension and I want to do the substitution, well the only thing I’ve got in my hand is Q. But in order to form a name to substitute for Y, I need a context. I’m stuck unless I could supply the context. This is where the comm catalyst comes into play.</p>\n<p>The comm catalyst carries a context. Now I can steal the context off of the catalyst. Then I form a pair of the context and the process. Now I can substitute that and for Y when P runs. That represents plucking a synchronization constraint out of the suit. Potentially there are lots of synchronization constraints around, and I go grab one in order to make this communication happen. Like in Casanova, I don’t know what the bound is, but you have to provide a witness for the bound at the time that I do my communication.</p>\n<p>That’s a crisp formalization of that idea. The interesting point is that I’d like it in the deref, there’s the opportunity to release the context back into the wild. Before I go there though, though, we need to note that we have to update this substitution rule for the deref. In ordinary Rho, the substitution rule is the place where, if I’m applying the substitution of the code of Q for Y in the term deref Y, that’s when you start running Q. That’s the idea.</p>\n<p>Isaac: Like substitution.</p>\n<p>Greg: Exactly. Now we’re going to refine that. Since now names are context process pairs. When I do the deref, instead of starting to run Q, I run Q inside K. That’s the idea.</p>\n<p>Christian: This seems, yet again, immensely more expressive. A big first question for me is if you have a bunch of contexts swimming around in parallel in some system, how are you coordinating them? If you have a bunch of synchrony constraints, you’re only allowing valid synchrony constraints? It seems like some would progress and some wouldn’t.</p>\n<p>Greg: You’re absolutely right. Now I’ve given you enough rope that you can hang yourself. Now you have to be careful about the way you program so that you don’t introduce synchrony constraints that widen the synchrony too much. You can easily imagine writing down protocols in this capability where you infinitely widen the communication—or you’ll widen the synchrony, and by widening the synchrony you shoot yourself in the foot. I’ll give you some examples of computations to give a sense of how one might control for that.</p>\n<p>As a part of programming this, we’d like to be able to, in the case of a deref prior to substitution, maybe steal that context back, put it back into the soup. If you go look at “Semantics for Delimited Continuations,” this is closely related to their stack discipline for delimited continuations. If you think of the context as a representation of your continuations, this gives me a data structure that’s richer than a stack for maintaining my delimited continuations. Delimited continuations can also be thought of as bounds or synchrony constraints. They represent an awaiting context for your computation. That’s another way of thinking about synchrony constraints. The awaiting context sort of says you’re going to be done, and I can take your result and run with it. This is closely related to elaborating the delimited continuations work in a concurrency setting.</p>\n<p>We have one more rewrite rule that is now dual to the comm rule. This is where the other term that I introduced, which I call U, for update. So we can update location and store a process there, which is just the same as sending the process on the channel. If I have a U and you have X, which is in some ways dual to the comm thing, and I run that in parallel with a deref of a K and a Q, then that steals the K out of the deref and puts it in a comm catalyst, and places the Q in X. This is in competition with the rule for substitution. Though, if you get a substitution for a deref before you get one of these U of X things to apply to a deref, then you’ll start running Q inside K.</p>\n<p>Otherwise, you can unpack it. So you could think of it as a garbage collection, or you could think of it as a way of controlling the stack. Putting the delimited continuation back into the stack. Those are two different ways of thinking about this.</p>\n<p>Now I’m going to run a calculation for you guys. First of all, notice that the simplest possible name is the one in which you just have a whole for the context and zero for your process. The code of that pair. I’m just using that name as a synchronization point for a simple comm event. I’ve got some name from the simplest possible name, run the deref of whatever it is we received. So run the deref of K and Q. We’re going to send them the simplest possible name, P, and to make sure that it actually works, we’re going to provide a comm catalyst, with a context K prime to distinguish it from the Ks we’ve got.</p>\n<p>If you just apply the straight comm rule that results in P running in K prime. Let’s say that K prime is also of the form, like the process above. From the simplest possible name, we’re listening for a KQ, and then we’re going to run the deref of KQ on the simplest possible name, we’re sending anything. So here K prime is a context, so we’re sending P because we’re applying K prime to P, and we supply it with a comm catalyst, K double prime. That will result in K double prime of P being run. What we’re showing is that we have that we can shuffle P through different contexts. Maybe we can just do a whole other podcast on this, but what I want to do is just to talk a little bit about what my secret agenda is here.</p>\n<p>The notion of the context process pair goes back to the notion of the zipper. The zipper says that if I have some data type T paired with the derivative of T, that forms a location. You can think about it in terms of trees. I’ve got a tree with the hole knocked in it and I’ve got a subtree, which is just the tree. If I just had the tree with a hole knocked in it, that wouldn’t describe a location in a tree because I can put any subtree in that hole. If I just had a subtree, I don’t know what the surrounding context is. I could have any surrounding context. But if I have the two that now the point at which they’re plugged, that location is described by that pair.</p>\n<p>We have a notion of location for arbitrary discrete structures that are related to a derivative. Now I can locate terms which I’m going to equate with matter and energy in a structure. Sprinkling matter and energy in the structure is the equivalent of our stress-energy tensor in the Einstein field equations. It plays in the role of the stress-energy tensor. It’s correlated to the metric because we can now talk about how distant things are in terms of our notion of location. Now when I add a rewrite rule, that rewrite rule is driven by the distribution of matter and energy, which changes how close together or how far apart the processes are. This mimics the recursive nature of the Einstein field equations, where the stress-energy tensor tells you where matter and energy are distributed, and the metric tells you how far apart they are. The distribution causes them to change how far apart they are, which then changes the distribution, and around and around and around you go.</p>\n<p>The Einstein field equation really ought to be written in terms of recursion, but it isn’t. This is something that I’ve wanted to tackle for quite some time. This calculus gives us an analog of the intuitions that Einstein was following. What we’ve done here with the error-correcting codes is to show that it’s not just about space, that we can get an emergent notion of time. That’s what the synchrony constraints are: an emergent notion of time. Before I was calling this space calculus; with the error-correcting codes interpretation, I’ve now sort of earned the right to call it the space-time calculus.</p>\n<p>Christian: I think that’ll catch on.</p>\n<p>Isaac: Oh man. My mind is pretty blown right now. That’s pretty cool.</p>\n<p>Greg: Yeah, we’re having fun.</p>\n<p>Isaac: Yeah, no kidding. You definitely went in a direction I was not expecting.</p>\n<p>Christian: It’s very much like that scene from Mulan where she uses the weights to climb the pole. Before the comm catalyst was a weight that was just serving to prevent the rewrites under the prefix. And now it’s like providing huge amounts of expressiveness.</p>\n<p>Greg: That’s exactly right. That is precisely the idea. We get to straddle these two worlds. It’s the world of the very practical: I need to show that these consensus protocols will terminate. On the other hand, we just happened to do that in a way that lines up with an analogy to the Einstein field equations.</p>\n<p>Christian: Basically you’re going to have an algorithm that given a certain consensus situation, you can generate the exact context that you need and prove that they are sufficient.</p>\n<p>Greg: I don’t know if we generate them for free, but if we have them in mind, we can certainly code them up. It would be a nice algorithm to generate them for free. That’s something absolutely worth working on.</p>\n<p>Christian: And the error correction is only one of many applications of this.</p>\n<p>Greg: Absolutely. I think a lot about biological applications myself. This is a way to go after what Cardelli he was doing with his Ambient calculus. We now have a way of talking about locating terms without losing substitution is our mechanism for execution, which is what happens in the Ambient calculus. It’s a whole tree-rewrite calculus, not a substitution-based calculus.</p>\n"}},{"node":{"id":"2be5c10b9c749e6fd9536f320c38545d","title":"RCON3 INTERVIEW - MIKE STAY","path":"/blog/2018/11/01/interview/","date":"1. November 2018","timeToRead":3,"author":[],"excerpt":"This is part of a series of interviews conducted during RCon3, featuring individuals that have contributed to the RChain ecosystem.","content":"<p>RCON3 INTERVIEW: MIKE STAY</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1080 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ec701b7f4f021204c531e0be3a41203f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ec701b7f4f021204c531e0be3a41203f)' width='1080' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAoAEADASIAAhEBAxEB/8QAHQAAAQUAAwEAAAAAAAAAAAAABgADBAUHAQIICf/EADEQAAEDAwMCBQIEBwAAAAAAAAECAwQABREGEiEHMRMiQVFhFBUIcZGhMjNCRVLB0f/EABkBAAMBAQEAAAAAAAAAAAAAAAIDBAEFAP/EACERAAICAgIBBQAAAAAAAAAAAAECABEDIQQSMRNCUWGB/9oADAMBAAIRAxEAPwC5jatsqj5n1p/Ns1ZMapsJHM5I/NCv%2bVdwtOWx68rVIt9rMNROBsQAQR5cDgg9j%2btO3bRtncnspgWiAGhwsDjnPO7ngAe3vUHVfuWembqxILGobIf7iwD85H%2bqq9b68tOntPOyoktiTOcPhx2UeYlZ9SPYDn9B60UX7Q1kQy2bba2y4pWVbXFE4xxhO7nNZF1h6W3t%2b%2bNSrPbkfZWoQdcc%2boG1laQS5ncc98Yx3FMXGpMUwYLfzKjSU%2bTr2%2bw42rJyJNvZLi0hZShJcCchJAwNoyBn17Vb9TFtzrf09ZaWlZcnNIVtIOFJCEkfrRF0k0JYbh0sg3hEZ5dyf3h4odxlSXCnt7AYOKENbWa0Q5ibZd7rPtCYL65cRLEJbq8OgKGV9u6SB2wR60zqA0AglbnojU5jwWEFxxhtRfyPFVsyn1A9TxWSfiDMA9M3JkBphPjyWEBxtG0nk5HzyP2rAtQ6gjqlQ02rU96ksZw4uW2G1MDP9O1Z3dyfSrmJb39WB6NE1bMuEBhSFLTKYUgZJJ4SVHnjvXuipuShGueubWRIvDkZy3oS2jdhZSQpODwTng5%2bPf8AOpF4Uhm5MxxB8bxcHJz5lE449Mj1zTlt%2bjen%2bBHlSd7ZKgOQle0gEjnmo9/cWxKcbjynGlqGchRzlXoPjgUvEhyGlnUyMqG2WCtvl/SXIGTKdmlbSvEbdeGzAPG1IHlwcjFXvVOSxZumV2ntxAtSIpShtZOElzAO4jkYz79wKFIdhatl0%2btE91l4NFbkdoDJUs8lP%2bIODxXPUu%2bQn%2bluo4TklwSmoPlQ%2bvl4FaeQM5OPemLjOPRNzMxD7Va/YK9FLtfT0ykuwYtj%2b322UtC3JjrwcJICio7cgAA/HArNuoHVa53huRHZhwo7MhrwFOtKcJcQlYUlQ38ggjg/Jo76OQnbh0E1cxGcKH3ZTrbaUKOXFFpGEkfPYVgN0bP28B1KkPtJ2KChgjk8U0jck9ojkTUt2YtohNTQmM0hSEoMdogD2yUk%2bp9asbBr1NmgMRY1oYGxtKFrS4Qp1QJJUrjuc/tQUtWCpA/hBpmsKg%2bYNz6BW/VdhiSy6idb0b/5ikoczjPIAxgUO681BOUhuVp9UeS7KVtaUpJRwB38wGQPelSpXF1kFSjMSQSYI2qwSp9ulv6inOGfIJOxtzGOMZ4Oe/oMVE13aILNjlNrefjvyYS2GEPR1hrxOCML5wOO3z7UqVdHkDqBUlQzv0XukTS%2bgpFtu76Uvypi5CmUsKdATtSlOSOM5TnigHrNBTLM29wHIy4Tq0oCEoLS0LIAxsPOPL3z60qVRN5uMBNVMYUhSnFnAB5OCaaFKlRwJ//Z' /%3e%3c/svg%3e\" width=\"1080\" alt=\"interview\" data-srcset=\"/assets/static/image0.82a2fbd.b06f4d54d1d3cfd7fd671db4d1985e1c.jpg 480w, /assets/static/image0.175c05c.b06f4d54d1d3cfd7fd671db4d1985e1c.jpg 1080w\" data-sizes=\"(max-width: 1080px) 100vw, 1080px\" data-src=\"/assets/static/image0.175c05c.b06f4d54d1d3cfd7fd671db4d1985e1c.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/image0.175c05c.b06f4d54d1d3cfd7fd671db4d1985e1c.jpg\" width=\"1080\" alt=\"interview\"></noscript></p>\n<div class=\"youtube-embed\">\n    <div style=\"width: 100%; margin: 0 auto;\">\n        <div style=\"position: relative; padding-bottom: 56.25%; padding-top: 25px; height: 0;\">\n            <iframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\"\n                src=\"https://www.youtube-nocookie.com/embed/MBdfkOtseB8\"\n                allow=\"autoplay; encrypted-media\" allowfullscreen>\n            </iframe>\n        </div>\n    </div>\n</div>\n<p><br/><br/></p>\n<h3 id=\"mike-stays-background\"><a href=\"#mike-stays-background\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MIKE STAY’S BACKGROUND</h3>\n<p>Mike worked with Google in 2007, creating software security tools for the ad team. In 2009, he met Greg Meredith and became interested in formalizing the steps of computation, trying to characterize it in a way he did in the rosetta stone paper.</p>\n<p>Mike and Greg worked on a social network program, which led to an information economy that allows people to filter the information and create more content from it. In 2014, he connected with Nash Foster to create Pyrofex on a distributed computation. About two years later, Mike, Nash, and Greg teamed up to work on the RChain platform.</p>\n<p>At RChain, they also work on Rholang, a new language for writing smart contracts that run on the Rholang virtual machine (RhoVM). It is inherently concurrent and better suited to distributed programming than sequential languages based on Turing machines or Church’s lambda.</p>\n<h3 id=\"what-is-a-comm-event\"><a href=\"#what-is-a-comm-event\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>WHAT IS A COMM EVENT?</h3>\n<p>Mike Stay describes a COMM event as a type of transaction. It’s different from what many people may think of as a transaction. Something like the transfer of a token from one account to another would be about 10 COMM events.</p>\n<p>A COMM event is a delivery of a message from one process to another process. The idea of having a listener (a smart contract) and a sender, and joining them together is a COMM event. This is the fundamental process that Rholang does, and it’s how RChain measures each interaction on the platform.</p>\n<p>Of course, on the RChain platform, you can send transactions, in the sense of sending monetary value from one purse (or wallet) to another.</p>\n<h3 id=\"understanding-tuple-space-and-rholang\"><a href=\"#understanding-tuple-space-and-rholang\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>UNDERSTANDING TUPLE SPACE AND RHOLANG</h3>\n<p>A tuple space is a collection of things called names; these names are places where messages can be exchanged. You can send a message on a name and multiple messages to the same name.</p>\n<p>The interesting thing about Rholang is that even if there’s no data in the table (tuple space), you can issue a query, and then it will just hang onto the query until data shows up for the contract to process. That’s really what a contract is, a query that says, give me all the data that’s coming in on this name, and then I will handle those messages and produce more messages in turn. But the contract is just sitting there, waiting for data. Whenever new data comes in, it runs and processes it. So you can have multiple contracts listening on a name, multiple data coming in on a name. They compete with one another to get access to these resources to do their processing and send more messages out. So the tuple space is really the fundamental data structure that’s being manipulated by the Rholang language.</p>\n<h3 id=\"shard-interaction-and-security\"><a href=\"#shard-interaction-and-security\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>SHARD INTERACTION AND SECURITY</h3>\n<p>RChain will have a root shard that will allow others to create their own blockchains known as child shards. The child shard can have different policies and a different kind of relationship between the parent and child shards than RChain’s, which is based on a depository and mint relationship between parent and child. The parent shard has a depository that backs everything the child shard’s mint issues.</p>\n<p>There’s a security check in place to keep the main network protected and limit the damage from bad actors. The parent shard won’t let the child shard take more out of the depository than it put in. This means that if bad actors mess up the economics of a child shard, it won’t affect the economics of the rest of the network.</p>\n<p>You’re always vulnerable when there’s a large enough coalition of validators. In this case, they have the possibility to mint more in the child shard than they have backing the parent shard. The default depository and mint contract keeps them pegged 1 to 1 … If they put a thousand REV in but issued two thousand, only the first thousand of it would be honored, and after that the remaining child REV would be worthless.</p>\n<p>To learn more about Pyrofex and the projects that are being developed, visit their site. If you’re interested in watching Mike’s lectures at the RChain developer conference, which cover namespaces and consensus, click here.</p>\n"}}]}},"context":{}}